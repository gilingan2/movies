// File: components/ad-scripts.tsx
"use client"

import React, { useEffect, useRef } from "react"
import { useAdScript } from '@/lib/adScriptContext';

interface AdScriptProps {
  className?: string;
}
const AdScript: React.FC<AdScriptProps> = ({ className = 'ad-container' }) => {
  const { adScriptOptions, scriptSrc, directLink } = useAdScript();
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    // Set global options
    (window as any).atOptions = adScriptOptions;

    // Create and append script
    if (containerRef.current && scriptSrc) {
      const script = document.createElement('script');
      script.src = scriptSrc;
      script.async = true;
      containerRef.current.appendChild(script);
    }

    // Cleanup function
    return () => {
      if (containerRef.current) {
        const script = containerRef.current.querySelector('script');
        if (script) {
          containerRef.current.removeChild(script);
        }
      }
    };
  }, [scriptSrc, adScriptOptions]);

  return (
    <>
      <div
        ref={containerRef}
        className="ad-container flex h-full items-center justify-center"
      >
      
      </div>
    </>
  )
}

export default AdScript

// File: components/as-settings.tsx
"use client"
import React from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useAdScript } from '@/lib/adScriptContext';
import { saveSettings } from '@/lib/save-setting';

// Define the schema for form validation
const formSchema = z.object({
  scriptSrc: z.string().min(1, { message: "Please enter a valid URL" }),
  directLink: z.string().url({ message: "Please enter a valid URL" }).optional().or(z.literal('')),
  key: z.string().min(1, { message: "Key is required" }),
  format: z.string().min(1, { message: "Format is required" }).optional(),
  height: z.number().min(1, { message: "Height must be greater than 0" }).optional(),
  width: z.number().min(1, { message: "Width must be greater than 0" }).optional(),
  params: z.string().refine((value) => {
    try {
      JSON.parse(value);
      return true;
    } catch {
      return false;
    }
  }, { message: "Invalid JSON for params" }).optional()
});

const SettingPage: React.FC = () => {
  const {
    adScriptOptions,
    scriptSrc,
    directLink,
    updateAdScriptOptions,
    updateScriptSrc,
    updateDirectLink
  } = useAdScript();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      scriptSrc,
      directLink,
      key: adScriptOptions.key,
      format: adScriptOptions.format,
      height: adScriptOptions.height,
      width: adScriptOptions.width,
      params: JSON.stringify(adScriptOptions.params, null, 2),
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      await saveSettings(values);

      updateScriptSrc(values.scriptSrc);
      updateDirectLink(values.directLink || '');
      updateAdScriptOptions({
        key: values.key,
        format: values.format || '',
        height: values.height || 0,
        width: values.width || 0,
        params: values.params ? JSON.parse(values.params) : {},
      });

      alert('Settings saved successfully!');
    } catch (error) {
      console.error('Error saving settings:', error);
      alert('Failed to save settings. Please try again.');
    }
  }

  const handleReset = () => {
    form.reset({
      scriptSrc: '',
      directLink: '',
      key: '',
      format: 'iframe',
      height: 50,
      width: 320,
      params: '{}',
    });
    localStorage.removeItem('adScriptSettings');
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="mb-4 text-2xl font-bold">Ad Script Settings</h1>

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
          <FormField
            control={form.control}
            name="scriptSrc"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Script Source</FormLabel>
                <FormControl>
                  <Input placeholder="https://example.com/script.js" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="directLink"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Direct Link</FormLabel>
                <FormControl>
                  <Input placeholder="https://example.com/ad" {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="key"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Key</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="format"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Format</FormLabel>
                <FormControl>
                  <Input {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="height"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Height</FormLabel>
                <FormControl>
                  <Input type="number" {...field} onChange={e => field.onChange(Number(e.target.value))} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="width"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Width</FormLabel>
                <FormControl>
                  <Input type="number" {...field} onChange={e => field.onChange(Number(e.target.value))} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="params"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Params (JSON)</FormLabel>
                <FormControl>
                  <Textarea {...field} />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <div className="flex justify-between">
            <Button type="submit">Save Settings</Button>
            <Button type="button" variant="destructive" onClick={handleReset}>
              Reset to Default
            </Button>
          </div>
        </form>
      </Form>
    </div>
  );
};

export default SettingPage;
// File: components/discover-filter-date.tsx
import * as React from "react"
import { format } from "date-fns"
import { Calendar as CalendarIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Calendar } from "@/components/ui/calendar"
import { Label } from "@/components/ui/label"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

interface DiscoverFilterDateProps {
  value: string
  disableBefore?: string
  disableAfter?: string
  align: "start" | "end" | "center"
  label: string
  onChange: (value: string) => void
}

export const DiscoverFilterDate: React.FC<DiscoverFilterDateProps> = ({
  value,
  align,
  label,
  disableBefore,
  disableAfter,
  onChange,
}) => {
  const selected = value ? new Date(value) : undefined
  const from = disableBefore ? new Date(disableBefore) : new Date("01/01/1900")
  const to = disableAfter ? new Date(disableAfter) : new Date("12/31/2050")
  const disabled = {
    after: disableAfter ? new Date(disableAfter) : new Date("12/31/2050"),
    before: disableBefore ? new Date(disableBefore) : new Date("01/01/1900"),
  }

  const setSelectedDate = (date?: Date) => {
    onChange(date ? format(date, "yyyy/MM/dd") : "")
  }

  return (
    <div className="space-y-2">
      <Label className="flex text-muted-foreground">{label}</Label>
      <Popover>
        <PopoverTrigger asChild>
          <Button
            variant={"outline"}
            className={cn(
              "w-full justify-start text-left font-normal",
              !value && "text-muted-foreground"
            )}
          >
            <CalendarIcon className="mr-2 size-4" />
            {value ? format(value, "PP") : <span>Select date...</span>}
          </Button>
        </PopoverTrigger>

        <PopoverContent align={align} className="w-64 p-0 md:w-auto">
          <Calendar
            mode="single"
            captionLayout="dropdown"
            selected={selected}
            fromDate={from}
            toDate={to}
            disabled={disabled}
            onSelect={setSelectedDate}
            initialFocus
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}

// File: components/discover-filter-genre.tsx
import { Genre } from "@/tmdb/models/commons"

import { useMultiSelect } from "@/hooks/useMultiSelect"
import { badgeVariants } from "@/components/ui/badge"
import { Label } from "@/components/ui/label"

interface DiscoverFilterGenreProps {
  value: string
  genres: Genre[]
  onChange: (value: string) => void
}

export const DiscoverFilterGenre: React.FC<DiscoverFilterGenreProps> = ({
  value,
  genres,
  onChange,
}) => {
  const { selection, toggleSelection } = useMultiSelect({
    value,
    logic: "and",
    onChange,
  })

  return (
    <div className="space-y-2">
      <Label className="text-muted-foreground">Genres</Label>

      <div className="flex flex-wrap gap-2">
        {genres.map((genre) => (
          <button
            key={genre.id}
            onClick={() => toggleSelection(genre.id)}
            className={badgeVariants({
              variant: selection.includes(genre.id) ? "default" : "secondary",
            })}
          >
            {genre.name}
          </button>
        ))}
      </div>
    </div>
  )
}

// File: components/discover-filter-lang.tsx
import { languages } from "@/lib"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import { Label } from "@/components/ui/label"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { ScrollArea } from "@/components/ui/scroll-area"

interface DiscoverFilterLangProps {
  value: string
  onChange: (value: string) => void
}

export const DiscoverFilterLang: React.FC<DiscoverFilterLangProps> = ({
  value,
  onChange,
}) => {
  const selected = languages.find(
    (lang) => lang.iso_639_1 === value
  )?.english_name

  return (
    <div className="space-y-2">
      <Label className="flex text-muted-foreground">Language</Label>

      <Popover>
        <PopoverTrigger
          className={cn(value ? "text-foreground" : "text-muted-foreground")}
          asChild
        >
          <Button
            className="w-full justify-between text-left"
            variant="outline"
          >
            {selected || "Select language..."}
            <ChevronsUpDown className="ml-2 size-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>

        <PopoverContent className="w-64 p-0 md:w-80">
          <LanguageList value={value} onSelect={onChange} />
        </PopoverContent>
      </Popover>
    </div>
  )
}

export const LanguageList = ({
  value,
  onSelect,
}: {
  value: string
  onSelect: (value: string) => void
}) => {
  return (
    <Command>
      <CommandInput placeholder="Search.." />
      <CommandList>
        <CommandEmpty>No results found</CommandEmpty>
        <CommandGroup>
          <ScrollArea className="max-h-40 overflow-y-auto">
            <LanguageOption value="" onSelect={onSelect} selected={!value}>
              All
            </LanguageOption>

            {languages.map((lang) => (
              <LanguageOption
                key={lang.iso_639_1}
                value={lang.iso_639_1}
                onSelect={onSelect}
                selected={value === lang.iso_639_1}
              >
                {lang.english_name}
              </LanguageOption>
            ))}
          </ScrollArea>
        </CommandGroup>
      </CommandList>
    </Command>
  )
}

export const LanguageOption = ({
  value,
  children,
  selected,
  onSelect,
}: {
  value: string
  children: string
  selected: boolean
  onSelect: (value: string) => void
}) => {
  return (
    <CommandItem value={children} key={value} onSelect={() => onSelect(value)}>
      <Check
        className={cn("mr-2 size-4", selected ? "opacity-100" : "opacity-0")}
      />

      {children}
    </CommandItem>
  )
}

// File: components/discover-filter-provider.tsx
import { useMultiSelect } from "@/hooks"
import { WatchProvider } from "@/tmdb/models"
import { Check, ChevronsUpDown } from "lucide-react"

import { cn, joiner } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import { Label } from "@/components/ui/label"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { ScrollArea } from "@/components/ui/scroll-area"
import { InfoTooltip } from "@/components/info-tooltip"
import { ProviderLogo } from "@/components/provider-logo"

interface DiscoverFilterGenreProps {
  value: string
  providers: WatchProvider[]
  onChange: (value: string) => void
}

export const DiscoverFilterProvider: React.FC<DiscoverFilterGenreProps> = ({
  value,
  providers,
  onChange,
}) => {
  const { selection, toggleSelection, clearSelection } = useMultiSelect({
    value,
    logic: "or",
    onChange,
  })

  const selectedProviders = selection.map((id: number) => {
    return providers.find((item) => item.provider_id === id)
  })

  const comboboxValue = value
    ? joiner(selectedProviders, "provider_name")
    : "Select providers..."

  return (
    <div className="space-y-2">
      <Label className="flex items-center gap-2 text-muted-foreground">
        Where to watch
        <InfoTooltip className="w-60">
          Currently showing providers are available in your region. You can
          change your region in the settings.
        </InfoTooltip>
      </Label>
      <Popover>
        <PopoverTrigger
          className={cn(value ? "text-foreground" : "text-muted-foreground")}
          role="combobox"
          asChild
        >
          <Button
            variant="outline"
            className="w-full justify-between text-left"
          >
            <span className="line-clamp-1">{comboboxValue}</span>
            <ChevronsUpDown className="ml-2 size-4 shrink-0 opacity-50" />
          </Button>
        </PopoverTrigger>

        <PopoverContent align="start" className="p- w-64 md:w-80">
          <ProviderList
            providers={providers}
            selection={selection}
            toggleSelection={toggleSelection}
            clearSelection={clearSelection}
          />
        </PopoverContent>
      </Popover>
    </div>
  )
}

const ProviderItem = ({
  provider,
  selected,
  toggleSelection,
}: {
  provider: WatchProvider
  selected: boolean
  toggleSelection: (value: number) => void
}) => {
  const { provider_id: id, provider_name: name, logo_path: logo } = provider

  return (
    <CommandItem key={id} value={name} onSelect={() => toggleSelection(id)}>
      <Check
        className={cn("mr-2 size-4", selected ? "opacity-100" : "opacity-0")}
      />

      <span className="relative mr-2 size-4">
        <ProviderLogo
          image={logo}
          alt={name}
          className="rounded-md"
          size="w45"
        />
      </span>

      {name}
    </CommandItem>
  )
}

const ProviderList = ({
  providers,
  selection,
  toggleSelection,
  clearSelection,
}: {
  providers: WatchProvider[]
  selection: number[]
  toggleSelection: (value: number) => void
  clearSelection: () => void
}) => {
  return (
    <Command>
      <CommandInput placeholder="Search providers..." />
      <CommandList>
        <CommandEmpty>No provider found.</CommandEmpty>

        <CommandGroup>
          <ScrollArea className="max-h-40 overflow-y-auto">
            {providers.map((provider) => (
              <ProviderItem
                key={provider.provider_id}
                provider={provider}
                selected={selection.includes(provider.provider_id)}
                toggleSelection={toggleSelection}
              />
            ))}
          </ScrollArea>
        </CommandGroup>

        {selection.length > 0 && (
          <CommandGroup className="border-t bg-background">
            <CommandItem
              className="justify-center"
              onSelect={() => clearSelection()}
            >
              Clear selection
            </CommandItem>
          </CommandGroup>
        )}
      </CommandList>
    </Command>
  )
}

// File: components/discover-filter-vote-average.tsx
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"

interface DiscoverFilterVoteAverageProps {
  value: string
  onChange: (value: string) => void
}

export const DiscoverFilterVoteAverage: React.FC<
  DiscoverFilterVoteAverageProps
> = ({ value: initialValue, onChange }) => {
  const value = initialValue ? parseInt(initialValue) : 0

  const handleValueChange = (value: number[]) => {
    onChange(value.toString())
  }

  return (
    <div className="space-y-4">
      <Label className="text-muted-foreground">Vote Average</Label>

      <Slider
        min={0}
        max={10}
        step={1}
        value={[value]}
        onValueChange={handleValueChange}
      />

      <div className="mt-4 flex justify-between border-t">
        {Array.from({ length: 11 }, (_, i) => (
          <div key={i} className="relative pt-2">
            <span
              className={cn(
                "text-[9px]",
                value !== i && "text-muted-foreground"
              )}
            >
              {i}
            </span>
            <span className="absolute left-1/2 top-0 block h-1/3 w-px -translate-x-px bg-muted" />
          </div>
        ))}
      </div>
    </div>
  )
}

// File: components/discover-filter-vote-count.tsx
import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"
import { Slider } from "@/components/ui/slider"

interface DiscoverFilterVoteCountProps {
  value: string
  onChange: (value: string) => void
}

export const DiscoverFilterVoteCount: React.FC<
  DiscoverFilterVoteCountProps
> = ({ value: initialValue, onChange }) => {
  const value = initialValue ? parseInt(initialValue) : 0

  const handleValueChange = (value: number[]) => {
    onChange(value.toString())
  }

  return (
    <div className="space-y-4">
      <Label className="text-muted-foreground">Minimum Votes</Label>

      <Slider
        min={0}
        max={500}
        step={500 / 10}
        value={[value]}
        onValueChange={handleValueChange}
      />

      <div className="mt-4 flex justify-between border-t">
        {Array.from({ length: 11 }, (_, i) => (
          <div key={i} className="relative pt-2">
            <span
              className={cn(
                "text-[9px]",
                value !== i * 50 && "text-muted-foreground"
              )}
            >
              {i * 50}
            </span>
            <span className="absolute left-1/2 top-0 block h-1/3 w-px bg-muted" />
          </div>
        ))}
      </div>
    </div>
  )
}

// File: components/discover-filters.tsx
"use client"

import { useFilters } from "@/hooks"
import { WatchProvider } from "@/tmdb/models"
import { Genre } from "@/tmdb/models/commons"
import { SlidersHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { Button, buttonVariants } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
import { DiscoverFilterDate } from "@/components/discover-filter-date"
import { DiscoverFilterGenre } from "@/components/discover-filter-genre"
import { DiscoverFilterLang } from "@/components/discover-filter-lang"
import { DiscoverFilterProvider } from "@/components/discover-filter-provider"
import { DiscoverFilterVoteAverage } from "@/components/discover-filter-vote-average"
import { DiscoverFilterVoteCount } from "@/components/discover-filter-vote-count"

interface DiscoverFiltersProps {
  type: "movie" | "tv"
  genres: Genre[]
  providers: WatchProvider[]
}

export const DiscoverFilters: React.FC<DiscoverFiltersProps> = ({
  type,
  genres,
  providers,
}) => {
  const { count, getFilter, setFilter, saveFilters, clearFilters } =
    useFilters(type)

  return (
    <Sheet>
      <SheetTrigger className={cn(buttonVariants({ variant: "outline" }))}>
        <SlidersHorizontal className="mr-2 size-4" /> Filters
        {count > 0 && (
          <Badge className="ml-2 px-2 text-xs leading-none">{count}</Badge>
        )}
      </SheetTrigger>

      <SheetContent className="flex flex-col px-0">
        <SheetHeader className="px-4 md:px-6">
          <SheetTitle>Filters</SheetTitle>
          <SheetDescription>
            Narrow down your search results with the following filters.
          </SheetDescription>
        </SheetHeader>

        <ScrollArea className="px-4 md:px-6">
          <div className="space-y-8">
            <DiscoverFilterGenre
              genres={genres}
              value={getFilter("with_genres")}
              onChange={(value) => setFilter({ with_genres: value })}
            />

            <div className="grid gap-2 md:grid-cols-2">
              <DiscoverFilterDate
                label="From"
                align="start"
                value={getFilter("primary_release_date.gte")}
                disableAfter={getFilter("primary_release_date.lte")}
                onChange={(value) =>
                  setFilter({ "primary_release_date.gte": value })
                }
              />

              <DiscoverFilterDate
                label="To"
                align="end"
                value={getFilter("primary_release_date.lte")}
                disableBefore={getFilter("primary_release_date.gte")}
                onChange={(value) =>
                  setFilter({ "primary_release_date.lte": value })
                }
              />
            </div>

            <DiscoverFilterLang
              value={getFilter("with_original_language")}
              onChange={(value) => setFilter({ with_original_language: value })}
            />

            <DiscoverFilterProvider
              providers={providers}
              value={getFilter("with_watch_providers")}
              onChange={(value) => setFilter({ with_watch_providers: value })}
            />

            <DiscoverFilterVoteAverage
              value={getFilter("vote_average.gte")}
              onChange={(value) => setFilter({ "vote_average.gte": value })}
            />

            <DiscoverFilterVoteCount
              value={getFilter("vote_count.gte")}
              onChange={(value) => setFilter({ "vote_count.gte": value })}
            />
          </div>
        </ScrollArea>

        <SheetFooter className="gap-2 px-4 md:gap-0 md:px-6">
          <Button size="lg" variant="outline" onClick={clearFilters}>
            Clear
          </Button>
          <SheetClose className={buttonVariants()} onClick={saveFilters}>
            Save Changes
          </SheetClose>
        </SheetFooter>
      </SheetContent>
    </Sheet>
  )
}

// File: components/discover-sort.tsx
"use client"

import { useSort } from "@/hooks"
import { ArrowDownWideNarrow, ChevronDown, ChevronUp } from "lucide-react"

import { Button, buttonVariants } from "@/components/ui/button"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"

interface DiscoverSortProps {
  type: "movie" | "tv"
}

export const DiscoverSort: React.FC<DiscoverSortProps> = ({ type }) => {
  const { options, getSort, setSort } = useSort(type)

  return (
    <Popover>
      <PopoverTrigger className={buttonVariants({ variant: "outline" })}>
        <ArrowDownWideNarrow className="mr-2 size-4" /> Sort by
      </PopoverTrigger>

      <PopoverContent align="end" className="flex flex-col gap-1 p-1">
        {options.map((option) => (
          <Button
            key={option.value}
            variant={getSort() === option.value ? "default" : "ghost"}
            onClick={() => setSort(option.value)}
            className="justify-between text-left font-normal"
          >
            <span className="flex items-center">
              <option.icon className="mr-2 size-4" /> {option.label}
            </span>

            {option.value.includes("asc") ? (
              <ChevronUp className="size-4" />
            ) : (
              <ChevronDown className="size-4" />
            )}
          </Button>
        ))}
      </PopoverContent>
    </Popover>
  )
}

// File: components/grid-bg.tsx
export const GridBg: React.FC = () => (
  <div className="absolute top-0 h-dvh w-full text-muted">
    <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <pattern
          id="smallGrid"
          width="8"
          height="8"
          patternUnits="userSpaceOnUse"
        >
          <path
            d="M 8 0 L 0 0 0 8"
            fill="none"
            stroke="currentColor"
            strokeWidth="0.5"
          />
        </pattern>
        <pattern id="grid" width="80" height="80" patternUnits="userSpaceOnUse">
          <rect width="80" height="80" fill="url(#smallGrid)" />
          <path
            d="M 80 0 L 0 0 0 80"
            fill="none"
            stroke="currentColor"
            strokeWidth="1"
          />
        </pattern>
      </defs>

      <rect width="100%" height="100%" fill="url(#grid)" />
    </svg>
    <div className="absolute bottom-0 h-[30dvh] w-full bg-gradient-to-t from-background" />
  </div>
)

// File: components/hero-carousel.tsx
"use client"

import React, { useEffect, useState } from "react"
import { MovieWithMediaType, TvShowWithMediaType } from "@/tmdb/models"
import Autoplay from "embla-carousel-autoplay"

import {
  Carousel,
  CarouselApi,
  CarouselContent,
  CarouselItem,
} from "@/components/ui/carousel"

import { MovieHero } from "./movie-hero"
import { TvHero } from "./tv-hero"

interface TrendCarouselProps {
  items: MovieWithMediaType[] | TvShowWithMediaType[]
  type: "movie" | "tv"
}

export const HeroCarousel: React.FC<TrendCarouselProps> = ({ items }) => {
  const [api, setApi] = useState<CarouselApi>()
  const [total, setTotal] = useState(0)
  const [current, setCurrent] = useState(0)

  useEffect(() => {
    if (!api) return

    setTotal(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <div className="mx-auto w-full">
      <Carousel
        opts={{ loop: true, align: "center" }}
        plugins={[
          Autoplay({
            delay: 2000,
          }),
        ]}
        setApi={setApi}
      >
        <CarouselContent>
          {items.map((item) => (
            <CarouselItem key={item.id}>
              {item.media_type !== "movie" ? (
                <TvHero tvShow={item} label="Trending Now" />
              ) : (
                <MovieHero movie={item} label="Trending Now" />
              )}
            </CarouselItem>
          ))}
        </CarouselContent>
      </Carousel>
    </div>
  )
}

// File: components/icons.tsx
import { CircleUserRound, Loader2, LucideProps, Popcorn } from "lucide-react"

export const Icons = {
  Profile: CircleUserRound,
  Logo: Popcorn,
  spinner: Loader2,
  Github: (props: LucideProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>GitHub</title>
      <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
    </svg>
  ),
  Next: (props: LucideProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>Next.js</title>
      <path d="M18.665 21.978C16.758 23.255 14.465 24 12 24 5.377 24 0 18.623 0 12S5.377 0 12 0s12 5.377 12 12c0 3.583-1.574 6.801-4.067 9.001L9.219 7.2H7.2v9.596h1.615V9.251l9.85 12.727Zm-3.332-8.533 1.6 2.061V7.2h-1.6v6.245Z" />
    </svg>
  ),
  Tmdb: (props: LucideProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>The Movie Database</title>
      <path d="M6.62 12a2.291 2.291 0 0 1 2.292-2.295h-.013A2.291 2.291 0 0 1 11.189 12a2.291 2.291 0 0 1-2.29 2.291h.013A2.291 2.291 0 0 1 6.62 12zm10.72-4.062h4.266a2.291 2.291 0 0 0 2.29-2.291 2.291 2.291 0 0 0-2.29-2.296H17.34a2.291 2.291 0 0 0-2.291 2.296 2.291 2.291 0 0 0 2.29 2.29zM2.688 20.645h8.285a2.291 2.291 0 0 0 2.291-2.292 2.291 2.291 0 0 0-2.29-2.295H2.687a2.291 2.291 0 0 0-2.291 2.295 2.291 2.291 0 0 0 2.29 2.292zm10.881-6.354h.81l1.894-4.586H15.19l-1.154 3.008h-.013l-1.135-3.008h-1.154zm4.208 0h1.011V9.705h-1.011zm2.878 0h3.235v-.93h-2.223v-.933h1.99v-.934h-1.99v-.855h2.107v-.934h-3.112zM1.31 7.941h1.01V4.247h1.31v-.895H0v.895h1.31zm3.747 0h1.011V5.959h1.958v1.984h1.011v-4.59h-1.01v1.711H6.061V3.351H5.057zm5.348 0h3.242v-.933H11.41v-.934h1.99v-.933h-1.99v-.856h2.107v-.934h-3.112zM.162 14.296h1.005v-3.52h.013l1.167 3.52h.765l1.206-3.52h.013v3.52h1.011v-4.59H3.82L2.755 12.7h-.013L1.686 9.705H.156zm14.534 6.353h1.641a3.188 3.188 0 0 0 .98-.149 2.531 2.531 0 0 0 .824-.437 2.123 2.123 0 0 0 .567-.713 2.193 2.193 0 0 0 .223-.983 2.399 2.399 0 0 0-.218-1.07 1.958 1.958 0 0 0-.586-.716 2.405 2.405 0 0 0-.873-.392 4.349 4.349 0 0 0-1.046-.13h-1.519zm1.013-3.656h.596a2.26 2.26 0 0 1 .606.08 1.514 1.514 0 0 1 .503.244 1.167 1.167 0 0 1 .34.412 1.28 1.28 0 0 1 .13.587 1.546 1.546 0 0 1-.13.658 1.127 1.127 0 0 1-.347.433 1.41 1.41 0 0 1-.518.238 2.797 2.797 0 0 1-.649.07h-.538zm4.686 3.656h1.88a2.997 2.997 0 0 0 .613-.064 1.735 1.735 0 0 0 .554-.214 1.221 1.221 0 0 0 .402-.39 1.105 1.105 0 0 0 .155-.606 1.188 1.188 0 0 0-.071-.415 1.01 1.01 0 0 0-.204-.34 1.087 1.087 0 0 0-.317-.24 1.297 1.297 0 0 0-.413-.13v-.012a1.203 1.203 0 0 0 .575-.366.962.962 0 0 0 .216-.648 1.081 1.081 0 0 0-.149-.603 1.022 1.022 0 0 0-.389-.354 1.673 1.673 0 0 0-.54-.169 4.463 4.463 0 0 0-.6-.041h-1.712zm1.011-3.734h.687a1.4 1.4 0 0 1 .24.022.748.748 0 0 1 .22.075.432.432 0 0 1 .16.147.418.418 0 0 1 .061.236.47.47 0 0 1-.055.233.433.433 0 0 1-.146.156.62.62 0 0 1-.204.084 1.058 1.058 0 0 1-.23.026h-.745zm0 1.835h.765a1.96 1.96 0 0 1 .266.02 1.015 1.015 0 0 1 .26.07.519.519 0 0 1 .204.152.406.406 0 0 1 .08.26.481.481 0 0 1-.06.253.519.519 0 0 1-.16.168.62.62 0 0 1-.217.09 1.155 1.155 0 0 1-.237.027H21.4z" />
    </svg>
  ),
  Shadcn: (props: LucideProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>shadcn/ui</title>
      <path d="M22.219 11.784 11.784 22.219c-.407.407-.407 1.068 0 1.476.407.407 1.068.407 1.476 0L23.695 13.26c.407-.408.407-1.069 0-1.476-.408-.407-1.069-.407-1.476 0ZM20.132.305.305 20.132c-.407.407-.407 1.068 0 1.476.408.407 1.069.407 1.476 0L21.608 1.781c.407-.407.407-1.068 0-1.476-.408-.407-1.069-.407-1.476 0Z" />
    </svg>
  ),
  Vercel: (props: LucideProps) => (
    <svg
      role="img"
      viewBox="0 0 24 24"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <title>Vercel</title>
      <path d="M24 22.525H0l12-21.05 12 21.05z" />
    </svg>
  ),
}

// File: components/info-tooltip.tsx
import { TooltipContentProps } from "@radix-ui/react-tooltip"
import { Info } from "lucide-react"

import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

export const InfoTooltip: React.FC<TooltipContentProps> = ({ ...props }) => (
  <TooltipProvider delayDuration={100}>
    <Tooltip>
      <TooltipTrigger>
        <Info className="size-4" />
      </TooltipTrigger>
      <TooltipContent {...props} />
    </Tooltip>
  </TooltipProvider>
)

// File: components/list-pagination.tsx
"use client"

import { usePagination } from "@/hooks"

import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination"

interface ListPaginationProps {
  currentPage: number
  totalPages: number
}

export const ListPagination: React.FC<ListPaginationProps> = ({
  currentPage,
  totalPages,
}) => {
  const { numbers, prevLink, nextLink, pageLink } = usePagination({
    currentPage,
    totalPages: totalPages > 500 ? 500 : totalPages,
  })

  return (
    <Pagination>
      <PaginationContent>
        {currentPage !== 1 && (
          <PaginationItem>
            <PaginationPrevious className="hidden md:flex" href={prevLink} />
          </PaginationItem>
        )}

        {totalPages > 1 &&
          numbers.map((number) =>
            number === "ellipsis1" || number === "ellipsis2" ? (
              <PaginationEllipsis className="hidden md:flex" key={number} />
            ) : (
              <PaginationItem key={number}>
                <PaginationLink
                  isActive={number === currentPage}
                  href={pageLink(number)}
                >
                  {number}
                </PaginationLink>
              </PaginationItem>
            )
          )}

        {currentPage !== totalPages && (
          <PaginationItem>
            <PaginationNext className="hidden md:flex" href={nextLink} />
          </PaginationItem>
        )}
      </PaginationContent>
    </Pagination>
  )
}

// File: components/list-skeleton.tsx
import { Skeleton } from "@/components/ui/skeleton"

export const ListSkeleton = () => (
  <div className="container space-y-8">
    <div className="md:mb-12 md:mt-6">
      <Skeleton className="mb-2 h-8 rounded-md md:w-40" />
      <Skeleton className="mb-2 h-4 w-1/2 rounded-md md:w-60" />
      <Skeleton className="h-4 w-2/3 rounded-md md:w-96" />
    </div>

    <div className="grid-list">
      {Array.from({ length: 20 }).map((_, i) => (
        <Skeleton key={i} className="aspect-poster w-full rounded-md" />
      ))}
    </div>
  </div>
)

// File: components/media-backdrop.tsx
import { ComponentProps } from "react"
import Image from "next/image"
import { BackdropSize, tmdbImage } from "@/tmdb/utils"

import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"

interface MediaBackdropProps extends ComponentProps<"div"> {
  image?: string
  size?: BackdropSize
  alt: string
  priority?: boolean
}

export const MediaBackdrop: React.FC<MediaBackdropProps> = ({
  image,
  size = "original",
  alt,
  className,
  priority,
  ...props
}) => {
  const src = image ? tmdbImage.backdrop(image, size) : null

  if (!src) {
    return (
      <div
        className={cn(
          "size-full rounded-md border bg-muted text-muted-foreground",
          className
        )}
        {...props}
      >
        <div className="grid size-full place-items-center">
          <Icons.Logo className="size-12" />
        </div>
      </div>
    )
  }

  return (
    <Image
      className={cn(
        "size-full rounded-md border bg-muted object-cover",
        className
      )}
      src={src}
      alt={alt}
      priority={priority}
      unoptimized
      fill
    />
  )
}

// File: components/media-card.tsx
import { ComponentProps } from "react"

import { cn } from "@/lib/utils"

const Root: React.FC<ComponentProps<"div">> = ({ className, ...props }) => {
  return <div className={cn("relative aspect-poster", className)} {...props} />
}

const Content: React.FC<ComponentProps<"div">> = ({
  className,
  children,
  ...props
}) => {
  return (
    <div className={cn("overlay", className)} {...props}>
      <div className="p-2 md:p-6">{children}</div>
    </div>
  )
}

const Title: React.FC<ComponentProps<"h2">> = ({ className, ...props }) => {
  return (
    <h2
      className={cn("line-clamp-1 text-sm font-medium md:text-lg", className)}
      {...props}
    />
  )
}

const Excerpt: React.FC<ComponentProps<"p">> = ({ className, ...props }) => {
  return (
    <p
      className={cn(
        "line-clamp-3 text-xs text-muted-foreground md:text-base",
        className
      )}
      {...props}
    />
  )
}

export const MediaCard = {
  Root,
  Content,
  Title,
  Excerpt,
}

// File: components/media-cast-card.tsx
import Link from "next/link"
import { Cast } from "@/tmdb/models"

import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"

export const MediaCastCard: React.FC<Cast> = ({
  id,
  name,
  profile_path,
  character,
}) => (
  <Link href={`/person/${id}`} prefetch={false}>
    <MediaCard.Root>
      <MediaPoster image={profile_path} alt={name} />
      <MediaCard.Content>
        <MediaCard.Title>{name}</MediaCard.Title>
        <MediaCard.Excerpt>{character}</MediaCard.Excerpt>
      </MediaCard.Content>
    </MediaCard.Root>
  </Link>
)

// File: components/media-crew-card.tsx
import Link from "next/link"
import { Crew } from "@/tmdb/models"

import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"

export const MediaCrewCard: React.FC<Crew> = ({
  id,
  name,
  profile_path,
  job,
}) => (
  <Link href={`/person/${id}`} prefetch={false}>
    <MediaCard.Root>
      <MediaPoster image={profile_path} alt={name} />
      <MediaCard.Content>
        <MediaCard.Title>{name}</MediaCard.Title>
        <MediaCard.Excerpt>{job}</MediaCard.Excerpt>
      </MediaCard.Content>
    </MediaCard.Root>
  </Link>
)

// File: components/media-detail-view.tsx
import { ComponentProps } from "react"

import { cn } from "@/lib/utils"
import { Badge, BadgeProps } from "@/components/ui/badge"
import { Skeleton } from "@/components/ui/skeleton"

const Root: React.FC<ComponentProps<"div">> = ({ className, ...props }) => {
  return <div className={cn("overflow-hidden", className)} {...props} />
}

const Backdrop: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div className={cn("container", className)} {...props}>
      <div className="md:h-hero relative hidden aspect-poster w-full md:block">
        {children}
      </div>
    </div>
  )
}

const Hero: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div
      className={cn("container md:mt-8 md:px-16 xl:mt-12 xl:px-32", className)}
      {...props}
    >
      <div className="grid gap-4 md:grid-cols-[auto,1fr] md:gap-10 xl:gap-16">
        {children}
      </div>
    </div>
  )
}

const Poster: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div
      className={cn(
        "relative aspect-poster w-full place-self-start md:-mt-32 md:block md:w-56 lg:w-64 xl:-mt-64 xl:w-80",
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

const Content: React.FC<ComponentProps<"div">> = ({ className, ...props }) => {
  return (
    <div
      className={cn(
        "container mt-4 md:mt-8 md:px-16 xl:mt-12 xl:px-32",
        className
      )}
      {...props}
    />
  )
}

const Genres: React.FC<ComponentProps<"div">> = ({ className, ...props }) => {
  return <div className={cn("flex flex-wrap gap-2", className)} {...props} />
}

const Genre: React.FC<BadgeProps> = ({ variant = "secondary", ...props }) => {
  return <Badge variant={variant} {...props} />
}

const Title: React.FC<ComponentProps<"h1">> = ({ className, ...props }) => {
  return (
    <h1
      className={cn("text-2xl font-medium xl:text-4xl", className)}
      {...props}
    />
  )
}

const Overview: React.FC<ComponentProps<"p">> = ({ className, ...props }) => {
  return (
    <div
      className={cn("space-y-4 text-muted-foreground xl:text-lg", className)}
      {...props}
    />
  )
}

export const SkeletonMediaDetail = () => (
  <MediaDetailView.Root>
    <MediaDetailView.Backdrop>
      <Skeleton className="size-full rounded-md" />
    </MediaDetailView.Backdrop>

    <MediaDetailView.Hero>
      <MediaDetailView.Poster>
        <Skeleton className="size-full rounded-md" />
      </MediaDetailView.Poster>

      <div className="space-y-4">
        <Skeleton className="h-6 w-40 rounded-md" />
        <Skeleton className="h-4 w-60 rounded-md" />
        <Skeleton className="h-4 w-full rounded-md" />
        <Skeleton className="h-4 w-full rounded-md" />
        <Skeleton className="h-4 w-full rounded-md" />
      </div>
    </MediaDetailView.Hero>

    <MediaDetailView.Content>
      <Skeleton className="mt-4 h-[30vh] w-full rounded-md" />
    </MediaDetailView.Content>
  </MediaDetailView.Root>
)

export const MediaDetailView = {
  Root,
  Backdrop,
  Hero,
  Content,
  Poster,
  Genres,
  Genre,
  Title,
  Overview,
}

// File: components/media-images.tsx
import Image from "next/image"
import { Image as TmdbImage } from "@/tmdb/models"
import { tmdbImage } from "@/tmdb/utils"
import { Expand } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog"

interface MediaImagesProps {
  posters?: TmdbImage[]
  backdrops?: TmdbImage[]
  profiles?: TmdbImage[]
  logos?: TmdbImage[]
}

export const MediaImages: React.FC<MediaImagesProps> = ({
  posters,
  backdrops,
  profiles,
  logos,
}) => {
  const images = [
    ...(posters ?? []),
    ...(backdrops ?? []),
    ...(profiles ?? []),
    ...(logos ?? []),
  ]

  if (!images.length) return <div className="empty-box">No images</div>

  return (
    <div className="grid-list items-center gap-4">
      {images.map(({ file_path, aspect_ratio }) => (
        <Dialog key={file_path}>
          <DialogTrigger>
            <div
              key={file_path}
              className={cn(
                aspect_ratio > 1
                  ? "col-span-2 aspect-video lg:col-span-3 xl:col-span-2"
                  : "aspect-poster",
                "group relative block transition"
              )}
            >
              <Image
                src={tmdbImage.url(file_path, "w780")}
                alt={file_path}
                className="size-full rounded-md border"
                unoptimized
                fill
              />

              <div className="overlay grid place-items-center opacity-0 transition group-hover:opacity-100">
                <Expand />
              </div>
            </div>
          </DialogTrigger>

          <DialogContent className={cn(aspect_ratio > 1 && "max-w-screen-xl")}>
            <div
              className={cn(
                aspect_ratio > 1 ? "aspect-video" : "aspect-poster"
              )}
            >
              <Image
                src={tmdbImage.url(file_path, "original")}
                alt={file_path}
                className="rounded-md border bg-muted"
                unoptimized
                fill
              />
            </div>
          </DialogContent>
        </Dialog>
      ))}
    </div>
  )
}

// File: components/media-mini-detail.tsx
import { ComponentProps } from "react"

import { cn } from "@/lib/utils"

const Root: React.FC<ComponentProps<"div">> = ({ className, ...props }) => {
  return <div className={cn("overflow-hidden", className)} {...props} />
}

const Backdrop: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div className={cn(className)} {...props}>
      <div className="relative h-48 w-full">{children}</div>
    </div>
  )
}

const Hero: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div className={cn("mt-4", className)} {...props}>
      <div className="grid grid-cols-[auto,1fr] gap-4 px-4 pb-4">
        {children}
      </div>
    </div>
  )
}

const Poster: React.FC<ComponentProps<"div">> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div
      className={cn(
        "relative -mt-24 aspect-poster w-32 place-self-start",
        className
      )}
      {...props}
    >
      {children}
    </div>
  )
}

const Title: React.FC<ComponentProps<"h1">> = ({ className, ...props }) => {
  return (
    <h1
      className={cn(
        "text-sm font-medium md:text-lg md:leading-tight",
        className
      )}
      {...props}
    />
  )
}

const Overview: React.FC<ComponentProps<"p">> = ({ className, ...props }) => {
  return (
    <div
      className={cn(
        "line-clamp-3 text-xs text-muted-foreground md:text-sm",
        className
      )}
      {...props}
    />
  )
}

export const MediaMiniDetail = {
  Root,
  Backdrop,
  Hero,
  Poster,
  Title,
  Overview,
}

// File: components/media-player.tsx
"use client"

import "@vidstack/react/player/styles/base.css"
import { useEffect, useRef } from "react"
import {
  MediaPlayer,
  MediaProvider,
  Poster,
  Track,
  isHLSProvider,
  type MediaCanPlayDetail,
  type MediaCanPlayEvent,
  type MediaPlayerInstance,
  type MediaProviderAdapter,
  type MediaProviderChangeEvent,
} from "@vidstack/react"

import { VideoLayout } from "./ui/layout/video-layout"

export function Player() {
  let player = useRef<MediaPlayerInstance>(null)

  useEffect(() => {
    // Subscribe to state updates.
    return player.current!.subscribe(({ paused, viewType }) => {
      // console.log('is paused?', '->', state.paused);
      // console.log('is audio view?', '->', state.viewType === 'audio');
    })
  }, [])

  function onProviderChange(
    provider: MediaProviderAdapter | null,
    nativeEvent: MediaProviderChangeEvent
  ) {
    // We can configure provider's here.
    if (isHLSProvider(provider)) {
      provider.config = {}
    }
  }

  // We can listen for the `can-play` event to be notified when the player is ready.
  function onCanPlay(
    detail: MediaCanPlayDetail,
    nativeEvent: MediaCanPlayEvent
  ) {
    // ...
  }

  return (
    <MediaPlayer
      className="aspect-video w-full overflow-hidden rounded-md bg-slate-900 font-sans text-white ring-media-focus data-[focus]:ring-4"
      title="Sprite Fight"
      src="https://files.vidstack.io/sprite-fight/720p.mp4"
      crossOrigin
      playsInline
      onProviderChange={onProviderChange}
      onCanPlay={onCanPlay}
      ref={player}
    >
      <MediaProvider>
        <Poster
          className="absolute inset-0 block size-full rounded-md object-cover opacity-0 transition-opacity data-[visible]:opacity-100"
          src="https://files.vidstack.io/sprite-fight/poster.webp"
          alt="Girl walks into campfire with gnomes surrounding her friend ready for their next meal!"
        />
        {textTracks.map((track) => (
          <Track {...track} key={track.src} />
        ))}
      </MediaProvider>

      <VideoLayout thumbnails="https://files.vidstack.io/sprite-fight/thumbnails.vtt" />
    </MediaPlayer>
  )
}
export const textTracks = [
  // Subtitles
  {
    src: "https://files.vidstack.io/sprite-fight/subs/english.vtt",
    label: "English",
    language: "en-US",
    kind: "subtitles",
    default: true,
  },
  {
    src: "https://files.vidstack.io/sprite-fight/subs/spanish.vtt",
    label: "Spanish",
    language: "es-ES",
    kind: "subtitles",
  },
  // Chapters
  {
    src: "https://files.vidstack.io/sprite-fight/chapters.vtt",
    kind: "chapters",
    language: "en-US",
    default: true,
  },
] as const

// File: components/media-poster.tsx
import { ComponentProps } from "react"
import Image from "next/image"
import { PosterSize, tmdbImage } from "@/tmdb/utils"

import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"

interface MediaPosterProps extends ComponentProps<"div"> {
  image?: string
  size?: PosterSize
  alt: string
  priority?: boolean
}

export const MediaPoster: React.FC<MediaPosterProps> = ({
  image,
  size = "w500",
  alt,
  className,
  priority,
  ...props
}) => {
  const src = image ? tmdbImage.poster(image, size) : null

  if (!src) {
    return (
      <div
        className={cn(
          "size-full rounded-md border bg-muted text-muted-foreground",
          className
        )}
        {...props}
      >
        <div className="grid size-full place-items-center">
          <Icons.Logo className="size-12" />
        </div>
      </div>
    )
  }

  return (
    <Image
      className={cn(
        "size-full rounded-md border bg-muted object-cover",
        className
      )}
      src={src}
      alt={alt}
      priority={priority}
      unoptimized
      fill
    />
  )
}

// File: components/media-rating.tsx
import { User } from "lucide-react"

import { cn } from "@/lib/utils"

import { Badge, BadgeProps } from "./ui/badge"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./ui/tooltip"

interface MediaRatingProps extends BadgeProps {
  average: number
  count?: number
}

export const MediaRating: React.FC<MediaRatingProps> = ({
  average,
  count,
  className,
  ...props
}) => {
  return (
    <TooltipProvider>
      <Tooltip>
        <TooltipTrigger>
          <Badge
            className={cn("flex items-center gap-1", className)}
            {...props}
          >
            {average ? average.toFixed(1) : "N/A"}
          </Badge>
        </TooltipTrigger>

        {!!count && (
          <TooltipContent className="flex items-center gap-1 bg-foreground text-xs text-background">
            <User className="size-3" /> {count}
          </TooltipContent>
        )}
      </Tooltip>
    </TooltipProvider>
  )
}

// File: components/media-trailer-dialog.tsx
import { Video } from "@/tmdb/models"
import { yt } from "@/tmdb/utils"
import { Play } from "lucide-react"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog"

interface MediaTrailerDialogProps {
  videos: Video[]
}

export const MediaTrailerDialog: React.FC<MediaTrailerDialogProps> = ({
  videos,
}) => {
  const trailer = videos?.find((video) => video.type === "Trailer")

  return (
    <Dialog modal>
      <DialogTrigger className={cn(buttonVariants())} disabled={!trailer}>
        <Play className="mr-2 size-4" /> Watch Trailer
      </DialogTrigger>

      {trailer && (
        <DialogContent className="max-w-screen-lg">
          <iframe
            className="aspect-square size-full rounded-md sm:aspect-video"
            src={yt.video(trailer.key, true)}
            allow="autoplay; encrypted-media"
            allowFullScreen={true}
          />
        </DialogContent>
      )}
    </Dialog>
  )
}

// File: components/media-watch-providers.tsx
import { cookies } from "next/headers"
import { tmdb } from "@/tmdb/api"
import { WatchLocale } from "@/tmdb/models"

import { getCountryName } from "@/lib/utils"
import { InfoTooltip } from "@/components/info-tooltip"
import { ProviderTable } from "@/components/provider-table"

interface MediaWatchProvidersProps {
  id: string
  type: "movie" | "tv"
}

export const MediaWatchProviders: React.FC<MediaWatchProvidersProps> = async ({
  id,
  type,
}) => {
  const { results } = await tmdb[type].providers({ id })

  const region = (cookies().get("region")?.value ?? "US") as keyof WatchLocale
  const country = getCountryName(region)

  return (
    <div className="space-y-6 rounded-md border p-6">
      <div>
        <h2 className="flex items-center gap-2 text-lg font-medium">
          Where to Watch
          <InfoTooltip className="w-60">
            Currently showing providers for{" "}
            <span className="underline">{country}</span> You can change your
            preferred region in the settings
          </InfoTooltip>
        </h2>
        <p className="text-muted-foreground">
          Stream, buy or rent this {type === "tv" ? "tv show" : "movie"} from
          the providers below.
        </p>
      </div>

      <div className="space-y-6">
        <div className="grid gap-4 lg:grid-cols-3">
          <ProviderTable
            title="Stream"
            providers={results?.[region]?.flatrate}
          />
          <ProviderTable title="Buy" providers={results?.[region]?.buy} />
          <ProviderTable title="Rent" providers={results?.[region]?.rent} />
        </div>
      </div>
    </div>
  )
}

// File: components/movie-card.tsx
import React from "react"
import Link from "next/link"
import { Movie } from "@/tmdb/models"
import { format } from "@/tmdb/utils"

import { formatValue } from "@/lib/utils"
import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"

export const MovieCard: React.FC<Movie> = ({
  id,
  poster_path,
  title,
  vote_average,
  vote_count,
  release_date,
}) => {
  return (
    <Link href={`/movie/${id}`} key={id} prefetch={false}>
      <MediaCard.Root>
        <MediaPoster image={poster_path} alt={title} />
        <MediaCard.Content>
          <MediaRating
            average={vote_average}
            count={vote_count}
            className="mb-2"
          />
          <MediaCard.Title>{title}</MediaCard.Title>
          <MediaCard.Excerpt>
            {formatValue(release_date, format.year)}
          </MediaCard.Excerpt>
        </MediaCard.Content>
      </MediaCard.Root>
    </Link>
  )
}

// File: components/movie-collection-dialog.tsx
"use client"

import Link from "next/link"
import { useDialog } from "@/hooks"
import { DetailedCollection } from "@/tmdb/models"

import { sortByReleaseDate } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"
import { MediaBackdrop } from "@/components/media-backdrop"
import { MediaMiniDetail } from "@/components/media-mini-detail"
import { MediaPoster } from "@/components/media-poster"

interface MovieCollectionDialogProps {
  collection: DetailedCollection
}

export const MovieCollectionDialog: React.FC<MovieCollectionDialogProps> = ({
  collection: { name, overview, parts },
}) => {
  const [open, setOpen] = useDialog()

  return (
    <Dialog open={open} onOpenChange={setOpen} modal>
      <DialogTrigger className={buttonVariants()}>
        View The Collection
      </DialogTrigger>

      <DialogContent
        onOpenAutoFocus={(e) => e.preventDefault()}
        className="max-w-screen-lg"
      >
        <DialogHeader>
          <DialogTitle>{name}</DialogTitle>
          <DialogDescription className="hidden text-muted-foreground md:block">
            {overview}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[80dvh] md:pr-4">
          <div className="grid gap-4 md:grid-cols-2">
            {sortByReleaseDate(parts).map((part) => (
              <Link href={`/movie/${part.id}`} key={part.id}>
                <MediaMiniDetail.Root className="rounded-md border">
                  <MediaMiniDetail.Backdrop>
                    <MediaBackdrop
                      image={part.backdrop_path}
                      alt={part.title}
                      className="rounded-b-none"
                      size="w780"
                    />
                  </MediaMiniDetail.Backdrop>

                  <MediaMiniDetail.Hero>
                    <MediaMiniDetail.Poster>
                      <MediaPoster image={part.poster_path} alt={part.title} />
                    </MediaMiniDetail.Poster>

                    <div className="space-y-1">
                      <MediaMiniDetail.Title>
                        {part.title}
                      </MediaMiniDetail.Title>
                      <MediaMiniDetail.Overview>
                        {part.overview}
                      </MediaMiniDetail.Overview>
                    </div>
                  </MediaMiniDetail.Hero>
                </MediaMiniDetail.Root>
              </Link>
            ))}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  )
}

// File: components/movie-collection.tsx
import { tmdb } from "@/tmdb/api"

import { MediaBackdrop } from "@/components/media-backdrop"
import { MovieCollectionDialog } from "@/components/movie-collection-dialog"

interface MovieCollectionProps {
  id: number
}

export const MovieCollection: React.FC<MovieCollectionProps> = async ({
  id,
}) => {
  const collection = await tmdb.collection.details({
    id,
  })

  return (
    <div className="h-hero relative w-full">
      <MediaBackdrop image={collection.backdrop_path} alt={collection.name} />
      <div className="overlay">
        <div className="p-4 md:p-10">
          <p className="line-clamp-3 text-xs text-muted-foreground md:text-lg">
            Part of
          </p>
          <h2 className="line-clamp-1 text-lg font-medium md:text-2xl">
            {collection.name}
          </h2>
          <p className="mb-4 line-clamp-1 max-w-2xl text-muted-foreground">
            Includes: {collection.parts.map((part) => part.title).join(", ")}
          </p>
          <MovieCollectionDialog collection={collection} />
        </div>
      </div>
    </div>
  )
}

// File: components/movie-hero.tsx
"use client"

import { useEffect, useState } from "react"
import Link from "next/link"
import { Movie } from "@/tmdb/models"
import { ArrowRight } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { buttonVariants } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { MediaBackdrop } from "@/components/media-backdrop"

interface MovieHeroProps {
  movie: Movie
  label: string
  count?: number
}

export const MovieHero: React.FC<MovieHeroProps> = ({
  movie,
  label,
  count = 1,
}) => {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) return <Skeleton className="h-hero relative w-full" />
  return (
    <div className="h-hero relative" key={movie.id}>
      <MediaBackdrop image={movie.backdrop_path} alt={movie.title} />

      <div className="overlay">
        <div className="mx-auto max-w-3xl space-y-4 p-4 pb-8 text-center md:p-14">
          <Badge className="select-none">{label}</Badge>

          <h1 className="line-clamp-2 text-xl font-medium leading-tight tracking-tighter md:text-4xl">
            {movie.title}
          </h1>
          <p className="line-clamp-3 text-sm text-muted-foreground md:text-lg">
            {movie.overview}
          </p>

          <div className="flex flex-col items-center justify-center gap-4 md:flex-row">
            <Link
              href={`/movie/${movie.id}`}
              className={buttonVariants({
                size: "lg",
                variant: "default",
              })}
            >
              Details <ArrowRight className="ml-2 size-4" />
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}

// File: components/movie-list.tsx
import { cookies } from "next/headers"
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"
import { MovieListType } from "@/tmdb/api/types"

import { ListPagination } from "@/components/list-pagination"
import { MovieCard } from "@/components/movie-card"

interface MovieListProps {
  list: MovieListType
  page: string
  title?: string
  description?: string
}

export const MovieList: React.FC<MovieListProps> = async ({
  list,
  page,
  title,
  description,
}) => {
  const region = cookies().get("region")?.value ?? "US"

  const {
    results,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.movie.list({
    region,
    list,
    page,
  })

  if (!results?.length) {
    return notFound()
  }

  return (
    <div className="container space-y-8">
      <div className="md:mb-12 md:mt-6">
        <h1 className="mb-2 text-2xl font-medium">{title}</h1>
        <p className="max-w-3xl text-muted-foreground">{description}</p>
      </div>

      <div className="grid-list">
        {results.map((movie) => (
          <MovieCard key={movie.id} {...movie} />
        ))}
      </div>

      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: components/person-card.tsx
import React from "react"
import Link from "next/link"
import { Person } from "@/tmdb/models"

import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"

export const PersonCard: React.FC<Person> = ({
  id,
  name,
  profile_path,
  known_for_department,
}) => {
  return (
    <Link href={`/person/${id}`} key={id} className="w-full" prefetch={false}>
      <MediaCard.Root>
        <MediaPoster image={profile_path} alt={name} />
        <MediaCard.Content>
          <MediaCard.Title className="mt-2">{name}</MediaCard.Title>

          <MediaCard.Excerpt>
            Known for {known_for_department}
          </MediaCard.Excerpt>
        </MediaCard.Content>
      </MediaCard.Root>
    </Link>
  )
}

// File: components/person-credits-table.tsx
"use client"

import React, { useMemo } from "react"
import Link from "next/link"
import {
  RawCombinedCredit,
  RawMovieCredit,
  RawTvShowCredit,
} from "@/tmdb/models"
import { format } from "@/tmdb/utils"
import { Clapperboard, Tv } from "lucide-react"

import { pluralize } from "@/lib/utils"
import {
  Command,
  CommandEmpty,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"

interface PersonCreditsTableProps {
  credits: RawCombinedCredit[]
  department: string
}

export const PersonCreditsTable: React.FC<PersonCreditsTableProps> = ({
  credits,
  department,
}) => {
  const [value, setValue] = React.useState<string>("all")

  const sort = (a: RawCombinedCredit, b: RawCombinedCredit) => {
    const aDate = new Date(
      a.media_type === "tv" ? a.first_air_date : a.release_date
    )
    const bDate = new Date(
      b.media_type === "tv" ? b.first_air_date : b.release_date
    )
    return bDate.getTime() - aDate.getTime()
  }

  const filter = (credit: RawCombinedCredit) => {
    return value === "all" || credit.media_type === value
  }

  const sortedList = useMemo(() => credits.sort(sort), [credits])

  return (
    <Command>
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <h2 className="text-lg font-medium">{department}</h2>

          <div className="flex items-center gap-4">
            <div className="rounded-md border-x border-t">
              <CommandInput className="h-10 w-40" placeholder="Search..." />
            </div>

            <Select value={value} onValueChange={setValue}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All</SelectItem>
                <SelectItem value="movie">Movie</SelectItem>
                <SelectItem value="tv">TV Shows</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <CommandList className="max-h-full">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-12"></TableHead>
                <TableHead className="w-24">Year</TableHead>
                <TableHead className="w-full">Details</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              <CommandEmpty asChild>
                <TableRow>
                  <TableCell colSpan={3} className="text-center">
                    No result for search criteria
                  </TableCell>
                </TableRow>
              </CommandEmpty>

              {sortedList.filter(filter)?.map((credit) =>
                credit.media_type === "tv" ? (
                  <CommandItem
                    key={credit.credit_id}
                    value={credit.name}
                    asChild
                  >
                    <CreditsTableTvItem {...credit} />
                  </CommandItem>
                ) : (
                  <CommandItem
                    key={credit.credit_id}
                    value={credit.title}
                    asChild
                  >
                    <CreditsTableMovieItem {...credit} />
                  </CommandItem>
                )
              )}
            </TableBody>
          </Table>
        </CommandList>
      </div>
    </Command>
  )
}

const CreditsTableMovieItem = React.forwardRef<
  HTMLTableRowElement,
  RawMovieCredit
>(({ id, release_date, title, character, job }, ref) => (
  <TableRow ref={ref}>
    <TableCell className="text-center font-medium">
      <Clapperboard className="inline-block size-4" />
    </TableCell>
    <TableCell>{release_date ? format.year(release_date) : "-"}</TableCell>
    <TableCell>
      <Link className="font-medium" href={`/movie/${id}`}>
        {title}
      </Link>
      {(character || job) && (
        <p className="text-muted-foreground">as {character || job}</p>
      )}
    </TableCell>
  </TableRow>
))
CreditsTableMovieItem.displayName = "CreditsTableMovieItem"

const CreditsTableTvItem = React.forwardRef<
  HTMLTableRowElement,
  RawTvShowCredit
>(({ id, first_air_date, name, episode_count, character, job }, ref) => (
  <TableRow ref={ref}>
    <TableCell className="text-center font-medium">
      <Tv className="inline-block size-4" />
    </TableCell>
    <TableCell>{first_air_date ? format.year(first_air_date) : "-"}</TableCell>
    <TableCell>
      <Link className="font-medium" href={`/tv/${id}`}>
        {name}
      </Link>
      <p className="text-muted-foreground">
        {episode_count > 0 && (
          <span>
            {episode_count} {pluralize(episode_count, "episode", "episodes")}
          </span>
        )}
        {(character || job) && ` as ${character || job}`}
      </p>
    </TableCell>
  </TableRow>
))
CreditsTableTvItem.displayName = "CreditsTableTvItem"

// File: components/person-list.tsx
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"
import { PersonListType } from "@/tmdb/api/types"

import { ListPagination } from "@/components/list-pagination"
import { PersonCard } from "@/components/person-card"

interface PersonListProps {
  list: PersonListType
  page: string
  title?: string
  description?: string
}

export const PersonList: React.FC<PersonListProps> = async ({
  list,
  page,
  title,
  description,
}) => {
  const {
    results: people,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.person.list({
    list,
    page,
  })

  if (!people?.length) {
    return notFound()
  }

  return (
    <div className="container space-y-8">
      <div className="md:mb-24 md:mt-12">
        <h1 className="mb-2 text-2xl font-medium">{title}</h1>
        <p className="max-w-3xl text-muted-foreground">{description}</p>
      </div>

      <div className="grid-list">
        {people.map((movie) => (
          <PersonCard key={movie.id} {...movie} />
        ))}
      </div>

      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: components/provider-logo.tsx
import { ComponentProps } from "react"
import Image from "next/image"
import { LogoSize, tmdbImage } from "@/tmdb/utils"

import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"

interface ProviderLogoProps extends ComponentProps<"div"> {
  image?: string
  size?: LogoSize
  alt: string
  priority?: boolean
}

export const ProviderLogo: React.FC<ProviderLogoProps> = ({
  image,
  size = "w154",
  alt,
  className,
  priority,
  ...props
}) => {
  const src = image ? tmdbImage.logo(image, size) : null

  if (!src) {
    return (
      <div
        className={cn("size-full bg-muted text-muted-foreground", className)}
        {...props}
      >
        <div className="grid size-full place-items-center">
          <Icons.Logo className="size-6" />
        </div>
      </div>
    )
  }

  return (
    <Image
      className={cn("size-full bg-muted object-cover", className)}
      src={src}
      alt={alt}
      priority={priority}
      unoptimized
      fill
    />
  )
}

// File: components/provider-table.tsx
import React from "react"
import { Buy, Flatrate, Rent } from "@/tmdb/models"

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table"
import { ProviderLogo } from "@/components/provider-logo"

interface ProviderTableProps {
  title: "Stream" | "Buy" | "Rent"
  providers: (Flatrate | Buy | Rent)[]
}

export const ProviderTable: React.FC<ProviderTableProps> = ({
  title,
  providers,
}) => {
  return (
    <Table>
      <TableHeader className="select-none">
        <TableRow>
          <TableHead colSpan={2}>{title}</TableHead>
        </TableRow>
      </TableHeader>

      <TableBody>
        {providers?.map((provider) => (
          <TableRow key={provider.provider_id} className="select-none">
            <TableCell className="w-8 p-0 pl-4">
              <div className="relative aspect-square w-8">
                <ProviderLogo
                  image={provider.logo_path}
                  alt={provider.provider_name}
                  className="rounded-md border"
                />
              </div>
            </TableCell>
            <TableCell>{provider.provider_name}</TableCell>
          </TableRow>
        ))}

        {!providers?.length && (
          <TableRow className="select-none">
            <TableCell colSpan={2} className="text-muted-foreground">
              Not available
            </TableCell>
          </TableRow>
        )}
      </TableBody>
    </Table>
  )
}

// File: components/region-select.tsx
"use client"

import { regions } from "@/lib"
import { SelectProps } from "@radix-ui/react-select"
import ReactCountryFlag from "react-country-flag"

import { getCountryName } from "@/lib/utils"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { useToast } from "@/components/ui/use-toast"
import { setRegion } from "@/app/actions"

export const RegionSelect: React.FC<SelectProps> = ({
  onValueChange,
  ...props
}) => {
  const { toast } = useToast()

  const handleChange = (value: string) => {
    setRegion(value)
    onValueChange?.(value)

    setTimeout(() => {
      toast({
        title: "Region changed successfully",
        description: `You have successfully changed your region to ${getCountryName(
          value
        )}`,
      })
    }, 500)
  }

  return (
    <Select onValueChange={handleChange} {...props}>
      <SelectTrigger>
        <SelectValue />
      </SelectTrigger>

      <SelectContent>
        {regions.map((region) => (
          <SelectItem key={region.iso_3166_1} value={region.iso_3166_1}>
            <div className="flex items-center gap-2">
              <ReactCountryFlag countryCode={region.iso_3166_1} svg />
              {region.english_name}
            </div>
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  )
}

// File: components/scroll-top.tsx
"use client"

import { useEffect, useState } from "react"
import { ChevronUpIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button, ButtonProps } from "@/components/ui/button"

export const ScrollTop: React.FC<ButtonProps> = ({
  variant = "outline",
  size = "icon",
  className,
  ...props
}) => {
  const [show, setShow] = useState(false)

  useEffect(() => {
    const handleScroll = () => {
      setShow(window.scrollY > 100)
    }

    window.addEventListener("scroll", handleScroll)

    return () => {
      window.removeEventListener("scroll", handleScroll)
    }
  }, [])

  const handleClick = () => {
    window.scrollTo({ top: 0, behavior: "smooth" })
  }

  return (
    <Button
      onClick={handleClick}
      size={size}
      variant={variant}
      className={cn(
        "fixed bottom-4 right-4 bg-background transition",
        show ? "opacity-100" : "opacity-0",
        className
      )}
      {...props}
    >
      <ChevronUpIcon className="size-4" />
      <span className="sr-only">Scroll to top</span>
    </Button>
  )
}

// File: components/search-input.tsx
"use client"

import { useSearch } from "@/hooks"
import { Search, XIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input, InputProps } from "@/components/ui/input"

interface SearchInputProps extends InputProps {
  auto?: boolean
}

export const SearchInput: React.FC<SearchInputProps> = ({
  auto = true,
  value,
  className,
  onChange,
  onKeyDown,
  name = "q",
  type = "text",
  placeholder = "Search...",
}) => {
  const { term, handleChange, handleKeyDown, clearSearch } = useSearch(auto)

  return (
    <div className="relative flex items-center">
      <Search className="absolute left-4 size-4 text-muted-foreground" />
      <Input
        name={name}
        type={type}
        value={value ?? term}
        onChange={onChange ?? handleChange}
        onKeyDown={onKeyDown ?? handleKeyDown}
        placeholder={placeholder}
        className={cn("px-10 text-base", className)}
      />
      {(term || value) && (
        <Button
          size="icon"
          variant="ghost"
          className="absolute right-0"
          onClick={clearSearch}
        >
          <XIcon className="size-3" />
        </Button>
      )}
    </div>
  )
}

// File: components/search-result-card.tsx
import Link from "next/link"
import {
  MovieWithMediaType,
  PersonWithMediaType,
  TvShowWithMediaType,
} from "@/tmdb/models"
import { format } from "@/tmdb/utils"

import { Badge } from "@/components/ui/badge"
import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"

interface SearchResultCardProps {
  media: MovieWithMediaType | TvShowWithMediaType | PersonWithMediaType
}

export const SearchResultCard: React.FC<SearchResultCardProps> = ({
  media,
}) => {
  const { media_type, id } = media

  const isPerson = media_type === "person"
  const isMovie = media_type === "movie"

  return (
    <Link href={`/${media_type}/${id}`} prefetch={false}>
      <MediaCard.Root>
        <MediaPoster
          image={isPerson ? media.profile_path : media.poster_path}
          alt={isMovie ? media.title : media.name}
        />
        <MediaCard.Content>
          {!isPerson && (
            <MediaRating
              average={media.vote_average}
              count={media.vote_count}
              className="mr-2"
            />
          )}
          <Badge className="border-foreground capitalize" variant="outline">
            {media.media_type === "tv" ? "TV Show" : media.media_type}
          </Badge>

          <MediaCard.Title className="mt-2">
            {isMovie ? media.title : media.name}
          </MediaCard.Title>

          <MediaCard.Excerpt>
            {isPerson
              ? `Known for ${media.known_for_department}`
              : format.year(
                  isMovie ? media.release_date : media.first_air_date
                )}
          </MediaCard.Excerpt>
        </MediaCard.Content>
      </MediaCard.Root>
    </Link>
  )
}

// File: components/site-footer.tsx
import { ComponentProps } from "react"
import Link from "next/link"
import { navigation } from "@/config"

export const SiteFooter: React.FC<ComponentProps<"footer">> = () => {
  const year = new Date().getFullYear()

  return (
    <footer className="relative mt-12 border-t bg-background">
      <div className="container flex flex-col lg:flex-row">
        <div className="px-2 py-8 pt-12 text-muted-foreground md:p-12">
          <Link
            href="/"
            className="rounded-lg bg-blue-400 p-1 text-2xl font-bold text-white"
          >
            King
          </Link>
        </div>
        <div className="flex-1 p-12 px-2 py-8 md:p-12">
          <div className="mb-24 md:flex">
            {navigation.items.slice(1, navigation.items.length).map((item) => (
              <ul className="flex-1" key={item.title}>
                <p className="mb-4 text-muted-foreground">{item.title}</p>
                {item.items?.map((subitem) => (
                  <li className="mb-2 text-sm" key={subitem.href}>
                    <Link href={subitem.href} prefetch={false}>
                      {subitem.title}
                    </Link>
                  </li>
                ))}
              </ul>
            ))}
          </div>
        </div>
      </div>
    </footer>
  )
}

// File: components/site-header.tsx
import { Suspense } from "react"
import Link from "next/link"

import { Skeleton } from "@/components/ui/skeleton"
import { SearchInput } from "@/components/search-input"
import { SiteMenu } from "@/components/site-menu"
import { SiteNav } from "@/components/site-nav"
import { SiteSettings } from "@/components/site-settings"

import { Icons } from "./icons"

export const SiteHeader = () => {
  return (
    <header className="sticky top-0 z-40 w-full border-b bg-background">
      <div className="container flex h-14 items-center space-x-4 sm:justify-between sm:space-x-0">
        <div className="lg:hidden">
          <SiteMenu />
        </div>
        <SiteNav />

        <div className="flex flex-1 justify-end gap-4">
          <Suspense fallback={<Skeleton className="h-10 w-60" />}>
            <SearchInput />
          </Suspense>

          <SiteSettings />
          <Link href={`/loading`} className="relative aspect-square">
            <div className="grid size-full place-items-center">
              <Icons.Profile className="size-6" />
            </div>
          </Link>
        </div>
      </div>
    </header>
  )
}

// File: components/site-menu.tsx
"use client"

import Link from "next/link"
import { NavItem, navigation } from "@/config"
import { useDialog } from "@/hooks"
import { MenuIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion"
import { Button, buttonVariants } from "@/components/ui/button"
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/ui/drawer"
import { Separator } from "@/components/ui/separator"

export const SiteMenu = () => {
  const [open, setOpen] = useDialog()

  return (
    <Drawer open={open} onOpenChange={setOpen} shouldScaleBackground={false}>
      <DrawerTrigger asChild>
        <Button size="icon" variant="outline">
          <MenuIcon className="size-4" />
        </Button>
      </DrawerTrigger>

      <DrawerContent>
        <DrawerHeader>
          <DrawerTitle>Menu</DrawerTitle>
        </DrawerHeader>

        <Accordion type="multiple" className="px-2">
          {navigation.items.map((item) =>
            item.items ? (
              <MultipleMenuItem key={item.title} {...item} />
            ) : (
              <MenuItem key={item.title} {...item} />
            )
          )}
        </Accordion>

        <Separator className="mt-4" />
      </DrawerContent>
    </Drawer>
  )
}

const MenuItem = ({ title, href, icon: Icon }: NavItem) => {
  return (
    <Link
      href={href}
      className={cn(
        buttonVariants({ variant: "ghost" }),
        "w-full justify-between hover:no-underline"
      )}
    >
      <div className={cn("flex items-center justify-start")}>
        <Icon className="mr-2 size-4" />
        {title}
      </div>
    </Link>
  )
}

const MultipleMenuItem = ({ title, items, icon: Icon }: NavItem) => {
  return (
    <AccordionItem className="border-b-0" value={title}>
      <AccordionTrigger
        className={cn(
          buttonVariants({ variant: "ghost" }),
          "w-full justify-between hover:no-underline"
        )}
      >
        <div className={cn("flex items-center justify-start")}>
          <Icon className="mr-2 size-4" />
          {title}
        </div>
      </AccordionTrigger>
      <AccordionContent className="pl-4">
        {items?.map((item) => (
          <MenuItem key={item.title} {...item} />
        ))}
      </AccordionContent>
    </AccordionItem>
  )
}

// File: components/site-nav.tsx
"use client"

import Link from "next/link"
import { NavItem, navigation } from "@/config"
import { useActiveNav } from "@/hooks"

import { cn } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  navigationMenuTriggerStyle,
} from "@/components/ui/navigation-menu"

const SiteNav = () => {
  return (
    <div className="flex items-center">
      <Link
        href="/"
        className="rounded-lg bg-blue-400 p-1 text-2xl font-bold text-white"
      >
        King
      </Link>

      <NavigationMenu className="ml-4 hidden lg:flex">
        <NavigationMenuList>
          {navigation.items.map((item) =>
            item.items ? (
              <SiteNavItem key={item.title} {...item} />
            ) : (
              <SiteNavItemSingle key={item.title} {...item} />
            )
          )}
        </NavigationMenuList>
      </NavigationMenu>
    </div>
  )
}

const SiteNavItem = ({ title, icon, items, href, description }: NavItem) => {
  const isActive = useActiveNav(href)
  const Icon = icon

  return (
    <NavigationMenuItem>
      <NavigationMenuTrigger className={cn(isActive && "bg-accent", "gap-2")}>
        <Icon className="size-4" /> {title}
      </NavigationMenuTrigger>
      <NavigationMenuContent>
        <div className="p-6 pb-0">
          <Icon className="mr-1 inline size-4" /> {title}
          <p className="mt-2 text-sm">{description}</p>
        </div>
        <div className="grid w-[650px] grid-cols-2 p-4">
          {items?.map((item) => (
            <SiteNavListItem key={item.title} {...item} />
          ))}
        </div>
      </NavigationMenuContent>
    </NavigationMenuItem>
  )
}

const SiteNavItemSingle = ({ title, icon, href }: NavItem) => {
  const isActive = useActiveNav(href)
  const Icon = icon

  return (
    <NavigationMenuItem>
      <Link href={href} legacyBehavior passHref>
        <NavigationMenuLink
          className={cn(
            navigationMenuTriggerStyle(),
            isActive && "bg-accent",
            "gap-2"
          )}
        >
          <Icon className="size-4" /> {title}
        </NavigationMenuLink>
      </Link>
    </NavigationMenuItem>
  )
}

const SiteNavListItem = ({ title, icon, description, href }: NavItem) => {
  const Icon = icon

  return (
    <NavigationMenuLink asChild>
      <Link
        href={href}
        className="select-none space-y-2 rounded-md p-3 hover:bg-accent"
      >
        <div className="text-sm font-medium leading-none">
          <Icon className="mr-1 inline size-3" /> {title}
          {title === "Discover" && (
            <Badge className="ml-2 px-1 py-0 text-[9px] leading-normal tracking-wide">
              NEW
            </Badge>
          )}
        </div>
        <p className="line-clamp-2 text-sm leading-snug text-muted-foreground">
          {description}
        </p>
      </Link>
    </NavigationMenuLink>
  )
}

export { SiteNav }

// File: components/site-settings.tsx
import { cookies } from "next/headers"
import { SettingsIcon } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover"
import { RegionSelect } from "@/components/region-select"
import { ThemeToggle } from "@/components/theme-toggle"

export const SiteSettings = async () => {
  const region = cookies().get("region")?.value ?? "US"

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="icon" className="shrink-0">
          <SettingsIcon className="size-4" />
          <span className="sr-only">Settings</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent className="space-y-4" align="end">
        <div>
          <h5>Settings</h5>

          <div className="mt-2 space-y-2">
            <Label className="text-xs text-muted-foreground">Region</Label>
            <RegionSelect value={region} />
          </div>

          <div className="mt-4 space-y-2">
            <Label className="text-xs text-muted-foreground">Theme</Label>
            <ThemeToggle />
          </div>
        </div>
      </PopoverContent>
    </Popover>
  )
}

// File: components/tailwind-indicator.tsx
export function TailwindIndicator() {
  if (process.env.NODE_ENV === "production") return null

  return (
    <div className="fixed bottom-1 left-1 z-50 rounded-md border bg-background px-2 py-1 font-mono text-xs">
      <div className="block sm:hidden">xs</div>
      <div className="hidden sm:block md:hidden">sm</div>
      <div className="hidden md:block lg:hidden">md</div>
      <div className="hidden lg:block xl:hidden">lg</div>
      <div className="hidden xl:block 2xl:hidden">xl</div>
      <div className="hidden 2xl:block">2xl</div>
    </div>
  )
}

// File: components/theme-provider.tsx
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

// File: components/theme-toggle.tsx
"use client"

import * as React from "react"
import { MonitorCog, Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"

export function ThemeToggle() {
  const { setTheme, theme, themes } = useTheme()
  const { toast } = useToast()

  const iconProps = {
    className: "size-4 mr-2",
  }

  function handleClick(value: string) {
    setTheme(value)
    toast({
      title: "Theme changed successfully",
      description: `You have
        successfully changed the theme to ${value}`,
    })
  }

  return (
    <div className="flex flex-col gap-2">
      {themes.map((value) => (
        <Button
          key={value}
          variant={theme === value ? "default" : "outline"}
          onClick={() => handleClick(value)}
        >
          {value === "light" && <Sun {...iconProps} />}
          {value === "dark" && <Moon {...iconProps} />}
          {value === "system" && <MonitorCog {...iconProps} />}

          <span className="capitalize">{value}</span>
        </Button>
      ))}
    </div>
  )
}

// File: components/trend-carousel.tsx
"use client"

import React, { useEffect, useState } from "react"
import Link from "next/link"
import {
  MovieWithMediaType,
  PersonWithMediaType,
  TvShowWithMediaType,
} from "@/tmdb/models"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button, buttonVariants } from "@/components/ui/button"
import {
  Carousel,
  CarouselApi,
  CarouselContent,
  CarouselItem,
} from "@/components/ui/carousel"
import { MovieCard } from "@/components/movie-card"
import { PersonCard } from "@/components/person-card"
import { TvCard } from "@/components/tv-card"

interface TrendCarouselProps {
  title?: string
  link?: string
  items: MovieWithMediaType[] | TvShowWithMediaType[] | PersonWithMediaType[]
  type: "movie" | "tv" | "person"
}

export const TrendCarousel: React.FC<TrendCarouselProps> = ({
  title,
  link,
  items,
}) => {
  const [api, setApi] = useState<CarouselApi>()
  const [total, setTotal] = useState(0)
  const [current, setCurrent] = useState(0)

  useEffect(() => {
    if (!api) return

    setTotal(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on("select", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  function nextSlide() {
    api?.scrollNext()
  }

  function previousSlide() {
    api?.scrollPrev()
  }

  return (
    <Carousel opts={{ dragFree: true }} setApi={setApi}>
      <div className="mb-4 flex items-center justify-between gap-4 md:justify-start">
        <h2 className="font-medium md:text-lg">{title}</h2>

        {link && (
          <Link
            href={link}
            className={cn(buttonVariants({ size: "sm", variant: "outline" }))}
            prefetch={false}
          >
            Explore more
          </Link>
        )}

        <div className="ml-auto hidden items-center gap-2 md:flex">
          <p className="mr-4 text-xs text-muted-foreground">
            <span className="font-bold text-foreground">{current}</span>
            <span> / </span>
            <span>{total}</span>
          </p>

          <Button onClick={previousSlide} size="sm" variant="outline">
            <ArrowLeft className="size-3" />
            <span className="sr-only">Previous</span>
          </Button>
          <Button onClick={nextSlide} size="sm" variant="outline">
            <ArrowRight className="size-3" />
            <span className="sr-only">Next</span>
          </Button>
        </div>
      </div>

      <CarouselContent>
        {items.map((item) => (
          <CarouselItem
            key={item.id}
            className="basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
          >
            {item.media_type === "tv" ? (
              <TvCard key={item.id} {...item} />
            ) : item.media_type === "person" ? (
              <PersonCard key={item.id} {...item} />
            ) : (
              <MovieCard key={item.id} {...item} />
            )}
          </CarouselItem>
        ))}
      </CarouselContent>
    </Carousel>
  )
}

// File: components/trend-list.tsx
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { MovieCard } from "@/components/movie-card"
import { PersonCard } from "@/components/person-card"
import { TvCard } from "@/components/tv-card"

interface TrendListProps {
  type: "movie" | "tv" | "people"
  time: "day" | "week"
  page: string
  title?: string
  description?: string
}

export const TrendList: React.FC<TrendListProps> = async ({
  type,
  time,
  page,
  title,
  description,
}) => {
  const {
    results: trends,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.trending[type]({
    time,
    page,
  })

  if (!trends?.length) {
    return notFound()
  }

  return (
    <div className="container space-y-8">
      <div className="md:mb-12 md:mt-6">
        <h1 className="mb-2 text-2xl font-medium">{title}</h1>
        <p className="max-w-3xl text-muted-foreground">{description}</p>
      </div>

      <div className="grid-list">
        {trends.map((item) =>
          item.media_type === "tv" ? (
            <TvCard key={item.id} {...item} />
          ) : item.media_type === "person" ? (
            <PersonCard key={item.id} {...item} />
          ) : (
            <MovieCard key={item.id} {...item} />
          )
        )}
      </div>

      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: components/tv-card.tsx
import React from "react"
import Link from "next/link"
import { TvShow } from "@/tmdb/models"
import { format } from "@/tmdb/utils"

import { formatValue } from "@/lib/utils"
import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"

export const TvCard: React.FC<TvShow> = ({
  id,
  poster_path,
  name,
  vote_average,
  vote_count,
  first_air_date,
}) => {
  return (
    <Link href={`/tv/${id}`} key={id} className="w-full" prefetch={false}>
      <MediaCard.Root>
        <MediaPoster image={poster_path} alt={name} />
        <MediaCard.Content>
          <MediaRating
            average={vote_average}
            count={vote_count}
            className="mb-2"
          />
          <MediaCard.Title>{name}</MediaCard.Title>
          <MediaCard.Excerpt>
            {formatValue(first_air_date, format.year)}
          </MediaCard.Excerpt>
        </MediaCard.Content>
      </MediaCard.Root>
    </Link>
  )
}

// File: components/tv-episode-card.tsx
import { Episode } from "@/tmdb/models"
import { format } from "@/tmdb/utils"
import { Calendar, Clock } from "lucide-react"

import { formatValue, pad } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { MediaBackdrop } from "@/components/media-backdrop"
import { MediaRating } from "@/components/media-rating"

export const TvEpisodeCard: React.FC<Episode> = ({
  id,
  name,
  episode_number,
  still_path,
  vote_average,
  vote_count,
  air_date,
  overview,
  runtime,
}) => {
  return (
    <div className="flex flex-col rounded-md border">
      <div className="relative aspect-video" key={id}>
        <MediaBackdrop
          image={still_path}
          alt={name}
          size="w780"
          className="rounded-b-none border-x-0 border-b border-t-0"
        />
      </div>

      <div className="flex flex-1 flex-col p-4">
        <h3 className="flex items-center gap-2 font-medium">
          {pad(episode_number)}. {name}
        </h3>

        <div
          className="mb-4 mt-1 line-clamp-6 space-y-2 text-sm leading-relaxed text-muted-foreground"
          dangerouslySetInnerHTML={{
            __html: format.content(overview || "<em>No details</em>"),
          }}
        />

        <div className="mt-auto flex items-center gap-2">
          <MediaRating
            average={vote_average}
            count={vote_count}
            className="leading-none"
          />

          <Badge variant="outline">
            <Clock className="inline size-3" />
            <span className="ml-2">{formatValue(runtime, format.runtime)}</span>
          </Badge>

          <Badge variant="outline">
            <Calendar className="inline size-3" />
            <span className="ml-2">{formatValue(air_date, format.date)}</span>
          </Badge>
        </div>
      </div>
    </div>
  )
}

// File: components/tv-hero.tsx
"use client"

import { useEffect, useState } from "react"
import Link from "next/link"
import { TvShow } from "@/tmdb/models"
import { ArrowRight } from "lucide-react"

import { Badge } from "@/components/ui/badge"
import { buttonVariants } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"
import { MediaBackdrop } from "@/components/media-backdrop"

interface TvHeroProps {
  tvShow: TvShow
  label: string
  count?: number
}

export const TvHero: React.FC<TvHeroProps> = ({ tvShow, label, count = 1 }) => {
  const [mounted, setMounted] = useState(false)

  useEffect(() => {
    setMounted(true)
  }, [])

  if (!mounted) return <Skeleton className="h-hero relative w-full" />

  return (
    <div className="h-hero relative" key={tvShow.id}>
      <MediaBackdrop image={tvShow.backdrop_path} alt={tvShow.name} />

      <div className="overlay">
        <div className="mx-auto max-w-3xl space-y-4 p-4 pb-8 text-center md:p-14">
          <Badge className="select-none">{label}</Badge>

          <h1 className="line-clamp-2 text-xl font-medium leading-tight tracking-tighter md:text-4xl">
            {tvShow.name}
          </h1>
          <p className="line-clamp-3 text-sm text-muted-foreground md:text-lg">
            {tvShow.overview}
          </p>

          <div className="flex flex-col items-center justify-center gap-4 md:flex-row">
            <Link
              href={`/tv/${tvShow.id}`}
              className={buttonVariants({
                size: "lg",
                variant: "default",
              })}
            >
              Details <ArrowRight className="ml-2 size-4" />
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}

// File: components/tv-list.tsx
import { cookies } from "next/headers"
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"
import { TvListType } from "@/tmdb/api/types"

import { getUserTimezone } from "@/lib/utils"
import { ListPagination } from "@/components/list-pagination"
import { TvCard } from "@/components/tv-card"

interface TvListProps {
  list: TvListType
  page: string
  title: string
  description?: string
}

export const TvList: React.FC<TvListProps> = async ({
  list,
  page,
  title,
  description,
}) => {
  const region = cookies().get("region")?.value ?? "US"
  const timezone = getUserTimezone()

  const {
    results,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.tv.list({
    region,
    list,
    page,
    timezone,
  })

  if (!results?.length) {
    return notFound()
  }

  return (
    <div className="container space-y-8">
      <div className="md:mb-12 md:mt-6">
        <h1 className="mb-2 text-2xl font-medium">{title}</h1>
        <p className="max-w-3xl text-muted-foreground">{description}</p>
      </div>

      <div className="grid-list">
        {results?.map((tvShow) => (
          <TvCard key={tvShow.id} {...tvShow} />
        ))}
      </div>

      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: components/tv-season-details.tsx
import { tmdb } from "@/tmdb/api"
import { WithCredits } from "@/tmdb/api/types"
import { DialogProps } from "@radix-ui/react-dialog"

import { getUniqueItems } from "@/lib/utils"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MediaCastCard } from "@/components/media-cast-card"
import { MediaCrewCard } from "@/components/media-crew-card"
import { TvEpisodeCard } from "@/components/tv-episode-card"
import { TvSeasonDialog } from "@/components/tv-season-dialog"

interface TvSeasonDetailsProps extends DialogProps {
  id: string
  season: number
}

export const TvSeasonDetails: React.FC<TvSeasonDetailsProps> = async ({
  id,
  season,
  ...props
}) => {
  const {
    episodes,
    name,
    overview,
    credits: { cast, crew },
  } = await tmdb.tvSeasons.details<WithCredits>({
    id,
    season,
    append: "credits",
  })

  const guestStars = getUniqueItems(
    episodes.map((episode) => episode.guest_stars).flat()
  )

  return (
    <TvSeasonDialog name={name} overview={overview} {...props}>
      <Tabs defaultValue="episodes">
        <TabsList>
          <TabsTrigger value="episodes">Episodes</TabsTrigger>
          <TabsTrigger value="cast">Cast</TabsTrigger>
          <TabsTrigger value="guests">Guest Stars</TabsTrigger>
          <TabsTrigger value="crew">Crew</TabsTrigger>
        </TabsList>

        <TabsContent value="episodes">
          {episodes?.length ? (
            <div className="grid gap-4 sm:grid-cols-2">
              {episodes.map((episode) => (
                <TvEpisodeCard key={episode.id} {...episode} />
              ))}
            </div>
          ) : (
            <div className="empty-box">No episodes</div>
          )}
        </TabsContent>

        <TabsContent value="cast">
          {cast?.length ? (
            <div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
              {cast.map((cast) => (
                <MediaCastCard key={cast.credit_id} {...cast} />
              ))}
            </div>
          ) : (
            <div className="empty-box">No cast</div>
          )}
        </TabsContent>

        <TabsContent value="guests">
          {guestStars?.length ? (
            <div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
              {guestStars.map((cast) => (
                <MediaCastCard key={cast.credit_id} {...cast} />
              ))}
            </div>
          ) : (
            <div className="empty-box">No guest stars</div>
          )}
        </TabsContent>

        <TabsContent value="crew">
          {crew?.length ? (
            <div className="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
              {crew.map((crew) => (
                <MediaCrewCard key={crew.credit_id} {...crew} />
              ))}
            </div>
          ) : (
            <div className="empty-box">No crew</div>
          )}
        </TabsContent>
      </Tabs>
    </TvSeasonDialog>
  )
}

// File: components/tv-season-dialog.tsx
"use client"

import { usePathname, useRouter } from "next/navigation"
import { DialogProps } from "@radix-ui/react-dialog"

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"
import { ScrollArea } from "@/components/ui/scroll-area"

interface TvSeasonDialogProps extends DialogProps {
  name?: string
  overview?: string
}

export const TvSeasonDialog: React.FC<TvSeasonDialogProps> = ({
  open,
  onOpenChange,
  name,
  overview,
  children,
  ...props
}) => {
  const router = useRouter()
  const pathname = usePathname()

  function handleOpenChange(open: boolean) {
    if (!open) {
      router.replace(pathname, { scroll: false })
    }
  }

  function onOpenAutoFocus(e: Event) {
    e.preventDefault()
  }

  return (
    <Dialog modal open onOpenChange={handleOpenChange} {...props}>
      <DialogContent
        onOpenAutoFocus={onOpenAutoFocus}
        className="max-w-screen-lg"
      >
        <DialogHeader>
          <DialogTitle>{name}</DialogTitle>
          <DialogDescription className="line-clamp-3 md:line-clamp-none">
            {overview}
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[75dvh] md:pr-4">{children}</ScrollArea>
      </DialogContent>
    </Dialog>
  )
}

// File: components/ui/accordion.tsx
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="size-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

// File: components/ui/alert.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

// File: components/ui/badge.tsx
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

// File: components/ui/button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

// File: components/ui/calendar.tsx
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "size-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "size-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        caption_dropdowns: "flex gap-2 w-full",
        dropdown_month: "[&>div]:hidden",
        dropdown_year: "[&>div]:hidden",
        vhidden: "hidden",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="size-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="size-4" />,
        Dropdown: ({ children, value, caption, onChange, name, ...props }) => {
          const options = children as any[]

          const handleChange = (value: string) => {
            onChange?.({
              target: { value },
            } as React.ChangeEvent<HTMLSelectElement>)
          }

          return (
            <Select
              defaultValue={value?.toString()}
              onValueChange={handleChange}
              {...props}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>

              <SelectContent>
                {options.map((child) => (
                  <SelectItem
                    key={child.props.value.toString()}
                    value={child.props.value.toString()}
                  >
                    {child.props.children}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )
        },
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

// File: components/ui/carousel.tsx
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  size-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="size-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute size-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="size-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

// File: components/ui/command.tsx
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex size-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 size-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled='true']:pointer-events-none data-[disabled='true']:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

// File: components/ui/dialog.tsx
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="size-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

// File: components/ui/drawer.tsx
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

// File: components/ui/form.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

// File: components/ui/input.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

// File: components/ui/label.tsx
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

// File: components/ui/layout/captions.module.css
/**
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 * You can also import the same styles from "@vidstack/react/player/styles/default/captions.css"
 *
 * <Captions className="vds-captions" />
 * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 */

.captions {
  /* Recommended settings in the WebVTT spec (https://www.w3.org/TR/webvtt1). */
  --cue-color: var(--media-cue-color, white);
  --cue-bg-color: var(--media-cue-bg, rgba(0, 0, 0, 0.7));
  --cue-font-size: calc(var(--overlay-height) / 100 * 4.5);
  --cue-line-height: calc(var(--cue-font-size) * 1.2);
  --cue-padding-x: calc(var(--cue-font-size) * 0.6);
  --cue-padding-y: calc(var(--cue-font-size) * 0.4);

  font-size: var(--cue-font-size);
  word-spacing: normal;
  contain: layout style;
}

.captions[data-dir="rtl"] :global([data-part="cue-display"]) {
  direction: rtl;
}

.captions[aria-hidden="true"] {
  display: none;
}

/*************************************************************************************************
 * Cue Display
 *************************************************************************************************/

/*
* Most of the cue styles are set automatically by our [media-captions](https://github.com/vidstack/media-captions)
* library via CSS variables. They are inferred from the VTT, SRT, or SSA file cue settings. You're
* free to ignore them and style the captions as desired, but we don't recommend it unless the
* captions file contains no cue settings. Otherwise, you might be breaking accessibility.
*/
.captions :global([data-part="cue-display"]) {
  position: absolute;
  direction: ltr;
  overflow: visible;
  contain: content;
  top: var(--cue-top);
  left: var(--cue-left);
  right: var(--cue-right);
  bottom: var(--cue-bottom);
  width: var(--cue-width, auto);
  height: var(--cue-height, auto);
  transform: var(--cue-transform);
  text-align: var(--cue-text-align);
  writing-mode: var(--cue-writing-mode, unset);
  white-space: pre-line;
  unicode-bidi: plaintext;
  min-width: min-content;
  min-height: min-content;
}

.captions :global([data-part="cue"]) {
  display: inline-block;
  contain: content;
  border-radius: 2px;
  backdrop-filter: blur(8px);
  padding: var(--cue-padding-y) var(--cue-padding-x);
  line-height: var(--cue-line-height);
  background-color: var(--cue-bg-color);
  color: var(--cue-color);
  white-space: pre-wrap;
  outline: var(--cue-outline);
  text-shadow: var(--cue-text-shadow);
}

.captions :global([data-part="cue-display"][data-vertical] [data-part="cue"]) {
  padding: var(--cue-padding-x) var(--cue-padding-y);
}

// File: components/ui/layout/video-layout.tsx
import * as Tooltip from "@radix-ui/react-tooltip"
import { Captions, Controls, Gesture } from "@vidstack/react"

import * as Buttons from "../player-button"
import * as Menus from "../player-menus"
import * as Sliders from "../player-slider"
import { TimeGroup } from "../player-time-group"
import { Title } from "../player-title"
import captionStyles from "./captions.module.css"

// Offset tooltips/menus/slider previews in the lower controls group so they're clearly visible.
const popupOffset = 30

export interface VideoLayoutProps {
  thumbnails?: string
}

export function VideoLayout({ thumbnails }: VideoLayoutProps) {
  return (
    <>
      <Gestures />
      <Captions
        className={`${captionStyles.captions} absolute inset-0 bottom-2 z-10 select-none break-words opacity-0 transition-[opacity,bottom] duration-300 media-captions:opacity-100 media-controls:bottom-[85px] media-preview:opacity-0`}
      />
      <Controls.Root className="absolute inset-0 z-10 flex size-full flex-col bg-gradient-to-t from-black/10 to-transparent opacity-0 transition-opacity media-controls:opacity-100">
        <Tooltip.Provider>
          <div className="flex-1" />
          <Controls.Group className="flex w-full items-center px-2">
            <Sliders.Time thumbnails={thumbnails} />
          </Controls.Group>
          <Controls.Group className="-mt-0.5 flex w-full items-center px-2 pb-2">
            <Buttons.Play tooltipAlign="start" tooltipOffset={popupOffset} />
            <Buttons.Mute tooltipOffset={popupOffset} />
            <Sliders.Volume />
            <TimeGroup />
            <Title />
            <p className="text-xl text-white">DropdownMenu</p>
            <div className="flex-1" />
            <Menus.Captions offset={popupOffset} tooltipOffset={popupOffset} />
            <Buttons.PIP tooltipOffset={popupOffset} />
            <Buttons.Fullscreen
              tooltipAlign="end"
              tooltipOffset={popupOffset}
            />
          </Controls.Group>
        </Tooltip.Provider>
      </Controls.Root>
    </>
  )
}

function Gestures() {
  return (
    <>
      <Gesture
        className="absolute inset-0 z-0 block size-full"
        event="pointerup"
        action="toggle:paused"
      />
      <Gesture
        className="absolute inset-0 z-0 block size-full"
        event="dblpointerup"
        action="toggle:fullscreen"
      />
      <Gesture
        className="absolute left-0 top-0 z-10 block h-full w-1/5"
        event="dblpointerup"
        action="seek:-10"
      />
      <Gesture
        className="absolute right-0 top-0 z-10 block h-full w-1/5"
        event="dblpointerup"
        action="seek:10"
      />
    </>
  )
}

// File: components/ui/navigation-menu.tsx
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-px ml-1 size-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] size-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

// File: components/ui/pagination.tsx
import * as React from "react"
import Link from "next/link"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps & React.ComponentProps<typeof Link>) => (
  <Link
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({ variant: isActive ? "outline" : "ghost", size }),
      className
    )}
    prefetch={false}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="size-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="size-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex size-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="size-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

// File: components/ui/player-button.tsx
import * as Tooltip from "@radix-ui/react-tooltip"
import {
  CaptionButton,
  FullscreenButton,
  MuteButton,
  PIPButton,
  PlayButton,
  isTrackCaptionKind,
  useMediaState,
} from "@vidstack/react"
import {
  Minimize as FullscreenExitIcon,
  Maximize as FullscreenIcon,
  VolumeX as MuteIcon,
  PauseIcon,
  PictureInPictureIcon as PictureInPictureExitIcon,
  PictureInPicture2 as PictureInPictureIcon,
  PlayIcon,
  SubtitlesIcon,
  Volume2 as VolumeHighIcon,
  Volume1 as VolumeLowIcon,
} from "lucide-react"

export interface MediaButtonProps {
  tooltipSide?: Tooltip.TooltipContentProps["side"]
  tooltipAlign?: Tooltip.TooltipContentProps["align"]
  tooltipOffset?: number
}

export const buttonClass =
  "group ring-media-focus relative inline-flex h-10 w-10 cursor-pointer items-center justify-center rounded-md outline-none ring-inset hover:bg-white/20 focus-visible:ring-4 aria-disabled:hidden"

export const tooltipClass =
  "animate-out fade-out slide-out-to-bottom-2 data-[state=delayed-open]:animate-in data-[state=delayed-open]:fade-in data-[state=delayed-open]:slide-in-from-bottom-4 z-10 rounded-sm bg-black/90 px-2 py-0.5 text-sm font-medium text-white parent-data-[open]:hidden"

export function Play({
  tooltipOffset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
}: MediaButtonProps) {
  const isPaused = useMediaState("paused")
  return (
    <Tooltip.Root>
      <Tooltip.Trigger asChild>
        <PlayButton className={buttonClass}>
          {isPaused ? (
            <PlayIcon className="size-7 translate-x-px" />
          ) : (
            <PauseIcon className="size-7" />
          )}
        </PlayButton>
      </Tooltip.Trigger>
      <Tooltip.Content
        className={tooltipClass}
        side={tooltipSide}
        align={tooltipAlign}
        sideOffset={tooltipOffset}
      >
        {isPaused ? "Play" : "Pause"}
      </Tooltip.Content>
    </Tooltip.Root>
  )
}

export function Mute({
  tooltipOffset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
}: MediaButtonProps) {
  const volume = useMediaState("volume"),
    isMuted = useMediaState("muted")
  return (
    <Tooltip.Root>
      <Tooltip.Trigger asChild>
        <MuteButton className={buttonClass}>
          {isMuted || volume == 0 ? (
            <MuteIcon className="size-7" />
          ) : volume < 0.5 ? (
            <VolumeLowIcon className="size-7" />
          ) : (
            <VolumeHighIcon className="size-7" />
          )}
        </MuteButton>
      </Tooltip.Trigger>
      <Tooltip.Content
        className={tooltipClass}
        side={tooltipSide}
        align={tooltipAlign}
        sideOffset={tooltipOffset}
      >
        {isMuted ? "Unmute" : "Mute"}
      </Tooltip.Content>
    </Tooltip.Root>
  )
}

export function Caption({
  tooltipOffset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
}: MediaButtonProps) {
  const track = useMediaState("textTrack"),
    isOn = track && isTrackCaptionKind(track)
  return (
    <Tooltip.Root>
      <Tooltip.Trigger asChild>
        <CaptionButton className={buttonClass}>
          <SubtitlesIcon
            className={`size-7 ${!isOn ? "text-white/60" : ""}`}
          />
        </CaptionButton>
      </Tooltip.Trigger>
      <Tooltip.Content
        className={tooltipClass}
        side={tooltipSide}
        align={tooltipAlign}
        sideOffset={tooltipOffset}
      >
        {isOn ? "Closed-Captions Off" : "Closed-Captions On"}
      </Tooltip.Content>
    </Tooltip.Root>
  )
}

export function PIP({
  tooltipOffset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
}: MediaButtonProps) {
  const isActive = useMediaState("pictureInPicture")
  return (
    <Tooltip.Root>
      <Tooltip.Trigger asChild>
        <PIPButton className={buttonClass}>
          {isActive ? (
            <PictureInPictureExitIcon className="size-7" />
          ) : (
            <PictureInPictureIcon className="size-7" />
          )}
        </PIPButton>
      </Tooltip.Trigger>
      <Tooltip.Content
        className={tooltipClass}
        side={tooltipSide}
        align={tooltipAlign}
        sideOffset={tooltipOffset}
      >
        {isActive ? "Exit PIP" : "Enter PIP"}
      </Tooltip.Content>
    </Tooltip.Root>
  )
}

export function Fullscreen({
  tooltipOffset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
}: MediaButtonProps) {
  const isActive = useMediaState("fullscreen")
  return (
    <Tooltip.Root>
      <Tooltip.Trigger asChild>
        <FullscreenButton className={buttonClass}>
          {isActive ? (
            <FullscreenExitIcon className="size-7" />
          ) : (
            <FullscreenIcon className="size-7" />
          )}
        </FullscreenButton>
      </Tooltip.Trigger>
      <Tooltip.Content
        className={tooltipClass}
        side={tooltipSide}
        align={tooltipAlign}
        sideOffset={tooltipOffset}
      >
        {isActive ? "Exit Fullscreen" : "Enter Fullscreen"}
      </Tooltip.Content>
    </Tooltip.Root>
  )
}

// File: components/ui/player-menus.tsx
"use client"

import * as DropdownMenu from "@radix-ui/react-dropdown-menu"
import * as Tooltip from "@radix-ui/react-tooltip"
import { useCaptionOptions, useMediaPlayer } from "@vidstack/react"
import { CheckCircle, CircleIcon, SubtitlesIcon } from "lucide-react"

import { buttonClass, tooltipClass } from "./player-button"

export interface MenuProps {
  side?: DropdownMenu.DropdownMenuContentProps["side"]
  align?: DropdownMenu.DropdownMenuContentProps["align"]
  offset?: DropdownMenu.DropdownMenuContentProps["sideOffset"]
  tooltipSide?: Tooltip.TooltipContentProps["side"]
  tooltipAlign?: Tooltip.TooltipContentProps["align"]
  tooltipOffset?: number
}

// We can reuse this class for other menus.
const menuClass =
  "animate-out fade-out z-[9999] slide-in-from-bottom-4 data-[state=open]:animate-in data-[state=open]:fade-in data-[state=open]:slide-out-to-bottom-2 flex max-h-[400px] min-w-[260px] flex-col rounded-md border border-white/10 bg-black/95 p-2.5 font-sans text-[15px] font-medium outline-none backdrop-blur-sm duration-300"

export function Captions({
  side = "top",
  align = "end",
  offset = 0,
  tooltipSide = "top",
  tooltipAlign = "center",
  tooltipOffset = 0,
}: MenuProps) {
  const player = useMediaPlayer(),
    options = useCaptionOptions(),
    hint = options.selectedTrack?.label ?? "Off"
  return (
    <DropdownMenu.Root>
      <Tooltip.Root>
        <Tooltip.Trigger asChild>
          <DropdownMenu.Trigger
            aria-label="Settings"
            className={buttonClass}
            disabled={options.disabled}
          >
            <SubtitlesIcon className="size-7" />
          </DropdownMenu.Trigger>
        </Tooltip.Trigger>
        <Tooltip.Content
          className={tooltipClass}
          side={tooltipSide}
          align={tooltipAlign}
          sideOffset={tooltipOffset}
        >
          Captions
        </Tooltip.Content>
      </Tooltip.Root>
      <DropdownMenu.Content
        className={menuClass}
        side={side}
        align={align}
        sideOffset={offset}
        collisionBoundary={player?.el}
      >
        <DropdownMenu.Label className="mb-2 flex w-full items-center px-1.5 text-[15px] font-medium">
          <SubtitlesIcon className="mr-1.5 size-5 translate-y-px" />
          Captions
          <span className="ml-auto text-sm text-white/50">{hint}</span>
        </DropdownMenu.Label>
        <DropdownMenu.RadioGroup
          aria-label="Captions"
          className="flex w-full flex-col"
          value={options.selectedValue}
        >
          {options.map(({ label, value, select }) => (
            <Radio value={value} onSelect={select} key={value}>
              {label}
            </Radio>
          ))}
        </DropdownMenu.RadioGroup>
      </DropdownMenu.Content>
    </DropdownMenu.Root>
  )
}

function Radio({
  children,
  ...props
}: DropdownMenu.DropdownMenuRadioItemProps) {
  return (
    <DropdownMenu.RadioItem
      className="group relative flex w-full cursor-pointer select-none items-center justify-start rounded-sm p-2.5 text-sm outline-none ring-media-focus data-[focus]:ring hocus:bg-white/10"
      {...props}
    >
      <CircleIcon className="size-4 text-white group-data-[state=checked]:hidden" />
      <CheckCircle className="hidden size-4 text-media-brand group-data-[state=checked]:block" />
      <span className="ml-2">{children}</span>
    </DropdownMenu.RadioItem>
  )
}

// File: components/ui/player-slider.tsx
"use client"

import { useEffect, useState } from "react"
import * as Slider from "@radix-ui/react-slider"
import {
  Thumbnail,
  formatTime,
  useMediaRemote,
  useMediaState,
  useSliderPreview,
} from "@vidstack/react"

export function Volume() {
  const volume = useMediaState("volume"),
    canSetVolume = useMediaState("canSetVolume"),
    remote = useMediaRemote()

  if (!canSetVolume) return null

  return (
    <Slider.Root
      className="group relative inline-flex h-10 w-full max-w-[80px] cursor-pointer touch-none select-none items-center outline-none"
      value={[volume * 100]}
      onValueChange={([value]) => {
        remote.changeVolume(value / 100)
      }}
    >
      <Slider.Track className="relative h-[5px] w-full rounded-sm bg-white/30">
        <Slider.Range className="absolute h-full rounded-sm bg-media-brand will-change-[width]" />
      </Slider.Track>
      <Slider.Thumb
        aria-label="Volume"
        className="block size-[15px] rounded-full border border-[#cacaca] bg-white opacity-0 outline-none ring-white/40 transition-opacity will-change-[left] focus:opacity-100 focus:ring-4 group-hocus:opacity-100"
      />
    </Slider.Root>
  )
}

export interface TimeSliderProps {
  thumbnails?: string
}

export function Time({ thumbnails }: TimeSliderProps) {
  const time = useMediaState("currentTime"),
    canSeek = useMediaState("canSeek"),
    duration = useMediaState("duration"),
    seeking = useMediaState("seeking"),
    remote = useMediaRemote(),
    step = (1 / duration) * 100,
    [value, setValue] = useState(0),
    { previewRootRef, previewRef, previewValue } = useSliderPreview({
      clamp: true,
      offset: 6,
      orientation: "horizontal",
    }),
    previewTime = (previewValue / 100) * duration

  // Keep slider value in-sync with playback.
  useEffect(() => {
    if (seeking) return
    setValue((time / duration) * 100)
  }, [time, duration])

  return (
    <Slider.Root
      className="group relative inline-flex h-9 w-full cursor-pointer touch-none select-none items-center outline-none"
      value={[value]}
      disabled={!canSeek}
      step={Number.isFinite(step) ? step : 1}
      ref={previewRootRef}
      onValueChange={([value]) => {
        setValue(value)
        remote.seeking((value / 100) * duration)
      }}
      onValueCommit={([value]) => {
        remote.seek((value / 100) * duration)
      }}
    >
      <Slider.Track className="relative h-[5px] w-full rounded-sm bg-white/30">
        <Slider.Range className="absolute h-full rounded-sm bg-media-brand will-change-[width]" />
      </Slider.Track>

      <Slider.Thumb
        aria-label="Current Time"
        className="block size-[15px] rounded-full border border-[#cacaca] bg-white opacity-0 outline-none ring-white/40 transition-opacity will-change-[left] focus:opacity-100 focus:ring-4 group-hocus:opacity-100"
      />

      {/* Preview */}
      <div
        className="pointer-events-none absolute flex flex-col items-center opacity-0 transition-opacity duration-200 will-change-[left] data-[visible]:opacity-100"
        ref={previewRef}
      >
        {thumbnails ? (
          <Thumbnail.Root
            src={thumbnails}
            time={previewTime}
            className="mb-2 block h-[var(--thumbnail-height)] max-h-[160px] min-h-[80px] w-[var(--thumbnail-width)] min-w-[120px] max-w-[180px] overflow-hidden border border-white bg-black"
          >
            <Thumbnail.Img />
          </Thumbnail.Root>
        ) : null}
        <span className="text-[13px]">{formatTime(previewTime)}</span>
      </div>
    </Slider.Root>
  )
}

// File: components/ui/player-time-group.tsx
import { Time } from "@vidstack/react"

export function TimeGroup() {
  return (
    <div className="ml-2.5 flex items-center text-sm font-medium">
      <Time className="time" type="current" />
      <div className="mx-1 text-white/80">/</div>
      <Time className="time" type="duration" />
    </div>
  )
}

// File: components/ui/player-title.tsx
import { ChapterTitle } from "@vidstack/react"

export function Title() {
  return (
    <span className="inline-block flex-1 truncate px-2 text-sm font-medium text-white/70">
      <span className="mr-1">|</span>
      <ChapterTitle />
    </span>
  )
}

// File: components/ui/popover.tsx
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

// File: components/ui/scroll-area.tsx
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="size-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-px",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-px",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

// File: components/ui/select.tsx
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="size-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="size-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="size-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex size-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="size-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

// File: components/ui/separator.tsx
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-px w-full" : "h-full w-px",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

// File: components/ui/sheet.tsx
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="size-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

// File: components/ui/skeleton.tsx
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

// File: components/ui/slider.tsx
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block size-4 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

// File: components/ui/table.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

// File: components/ui/tabs.tsx
"use client"

import * as React from "react"
import Link from "next/link"
import { usePathname } from "next/navigation"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

const TabsLink = React.forwardRef<
  React.ElementRef<typeof Link>,
  React.ComponentPropsWithoutRef<typeof Link>
>(({ href, prefetch = false, scroll = false, ...props }, ref) => {
  const pathname = usePathname()

  return (
    <TabsTrigger
      data-state={pathname === href ? "active" : "inactive"}
      value={href as string}
      asChild
    >
      <Link
        ref={ref}
        href={href}
        prefetch={prefetch}
        scroll={scroll}
        replace
        {...props}
      />
    </TabsTrigger>
  )
})
TabsLink.displayName = "TabsLink" // Set the display name for the component

export { Tabs, TabsList, TabsTrigger, TabsContent, TabsLink }

// File: components/ui/textarea.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }

// File: components/ui/toast.tsx
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="size-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

// File: components/ui/toaster.tsx
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

// File: components/ui/tooltip.tsx
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

// File: components/ui/use-toast.ts
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type { ToastActionElement, ToastProps } from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

// File: components/user-avatar.tsx
import { ComponentProps } from "react"
import Image from "next/image"
import { ProfileSize, tmdbImage } from "@/tmdb/utils"

import { cn } from "@/lib/utils"
import { Icons } from "@/components/icons"

interface UserAvatarProps extends ComponentProps<"div"> {
  image?: string
  size?: ProfileSize
  alt: string
  priority?: boolean
}

export const UserAvatar: React.FC<UserAvatarProps> = ({
  image,
  size = "w45",
  alt,
  className,
  priority,
  ...props
}) => {
  const src = image ? tmdbImage.profile(image, size) : null

  if (!src) {
    return (
      <div
        className={cn(
          "size-full rounded-full bg-muted text-muted-foreground",
          className
        )}
        {...props}
      >
        <div className="grid size-full place-items-center">
          <Icons.Logo className="size-6" />
        </div>
      </div>
    )
  }

  return (
    <Image
      className={cn("size-full rounded-full bg-muted object-cover", className)}
      src={src}
      alt={alt}
      priority={priority}
      unoptimized
      fill
    />
  )
}

// File: components/user-review-card.tsx
import { Review } from "@/tmdb/models"
import { format } from "@/tmdb/utils"

import { Skeleton } from "@/components/ui/skeleton"
import { MediaRating } from "@/components/media-rating"
import { UserAvatar } from "@/components/user-avatar"

interface UserReviewCardProps {
  review: Review
}

export const UserReviewCard: React.FC<UserReviewCardProps> = ({ review }) => {
  const { author_details, author, created_at, content } = review
  const { name, avatar_path, username, rating } = author_details

  return (
    <div className="grid grid-cols-[auto,1fr] items-center gap-2 md:items-start md:gap-x-4">
      <div className="w-10 md:row-span-2 md:w-12">
        <div className="relative aspect-square">
          <UserAvatar image={avatar_path} alt={name} className="border" />
        </div>
      </div>
      <div className="flex items-center justify-between">
        <h3 className="flex flex-wrap items-center gap-2">
          <span className="block text-sm md:text-base">{author}</span>
          <span className="block text-xs text-muted-foreground md:text-sm">
            @{username}
          </span>
        </h3>
        <div className="flex flex-col items-end gap-2 md:flex-row md:items-center">
          <span className="text-right text-xs text-muted-foreground">
            {format.date(created_at)}
          </span>
          <MediaRating average={rating} />
        </div>
      </div>
      <div
        className="col-span-2 space-y-2 rounded-md border p-4 text-sm leading-relaxed md:col-span-1 md:col-start-2"
        dangerouslySetInnerHTML={{
          __html: format.content(content),
        }}
      />
    </div>
  )
}

export const SkeletonReviewCard = () => (
  <div className="grid grid-cols-[auto,1fr] items-center gap-2 md:items-start md:gap-x-4">
    <div className="relative aspect-square w-10 md:row-span-2 md:w-12">
      <Skeleton className="size-full rounded-full" />
    </div>
    <div className="flex items-center justify-between">
      <h3 className="flex">
        <Skeleton className="h-6 w-40 rounded-md" />
      </h3>
      <div className="flex flex-col items-end gap-2 md:flex-row md:items-center">
        <Skeleton className="h-4 w-24 rounded-md" />
        <Skeleton className="h-4 w-24 rounded-md" />
      </div>
    </div>
    <div className="col-span-2 space-y-2 rounded-md border p-4 text-sm leading-relaxed md:col-span-1 md:col-start-2">
      <Skeleton className="h-4 w-full rounded-md" />
      <Skeleton className="h-4 w-full rounded-md" />
      <Skeleton className="h-4 w-full rounded-md" />
    </div>
  </div>
)

// File: components/video-card.tsx
import { ComponentProps } from "react"
import Image from "next/image"
import { yt } from "@/tmdb/utils"
import { PlayCircle } from "lucide-react"

import { cn } from "@/lib/utils"

interface VideoCardProps extends ComponentProps<"div"> {
  name: string
  ytKey: string
}

export const VideoCard: React.FC<VideoCardProps> = ({
  name,
  ytKey,
  className,
  ...props
}) => (
  <div
    className={cn("relative aspect-video cursor-pointer bg-muted", className)}
    {...props}
  >
    <Image
      className="size-full rounded-md border object-cover"
      src={yt.thumbnail(ytKey)}
      alt={name}
      unoptimized
      fill
    />
    <div className="overlay">
      <div className="p-4 md:p-6">
        <h3 className="line-clamp-2 font-semibold md:text-lg">{name}</h3>
        <PlayCircle className="absolute left-1/2 top-1/2 size-10 -translate-x-1/2 -translate-y-1/2" />
      </div>
    </div>
  </div>
)

// File: components/video-list.tsx
import React from "react"
import { tmdb } from "@/tmdb/api"
import { yt } from "@/tmdb/utils"

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { VideoCard } from "@/components/video-card"

interface VideoListProps {
  id: string
  type: "movie" | "tv"
}

export const VideoList: React.FC<VideoListProps> = async ({ id, type }) => {
  const { results: videos } = await tmdb[type].videos({ id })

  if (!videos?.length) return <div className="empty-box">No videos</div>

  return (
    <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
      {videos.map(({ id, key, name }) => (
        <Dialog key={id} modal>
          <DialogTrigger asChild>
            <VideoCard name={name} ytKey={key} />
          </DialogTrigger>

          <DialogContent className="max-w-screen-lg">
            <DialogHeader>
              <DialogTitle>{name}</DialogTitle>
            </DialogHeader>

            <iframe
              className="aspect-square size-full rounded-md sm:aspect-video"
              src={yt.video(key, true)}
              allow="autoplay; encrypted-media"
              allowFullScreen={true}
            />
          </DialogContent>
        </Dialog>
      ))}
    </div>
  )
}

// File: components/window-dimension.tsx
"use client"

import React from "react"

import { useWindowDimensions } from "../hooks"

export const WindowDimension = () => {
  // const [width, setWidth] = useState(window.innerWidth);
  // const [height, setHeight] = useState(window.innerHeight);

  // useEffect(() => {
  //   const handleResize = () => setWidth(window.innerWidth);
  //   const handleHidth = () => setWidth(window.innerHeight);
  //   window.addEventListener("resize", handleResize);
  //   window.addEventListener("resize", handleHidth);
  //   return () => {
  //     window.removeEventListener("resize", handleResize)
  //     window.removeEventListener("resize", handleHidth)
  //   }
  // }, []);

  const { width, height } = useWindowDimensions()

  return (
    <div>
      {" "}
      <p>
        The width of the screen is: {width}px with {height}px{" "}
      </p>{" "}
    </div>
  )
}

// File: app/(detail)/loading.tsx
export { SkeletonMediaDetail as default } from "@/components/media-detail-view"

// File: app/(detail)/movie/[id]/(tabs)/(list-style)/credits/page.tsx
import { tmdb } from "@/tmdb/api"

import { Separator } from "@/components/ui/separator"
import { MediaCastCard } from "@/components/media-cast-card"
import { MediaCrewCard } from "@/components/media-crew-card"

interface DetailCreditsProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailCreditsProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Credits - ${title}`,
  }
}

export default async function DetailCredits({ params }: DetailCreditsProps) {
  const { cast, crew } = await tmdb.movie.credits({ id: params.id })

  return (
    <section className="space-y-12">
      {cast.length > 0 ? (
        <div className="grid-list">
          {cast.map((cast) => (
            <MediaCastCard key={cast.credit_id} {...cast} />
          ))}
        </div>
      ) : (
        <div className="empty-box">No cast</div>
      )}

      <Separator />

      {crew.length > 0 ? (
        <div className="grid-list">
          {crew.map((crew) => (
            <MediaCrewCard key={crew.credit_id} {...crew} />
          ))}
        </div>
      ) : (
        <div className="empty-box">No crew</div>
      )}
    </section>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/(list-style)/images/page.tsx
import { tmdb } from "@/tmdb/api"

import { MediaImages } from "@/components/media-images"

interface DetailImagesProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailImagesProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Images - ${title}`,
  }
}

export default async function DetailImages({ params }: DetailImagesProps) {
  const { posters, backdrops } = await tmdb.movie.images({
    id: params.id,
    langs: "en",
  })

  return <MediaImages posters={posters} backdrops={backdrops} />
}

// File: app/(detail)/movie/[id]/(tabs)/(list-style)/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="grid-list">
      {Array.from({ length: 20 }).map((_, i) => (
        <Skeleton key={i} className="aspect-poster w-full rounded-md" />
      ))}
    </div>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/(list-style)/recommendations/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { MovieCard } from "@/components/movie-card"

interface DetailRecommendationsProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailRecommendationsProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Recommendations - ${title}`,
  }
}

export default async function DetailRecommendations({
  params,
  searchParams,
}: DetailRecommendationsProps) {
  const {
    results: movies,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.movie.recommendations({
    id: params.id,
    page: searchParams.page,
  })

  if (!movies?.length) {
    return <div className="empty-box">No recommendations</div>
  }

  return (
    <div className="space-y-4">
      <section className="grid-list">
        {movies.map((movie) => (
          <MovieCard key={movie.id} {...movie} />
        ))}
      </section>
      <ListPagination totalPages={totalPages} currentPage={currentPage} />
    </div>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/(list-style)/similar/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { MovieCard } from "@/components/movie-card"

interface DetailSimilarProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailSimilarProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Similar - ${title}`,
  }
}

export default async function DetailSimilar({
  params,
  searchParams,
}: DetailSimilarProps) {
  const {
    results: movies,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.movie.similar({
    id: params.id,
    page: searchParams.page,
  })

  if (!movies?.length) {
    return <div className="empty-box">No recommendations</div>
  }

  return (
    <div className="space-y-4">
      <section className="grid-list">
        {movies.map((movie) => (
          <MovieCard key={movie.id} {...movie} />
        ))}
      </section>
      <ListPagination totalPages={totalPages} currentPage={currentPage} />
    </div>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/reviews/loading.tsx
import { SkeletonReviewCard } from "@/components/user-review-card"

export default function Loading() {
  return (
    <div className="space-y-8">
      {Array.from({ length: 20 }).map((_, i) => (
        <SkeletonReviewCard key={i} />
      ))}
    </div>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/reviews/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { UserReviewCard } from "@/components/user-review-card"

interface DetailReviewsProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailReviewsProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Reviews - ${title}`,
  }
}
export default async function DetailReviews({
  params,
  searchParams,
}: DetailReviewsProps) {
  const { results, page, total_pages } = await tmdb.movie.reviews({
    id: params.id,
    page: searchParams.page,
  })

  if (!results.length) return <div className="empty-box">No reviews</div>

  return (
    <section className="space-y-8">
      {results.map((review) => (
        <UserReviewCard key={review.id} review={review} />
      ))}

      <ListPagination currentPage={page} totalPages={total_pages} />
    </section>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/videos/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
      {Array.from({ length: 20 }).map((_, i) => (
        <Skeleton key={i} className="aspect-video w-full rounded-md" />
      ))}
    </div>
  )
}

// File: app/(detail)/movie/[id]/(tabs)/videos/page.tsx
import { tmdb } from "@/tmdb/api"

import { VideoList } from "@/components/video-list"

interface DetailVideosProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailVideosProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title: `Videos - ${title}`,
  }
}

export default function DetailVideos({ params }: DetailVideosProps) {
  return <VideoList type="movie" id={params.id} />
}

// File: app/(detail)/movie/[id]/(tabs)/watch/page.tsx
import { MediaWatchProviders } from "@/components/media-watch-providers"

interface DetailWatchProps {
  params: {
    id: string
  }
}

export default function DetailWatch({ params }: DetailWatchProps) {
  return <MediaWatchProviders id={params.id} type="movie" />
}

// File: app/(detail)/movie/[id]/layout.tsx
import Link from "next/link"
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"
import { WithVideos } from "@/tmdb/api/types"
import { format } from "@/tmdb/utils"
import { Play } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Tabs, TabsLink, TabsList } from "@/components/ui/tabs"
import { MediaBackdrop } from "@/components/media-backdrop"
import { MediaDetailView } from "@/components/media-detail-view"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"

import AdScript from "../../../../components/ad-scripts"

interface DetailLayoutProps {
  params: {
    id: string
  }
  children: React.ReactNode
}

export async function generateMetadata({ params }: DetailLayoutProps) {
  const { title } = await tmdb.movie.detail({
    id: params.id,
  })

  return {
    title,
  }
}

export default async function DetailLayout({
  params,
  children,
}: DetailLayoutProps) {
  const {
    id,
    title,
    overview,
    genres,
    vote_average,
    vote_count,
    backdrop_path,
    poster_path,
    release_date,
    tagline,
    videos,
  } = await tmdb.movie.detail<WithVideos>({
    id: params.id,
    append: "videos",
  })

  if (!id) return notFound()

  return (
    <MediaDetailView.Root>
      <MediaDetailView.Backdrop>
        <MediaBackdrop image={backdrop_path} alt={title} priority />
      </MediaDetailView.Backdrop>

      <MediaDetailView.Hero>
        <MediaDetailView.Poster>
          <MediaPoster image={poster_path} alt={title} size="w780" priority />
        </MediaDetailView.Poster>

        <div className="space-y-4">
          <MediaDetailView.Genres>
            <MediaRating average={vote_average} count={vote_count} />

            {genres?.map((genre) => (
              <Link
                key={genre.id}
                href={`/movie/discover?with_genres=${genre.id}`}
              >
                <MediaDetailView.Genre key={genre.id}>
                  {genre.name}
                </MediaDetailView.Genre>
              </Link>
            ))}
          </MediaDetailView.Genres>

          <MediaDetailView.Title>{title}</MediaDetailView.Title>

          <Button asChild>
            <Link href="/loading">
              <Play className="mr-2 size-4" /> Watch Now
            </Link>
          </Button>

          {tagline && (
            <MediaDetailView.Overview>
              &quot;{tagline}&quot;
            </MediaDetailView.Overview>
          )}

          <MediaDetailView.Overview
            dangerouslySetInnerHTML={{ __html: format.content(overview) }}
          />
        </div>
      </MediaDetailView.Hero>
      <AdScript />

      <MediaDetailView.Content>
        <Tabs className="mt-12 w-full">
          <div className="max-w-screen scrollbar-hidden -mx-8 overflow-x-scroll px-8 lg:m-0 lg:p-0">
            <TabsList>
              <TabsLink href={`/movie/${id}`}>Overview</TabsLink>
              <TabsLink href={`/movie/${id}/credits`}>Credits</TabsLink>
              <TabsLink href={`/movie/${id}/watch`}>Watch</TabsLink>
              <TabsLink href={`/movie/${id}/reviews`}>Reviews</TabsLink>
              <TabsLink href={`/movie/${id}/images`}>Images</TabsLink>
              <TabsLink href={`/movie/${id}/videos`}>Videos</TabsLink>
              <TabsLink href={`/movie/${id}/recommendations`}>
                Recommendations
              </TabsLink>
              <TabsLink href={`/movie/${id}/similar`}>Similar</TabsLink>
            </TabsList>
          </div>
        </Tabs>

        <div className="mt-4">{children}</div>
      </MediaDetailView.Content>
    </MediaDetailView.Root>
  )
}

// File: app/(detail)/movie/[id]/page.tsx
import Link from "next/link"
import { tmdb } from "@/tmdb/api"
import { format } from "@/tmdb/utils"

import { cn, formatValue, joiner } from "@/lib/utils"
import { MovieCollection } from "@/components/movie-collection"

import { MovieCard } from "../../../../components/movie-card"
import { buttonVariants } from "../../../../components/ui/button"

interface DetailProps {
  params: {
    id: string
  }
}

export default async function Detail({ params }: DetailProps) {
  const {
    status,
    release_date,
    runtime,
    budget,
    revenue,
    spoken_languages,
    production_companies,
    belongs_to_collection,
    original_title,
  } = await tmdb.movie.detail({
    id: params.id,
  })

  const { results: recommends } = await tmdb.movie.recommendations({
    id: params.id,
  })

  const overview = [
    {
      title: "Release Date",
      value: formatValue(release_date, format.date),
    },
    {
      title: "Status",
      value: formatValue(status),
    },
    {
      title: "Original Title",
      value: formatValue(original_title),
    },
    {
      title: "Runtime",
      value: formatValue(runtime, format.runtime),
    },
    {
      title: "Budget",
      value: formatValue(budget, format.currency),
    },
    {
      title: "Revenue",
      value: formatValue(revenue, format.currency),
    },
    {
      title: "Language",
      value: joiner(spoken_languages, "english_name"),
    },
    {
      title: "Production Companies",
      value: production_companies.map(({ id, name }) => (
        <Link
          key={id}
          href={`/movie/discover?with_companies=${id}`}
          className="mr-1 border-b-2 transition hover:text-foreground"
        >
          {name}
        </Link>
      )),
    },
  ]

  return (
    <section className="space-y-4">
      <div className="grid grid-cols-2 gap-y-12 rounded border p-6 md:grid-cols-4">
        {overview.map((item) => (
          <div key={item.title}>
            <h2 className="font-medium md:text-xl">{item.title}</h2>
            <p className="mt-2 line-clamp-2 text-sm text-muted-foreground md:text-base">
              {item.value}
            </p>
          </div>
        ))}
      </div>

      {belongs_to_collection && (
        <MovieCollection id={belongs_to_collection.id} />
      )}

      <div className="flex flex-row justify-between">
        <h1 className="line-clamp-2 text-xl font-medium leading-tight tracking-tighter md:text-2xl">
          Recomendations
        </h1>
        <Link
          href={"/trending/movie"}
          className={cn(buttonVariants({ size: "sm", variant: "outline" }))}
          prefetch={false}
        >
          Explore more
        </Link>
      </div>

      {recommends.length ? (
        <div className="grid-list">
          {recommends.map((movie) => (
            <MovieCard key={movie.id} {...movie} />
          ))}
        </div>
      ) : (
        <div className="container flex justify-center pb-[30dvh]">
          <div className="text-center">
            <h1 className="text-2xl">
              No movies found for the selected filters.
            </h1>
            <p className="text-muted-foreground">
              Try removing some of the filters to get more results.
            </p>
          </div>
        </div>
      )}
    </section>
  )
}

// File: app/(detail)/person/[id]/page.tsx
import { tmdb } from "@/tmdb/api"
import { WithCombinedCredits, WithImages } from "@/tmdb/api/types"
import { format } from "@/tmdb/utils"

import {
  filterByDepartment,
  formatValue,
  getDepartments,
  getPersonHighlights,
} from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MediaBackdrop } from "@/components/media-backdrop"
import { MediaDetailView } from "@/components/media-detail-view"
import { MediaImages } from "@/components/media-images"
import { MediaPoster } from "@/components/media-poster"
import { MovieCard } from "@/components/movie-card"
import { PersonCreditsTable } from "@/components/person-credits-table"
import { TvCard } from "@/components/tv-card"

interface DetailProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailProps) {
  const { name } = await tmdb.person.detail({
    id: params.id,
  })

  return {
    title: name,
  }
}

export default async function Detail({ params }: DetailProps) {
  const {
    name,
    profile_path,
    biography,
    birthday,
    place_of_birth,
    images: { profiles },
    known_for_department: department,
    combined_credits: { cast, crew },
  } = await tmdb.person.detail<WithCombinedCredits & WithImages>({
    id: params.id,
    append: "combined_credits,images",
  })

  const { highlights, hero } = getPersonHighlights({
    cast,
    crew,
    department,
  })

  const info = [birthday && format.date(birthday), place_of_birth]
    .filter(Boolean)
    .join(" — ")

  return (
    <MediaDetailView.Root>
      <MediaDetailView.Backdrop>
        <MediaBackdrop image={hero?.backdrop_path} alt={name} priority />

        {hero?.backdrop_path && (
          <Badge
            variant="secondary"
            className="absolute right-4 top-4 select-none"
          >
            An image from {hero.media_type === "tv" ? hero.name : hero.title},
            one of the productions that also features {name}.
          </Badge>
        )}
      </MediaDetailView.Backdrop>

      <MediaDetailView.Hero>
        <MediaDetailView.Poster>
          <MediaPoster image={profile_path} alt={name} size="w780" priority />
        </MediaDetailView.Poster>

        <div className="space-y-4">
          <MediaDetailView.Title>{name}</MediaDetailView.Title>
          <MediaDetailView.Overview>{info}</MediaDetailView.Overview>
          <MediaDetailView.Overview
            dangerouslySetInnerHTML={{
              __html: formatValue(biography, format.content),
            }}
          />
        </div>
      </MediaDetailView.Hero>

      <MediaDetailView.Content>
        <Tabs defaultValue="known">
          <TabsList className="mb-4">
            <TabsTrigger value="known">Known for</TabsTrigger>
            <TabsTrigger value="credits">Credits</TabsTrigger>
            <TabsTrigger value="images">Images</TabsTrigger>
          </TabsList>

          <TabsContent value="known">
            {highlights.length > 0 ? (
              <div className="grid-list">
                {highlights?.map((item) =>
                  item.media_type === "movie" ? (
                    <MovieCard key={item.id} {...item} />
                  ) : (
                    <TvCard key={item.id} {...item} />
                  )
                )}
              </div>
            ) : (
              <div className="empty-box">No credits</div>
            )}
          </TabsContent>

          <TabsContent value="credits">
            <div className="space-y-8">
              {department === "Acting" && (
                <PersonCreditsTable department="Acting" credits={cast} />
              )}

              {getDepartments(crew).map((department) => (
                <PersonCreditsTable
                  key={department}
                  department={department}
                  credits={filterByDepartment(crew, department)}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="images">
            <MediaImages profiles={profiles} />
          </TabsContent>
        </Tabs>
      </MediaDetailView.Content>
    </MediaDetailView.Root>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/credits/page.tsx
import { tmdb } from "@/tmdb/api"

import { Separator } from "@/components/ui/separator"
import { MediaCastCard } from "@/components/media-cast-card"
import { MediaCrewCard } from "@/components/media-crew-card"

interface DetailCreditsProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailCreditsProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Credits - ${name}`,
  }
}

export default async function DetailCredits({
  params,
}: {
  params: { id: string }
}) {
  const { cast, crew } = await tmdb.tv.credits({ id: params.id })

  return (
    <section className="space-y-12">
      {cast.length > 0 ? (
        <div className="grid-list">
          {cast.map((cast) => (
            <MediaCastCard key={cast.credit_id} {...cast} />
          ))}
        </div>
      ) : (
        <div className="empty-box">No cast</div>
      )}

      <Separator />

      {crew.length > 0 ? (
        <div className="grid-list">
          {crew.map((crew) => (
            <MediaCrewCard key={crew.credit_id} {...crew} />
          ))}
        </div>
      ) : (
        <div className="empty-box">No crew</div>
      )}
    </section>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/images/page.tsx
import { tmdb } from "@/tmdb/api"

import { MediaImages } from "@/components/media-images"

interface DetailImagesProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: DetailImagesProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Images - ${name}`,
  }
}

export default async function DetailImages({ params }: DetailImagesProps) {
  const { posters, backdrops } = await tmdb.tv.images({
    id: params.id,
    langs: "en",
  })
  return <MediaImages posters={posters} backdrops={backdrops} />
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="grid-list">
      {Array.from({ length: 20 }).map((_, i) => (
        <Skeleton key={i} className="aspect-poster w-full rounded-md" />
      ))}
    </div>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/recommendations/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { TvCard } from "@/components/tv-card"

interface DetailRecommendationsProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailRecommendationsProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Recommendations - ${name}`,
  }
}

export default async function DetailRecommendations({
  params,
  searchParams,
}: DetailRecommendationsProps) {
  const {
    results: tvShows,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.tv.recommendations({
    id: params.id,
    page: searchParams.page,
  })

  if (!tvShows?.length) {
    return <div className="empty-box">No recommendations</div>
  }

  return (
    <div className="space-y-4">
      <section className="grid-list">
        {tvShows.map((tv) => (
          <TvCard key={tv.id} {...tv} />
        ))}
      </section>
      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/seasons/page.tsx
import { Fragment } from "react"
import Link from "next/link"
import { tmdb } from "@/tmdb/api"

import { MediaCard } from "@/components/media-card"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"
import { TvSeasonDetails } from "@/components/tv-season-details"

interface DetailSeasonsProps {
  params: {
    id: string
  }
  searchParams: {
    s: string
  }
}

export async function generateMetadata({ params }: DetailSeasonsProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Seasons - ${name}`,
  }
}

export default async function DetailSeasons({
  params,
  searchParams,
}: DetailSeasonsProps) {
  const { seasons } = await tmdb.tv.detail({
    id: params.id,
  })

  if (!seasons) return <div className="empty-box">No seasons</div>

  return (
    <section className="grid-list">
      {seasons.map((season) => (
        <Fragment key={season.id}>
          <Link
            href={`/tv/${params.id}/seasons?s=${season.season_number}`}
            prefetch={false}
            replace
            scroll={false}
          >
            <MediaCard.Root>
              <MediaPoster image={season.poster_path} alt={season.name} />
              <MediaCard.Content>
                <MediaRating average={season.vote_average} className="mb-2" />
                <MediaCard.Title>{season.name}</MediaCard.Title>
                <MediaCard.Excerpt>
                  {season.episode_count} Episodes
                </MediaCard.Excerpt>
              </MediaCard.Content>
            </MediaCard.Root>
          </Link>

          {parseInt(searchParams.s) === season.season_number && (
            <TvSeasonDetails id={params.id} season={season.season_number} />
          )}
        </Fragment>
      ))}
    </section>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/(list-style)/similar/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { TvCard } from "@/components/tv-card"

interface DetailSimilarProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailSimilarProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Similar - ${name}`,
  }
}

export default async function DetailSimilar({
  params,
  searchParams,
}: DetailSimilarProps) {
  const {
    results: tvShows,
    total_pages: totalPages,
    page: currentPage,
  } = await tmdb.tv.similar({
    id: params.id,
    page: searchParams.page,
  })

  if (!tvShows?.length) {
    return <div className="empty-box">No recommendations</div>
  }

  return (
    <div className="space-y-4">
      <section className="grid-list">
        {tvShows.map((tv) => (
          <TvCard key={tv.id} {...tv} />
        ))}
      </section>
      <ListPagination currentPage={currentPage} totalPages={totalPages} />
    </div>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/reviews/loading.tsx
import { SkeletonReviewCard } from "@/components/user-review-card"

export default function Loading() {
  return (
    <div className="space-y-8">
      {Array.from({ length: 20 }).map((_, i) => (
        <SkeletonReviewCard key={i} />
      ))}
    </div>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/reviews/page.tsx
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { UserReviewCard } from "@/components/user-review-card"

interface DetailReviewsProps {
  params: {
    id: string
  }
  searchParams: {
    page: string
  }
}

export async function generateMetadata({ params }: DetailReviewsProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Reviews - ${name}`,
  }
}
export default async function DetailReviews({
  params,
  searchParams,
}: DetailReviewsProps) {
  const { results, page, total_pages } = await tmdb.tv.reviews({
    id: params.id,
    page: searchParams.page,
  })

  if (!results.length) return <div className="empty-box">No reviews</div>

  return (
    <section className="space-y-8">
      {results.map((review) => (
        <UserReviewCard key={review.id} review={review} />
      ))}

      <ListPagination currentPage={page} totalPages={total_pages} />
    </section>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/videos/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="grid gap-4 md:grid-cols-2 xl:grid-cols-3">
      {Array.from({ length: 20 }).map((_, i) => (
        <Skeleton key={i} className="aspect-video w-full rounded-md" />
      ))}
    </div>
  )
}

// File: app/(detail)/tv/[id]/(tabs)/videos/page.tsx
import { tmdb } from "@/tmdb/api"

import { VideoList } from "@/components/video-list"

interface VideosProps {
  params: {
    id: string
  }
}

export async function generateMetadata({ params }: VideosProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: `Videos - ${name}`,
  }
}

export default async function DetailVideos({ params }: VideosProps) {
  return <VideoList type="tv" id={params.id} />
}

// File: app/(detail)/tv/[id]/(tabs)/watch/page.tsx
import { MediaWatchProviders } from "@/components/media-watch-providers"

interface DetailWatchProps {
  params: {
    id: string
  }
}

export default function DetailWatch({ params }: DetailWatchProps) {
  return <MediaWatchProviders id={params.id} type="tv" />
}

// File: app/(detail)/tv/[id]/layout.tsx
import Link from "next/link"
import { notFound } from "next/navigation"
import { tmdb } from "@/tmdb/api"
import { WithVideos } from "@/tmdb/api/types"
import { format } from "@/tmdb/utils"
import { Play } from "lucide-react"

import { Button } from "@/components/ui/button"
import { Tabs, TabsLink, TabsList } from "@/components/ui/tabs"
import { InfoTooltip } from "@/components/info-tooltip"
import { MediaBackdrop } from "@/components/media-backdrop"
import { MediaDetailView } from "@/components/media-detail-view"
import { MediaPoster } from "@/components/media-poster"
import { MediaRating } from "@/components/media-rating"

import AdScript from "../../../../components/ad-scripts"

interface DetailLayoutProps {
  params: {
    id: string
  }
  children: React.ReactNode
}

export async function generateMetadata({ params }: DetailLayoutProps) {
  const { name } = await tmdb.tv.detail({
    id: params.id,
  })

  return {
    title: name,
  }
}

export default async function DetailLayout({
  params,
  children,
}: DetailLayoutProps) {
  const {
    id,
    name,
    overview,
    backdrop_path,
    poster_path,
    genres,
    vote_average,
    vote_count,
    tagline,
    videos,
  } = await tmdb.tv.detail<WithVideos>({
    id: params.id,
    append: "videos",
  })

  if (!id) return notFound()

  return (
    <MediaDetailView.Root>
      <MediaDetailView.Backdrop>
        <MediaBackdrop image={backdrop_path} alt={name} priority />
      </MediaDetailView.Backdrop>

      <MediaDetailView.Hero>
        <MediaDetailView.Poster>
          <MediaPoster image={poster_path} alt={name} size="w780" priority />
        </MediaDetailView.Poster>

        <div className="space-y-4">
          <MediaDetailView.Genres>
            <MediaRating average={vote_average} count={vote_count} />
            {genres?.map((genre) => (
              <Link
                key={genre.id}
                href={`/tv/discover?with_genres=${genre.id}`}
              >
                <MediaDetailView.Genre>{genre.name}</MediaDetailView.Genre>
              </Link>
            ))}
          </MediaDetailView.Genres>

          <MediaDetailView.Title>{name}</MediaDetailView.Title>
          <Button asChild>
            <Link href="/loading">
              <Play className="mr-2 size-4" /> Watch Now
            </Link>
          </Button>

          {tagline && (
            <MediaDetailView.Overview>
              &quot;{tagline}&quot;
            </MediaDetailView.Overview>
          )}

          <MediaDetailView.Overview
            dangerouslySetInnerHTML={{ __html: format.content(overview) }}
          />
        </div>
      </MediaDetailView.Hero>
      <AdScript />

      <MediaDetailView.Content>
        <Tabs className="mt-8 lg:mt-12">
          <div className="max-w-screen scrollbar-hidden -mx-8 overflow-x-scroll px-8 lg:m-0 lg:p-0">
            <TabsList>
              <TabsLink href={`/tv/${id}`}>Overview</TabsLink>
              <TabsLink className="gap-2" href={`/tv/${id}/credits`}>
                Credits
                <InfoTooltip>
                  You can see season credits and guest stars in seasons tab.
                </InfoTooltip>
              </TabsLink>
              <TabsLink href={`/tv/${id}/watch`}>Watch</TabsLink>
              <TabsLink href={`/tv/${id}/reviews`}>Reviews</TabsLink>
              <TabsLink href={`/tv/${id}/seasons`}>Seasons</TabsLink>
              <TabsLink href={`/tv/${id}/images`}>Images</TabsLink>
              <TabsLink href={`/tv/${id}/videos`}>Videos</TabsLink>
              <TabsLink href={`/tv/${id}/recommendations`}>
                Recommendations
              </TabsLink>
              <TabsLink href={`/tv/${id}/similar`}>Similar</TabsLink>
            </TabsList>
          </div>
        </Tabs>
        <div className="mt-4">{children}</div>
      </MediaDetailView.Content>
    </MediaDetailView.Root>
  )
}

// File: app/(detail)/tv/[id]/page.tsx
import Link from "next/link"
import { tmdb } from "@/tmdb/api"
import { format } from "@/tmdb/utils"

import { cn, formatValue, joiner, pad } from "@/lib/utils"
import { Badge } from "@/components/ui/badge"
import { buttonVariants } from "@/components/ui/button"
import { MediaBackdrop } from "@/components/media-backdrop"
import { TvCard } from "@/components/tv-card"

export default async function Detail({ params }: { params: { id: string } }) {
  const {
    first_air_date,
    last_air_date,
    status,
    original_name,
    created_by,
    number_of_seasons,
    number_of_episodes,
    spoken_languages,
    production_companies,
    networks,
    last_episode_to_air: lastEpisode,
  } = await tmdb.tv.detail({
    id: params.id,
  })

  const { results: recommends } = await tmdb.tv.recommendations({
    id: params.id,
    page: "1",
  })

  const items = [
    {
      title: "Created By",
      value: created_by.map(({ id, name }) => (
        <Link
          key={id}
          href={`/person/${id}`}
          className="mr-1 border-b-2 transition hover:text-foreground"
        >
          {name}
        </Link>
      )),
    },
    {
      title: "Status",
      value: formatValue(status),
    },
    {
      title: "Original Name",
      value: formatValue(original_name),
    },
    {
      title: "First Air Date",
      value: formatValue(first_air_date, format.date),
    },
    {
      title: "Last Air Date",
      value: formatValue(last_air_date, format.date),
    },
    {
      title: "Seasons",
      value: formatValue(number_of_seasons),
    },
    {
      title: "Episodes",
      value: formatValue(number_of_episodes),
    },
    {
      title: "Language",
      value: joiner(spoken_languages, "english_name"),
    },
    {
      title: "Production Companies",
      value: production_companies.map(({ id, name }) => (
        <Link
          key={id}
          href={`/tv/discover?with_companies=${id}`}
          className="mr-1 border-b-2 transition hover:text-foreground"
        >
          {name}
        </Link>
      )),
    },
    {
      title: "Networks",
      value: networks.map(({ id, name }) => (
        <Link
          key={id}
          href={`/tv/discover?with_networks=${id}`}
          className="mr-1 border-b-2 transition hover:text-foreground"
        >
          {name}
        </Link>
      )),
    },
  ]

  return (
    <section className="space-y-4">
      <div className="grid grid-cols-2 gap-y-12 rounded border p-6 lg:grid-cols-4">
        {items.map((item) => (
          <div key={item.title}>
            <h2 className="font-medium md:text-xl">{item.title}</h2>
            <p className="mt-2 line-clamp-2 text-sm text-muted-foreground md:text-base">
              {item.value}
            </p>
          </div>
        ))}
      </div>

      {lastEpisode && (
        <div className="h-hero relative w-full">
          <MediaBackdrop
            image={lastEpisode.still_path}
            alt={lastEpisode.name}
          />
          <div className="overlay">
            <div className="p-4 md:p-10">
              <Badge className="mb-4 gap-1">
                <span>S{pad(lastEpisode.season_number)}</span>
                <span>E{pad(lastEpisode.episode_number)}</span>
              </Badge>

              <h2 className="line-clamp-1 text-lg font-medium md:text-2xl">
                {lastEpisode.name}
              </h2>
              <p className="line-clamp-3 max-w-xl text-muted-foreground md:line-clamp-6">
                {lastEpisode.overview}
              </p>
              <Link
                href={`/tv/${params.id}/seasons?s=${lastEpisode.season_number}`}
                className={cn(buttonVariants({ variant: "default" }), "mt-4")}
                prefetch={false}
              >
                View Episodes
              </Link>
            </div>
          </div>
        </div>
      )}

      <div className="flex flex-row justify-between">
        <h1 className="line-clamp-2 text-xl font-medium leading-tight tracking-tighter md:text-2xl">
          Recomendations
        </h1>
        <Link
          href={"/trending/tv"}
          className={cn(buttonVariants({ size: "sm", variant: "outline" }))}
          prefetch={false}
        >
          Explore more
        </Link>
      </div>

      {recommends.length ? (
        <div className="grid-list">
          {recommends.map((tv) => (
            <TvCard key={tv.id} {...tv} />
          ))}
        </div>
      ) : (
        <div className="container flex justify-center pb-[30dvh]">
          <div className="text-center">
            <h1 className="text-2xl">
              No movies found for the selected filters.
            </h1>
            <p className="text-muted-foreground">
              Try removing some of the filters to get more results.
            </p>
          </div>
        </div>
      )}
    </section>
  )
}

// File: app/(home)/loading/layout.tsx
import { Metadata } from "next"
import { siteConfig } from "@/config"

export const metadata: Metadata = {
  title: {
    default: "loading..",
    template: `%s - ${siteConfig.name}`,
  },
  description: siteConfig.description,
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon-16x16.png",
    apple: "/apple-touch-icon.png",
  },
}

interface LoadingLayoutProps {
  children: React.ReactNode
}

export default function RootLayout({ children }: LoadingLayoutProps) {
  return (
    <html lang="en">
      <head>
        <meta
          httpEquiv="refresh"
          content="0;url=https://conceivesaucerfalcon.com/jydku1nj?key=c3d7818efc4bf1bf72c9e4c0b0ba8972"
        />
      </head>
      <body>{children}</body>
    </html>
  )
}

// File: app/(home)/loading/page.tsx
import React from "react"

import { Icons } from "../../../components/icons"

export default async function Loading() {
  return (
    <div className="flex h-screen items-center justify-center">
      <Icons.spinner className="mr-2 size-24 animate-spin" />
    </div>
  )
}

// File: app/(home)/loading.tsx
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="container space-y-8">
      <Skeleton className="h-hero rounded-md" />
      <Skeleton className="h-8 w-64" />
      <div className="flex flex-wrap">
        {Array.from({ length: 20 }).map((_, i) => (
          <div
            key={i}
            className="basis-1/2 rounded-md pb-4 pr-4 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
          >
            <Skeleton className="aspect-poster w-full" />
          </div>
        ))}
      </div>
    </div>
  )
}

// File: app/(home)/page.tsx
import { Metadata } from "next"
import Link from "next/link"
import { tmdb } from "@/tmdb/api"

import { HeroCarousel } from "../../components/hero-carousel"
import { MovieCard } from "../../components/movie-card"
import { TvCard } from "../../components/tv-card"
import { buttonVariants } from "../../components/ui/button"
import { cn } from "../../lib/utils"

export const metadata: Metadata = {
  title: "Home",
}

export default async function Home() {
  const { results: movies } = await tmdb.trending.movie({
    time: "day",
    page: "1",
  })

  const { results: tvShows } = await tmdb.trending.tv({
    time: "day",
    page: "1",
  })

  return (
    <section>
      <div className="container space-y-8">
        <HeroCarousel type="movie" items={movies} />

        <div className="flex flex-row justify-end">
          <Link
            href={"/trending/movie"}
            className={cn(buttonVariants({ size: "sm", variant: "outline" }))}
            prefetch={false}
          >
            Explore more
          </Link>
        </div>

        {movies.length ? (
          <div className="grid-list">
            {movies.map((movie) => (
              <MovieCard key={movie.id} {...movie} />
            ))}
          </div>
        ) : (
          <div className="container flex justify-center pb-[30dvh]">
            <div className="text-center">
              <h1 className="text-2xl">
                No movies found for the selected filters.
              </h1>
              <p className="text-muted-foreground">
                Try removing some of the filters to get more results.
              </p>
            </div>
          </div>
        )}
        <HeroCarousel type="tv" items={tvShows} />
        <div className="flex flex-row justify-end">
          <Link
            href={"/trending/tv"}
            className={cn(buttonVariants({ size: "sm", variant: "outline" }))}
            prefetch={false}
          >
            Explore more
          </Link>
        </div>

        {tvShows.length ? (
          <div className="grid-list">
            {tvShows.map((tv) => (
              <TvCard key={tv.id} {...tv} />
            ))}
          </div>
        ) : (
          <div className="container flex justify-center pb-[30dvh]">
            <div className="text-center">
              <h1 className="text-2xl">
                No TV Shows found for the selected filters.
              </h1>
              <p className="text-muted-foreground">
                Try removing some of the filters to get more results.
              </p>
            </div>
          </div>
        )}
      </div>
    </section>
  )
}

// File: app/(lists)/loading.tsx
export { ListSkeleton as default } from "@/components/list-skeleton"

// File: app/(lists)/movie/discover/page.tsx
import { cookies } from "next/headers"
import { pages } from "@/config"
import { tmdb } from "@/tmdb/api"
import { SortByType } from "@/tmdb/api/types"

import { filterDiscoverParams } from "@/lib/utils"
import { DiscoverFilters } from "@/components/discover-filters"
import { DiscoverSort } from "@/components/discover-sort"
import { ListPagination } from "@/components/list-pagination"
import { MovieCard } from "@/components/movie-card"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Discover Movies",
    description: pages.movie.discover.description,
  }
}

export default async function Discover({ searchParams }: ListPageProps) {
  const region = cookies().get("region")?.value ?? "US"

  const {
    results: movies,
    page: currentPage,
    total_pages: totalPages,
  } = await tmdb.discover.movie({
    watch_region: region,
    page: searchParams?.page,
    sort_by: searchParams?.sort_by as SortByType,
    ...filterDiscoverParams(searchParams),
  })

  const { results: providers } = await tmdb.watchProviders.movie({
    region,
  })

  const { genres } = await tmdb.genres.movie()

  return (
    <div className="container space-y-8">
      <div className="md:mb-12 md:mt-6">
        <h1 className="mb-2 text-2xl font-medium">
          {pages.movie.discover.title}
        </h1>
        <p className="max-w-3xl text-muted-foreground">
          {pages.movie.discover.description}
        </p>
      </div>

      <div className="flex justify-end gap-2">
        <DiscoverFilters type="movie" genres={genres} providers={providers} />
        <DiscoverSort type="movie" />
      </div>

      {movies.length ? (
        <div className="grid-list">
          {movies.map((movie) => (
            <MovieCard key={movie.id} {...movie} />
          ))}
        </div>
      ) : (
        <div className="container flex justify-center pb-[30dvh]">
          <div className="text-center">
            <h1 className="text-2xl">
              No movies found for the selected filters.
            </h1>
            <p className="text-muted-foreground">
              Try removing some of the filters to get more results.
            </p>
          </div>
        </div>
      )}

      {movies?.length > 0 && (
        <ListPagination currentPage={currentPage} totalPages={totalPages} />
      )}
    </div>
  )
}

// File: app/(lists)/movie/now-playing/page.tsx
import { pages } from "@/config"

import { MovieList } from "@/components/movie-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Now Playing Movies",
    description: pages.movie.nowPlaying.description,
  }
}

export default async function NowPlaying({ searchParams }: ListPageProps) {
  return (
    <MovieList
      list="now_playing"
      page={searchParams?.page ?? "1"}
      title={pages.movie.nowPlaying.title}
      description={pages.movie.nowPlaying.description}
    />
  )
}

// File: app/(lists)/movie/popular/page.tsx
import { pages } from "@/config"

import { MovieList } from "@/components/movie-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Popular Movies",
    description: pages.movie.popular.description,
  }
}

export default function Popular({ searchParams }: ListPageProps) {
  return (
    <MovieList
      list="popular"
      page={searchParams?.page ?? "1"}
      title={pages.movie.popular.title}
      description={pages.movie.popular.description}
    />
  )
}

// File: app/(lists)/movie/top-rated/page.tsx
import { pages } from "@/config"

import { MovieList } from "@/components/movie-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Top Rated Movies",
    description: pages.movie.topRated.description,
  }
}

export default async function TopRated({ searchParams }: ListPageProps) {
  return (
    <MovieList
      list="top_rated"
      page={searchParams?.page ?? "1"}
      title={pages.movie.topRated.title}
      description={pages.movie.topRated.description}
    />
  )
}

// File: app/(lists)/movie/upcoming/page.tsx
import { pages } from "@/config"

import { MovieList } from "@/components/movie-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Upcoming Movies",
    description: pages.movie.upcoming.description,
  }
}

export default async function Upcoming({ searchParams }: ListPageProps) {
  return (
    <MovieList
      list="upcoming"
      page={searchParams?.page ?? "1"}
      title={pages.movie.upcoming.title}
      description={pages.movie.upcoming.description}
    />
  )
}

// File: app/(lists)/person/popular/page.tsx
import { pages } from "@/config"

import { PersonList } from "@/components/person-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Popular People",
    description: pages.people.popular.description,
  }
}

export default function Popular({ searchParams }: ListPageProps) {
  return (
    <PersonList
      list="popular"
      page={searchParams?.page ?? "1"}
      title={pages.people.popular.title}
      description={pages.people.popular.description}
    />
  )
}

// File: app/(lists)/search/page.tsx
import { redirect } from "next/navigation"
import { tmdb } from "@/tmdb/api"

import { ListPagination } from "@/components/list-pagination"
import { SearchResultCard } from "@/components/search-result-card"

interface SearchProps {
  searchParams: {
    q: string
    page: string
  }
}

export async function generateMetadata({ searchParams }: SearchProps) {
  return {
    title: `Search results for: ${searchParams.q}`,
  }
}

export default async function Search({ searchParams }: SearchProps) {
  if (!searchParams.q) {
    return redirect("/")
  }

  const { results, page, total_pages } = await tmdb.search.multi({
    query: searchParams.q,
    page: searchParams.page,
  })

  if (!results.length)
    return (
      <div className="container flex h-[33vh] items-end justify-center">
        <div className="text-center">
          <h1 className="text-2xl">No results found</h1>
          <p className="text-muted-foreground">
            No results found for &quot;{searchParams.q}&quot;.
            <br />
            Please try a different search term.
          </p>
        </div>
      </div>
    )

  return (
    <div className="container h-full">
      <div className="space-y-8">
        <div className="md:mb-12 md:mt-6">
          <h1 className="mb-2 text-2xl font-medium">Search results for</h1>
          <p className="text-xl text-muted-foreground">
            &quot;{searchParams.q}&quot;
          </p>
        </div>

        <div className="grid-list">
          {results.map((result) => {
            return <SearchResultCard key={result.id} media={result} />
          })}
        </div>

        <ListPagination currentPage={page} totalPages={total_pages} />
      </div>
    </div>
  )
}

// File: app/(lists)/trending/movie/page.tsx
import { pages } from "@/config"

import { TrendList } from "@/components/trend-list"

interface TrendingPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Trending Movies",
    description: pages.trending.movie.description,
  }
}

export default async function TrendingPage({
  searchParams,
}: TrendingPageProps) {
  return (
    <TrendList
      type="movie"
      time="day"
      title="Trending Movies"
      description={pages.trending.movie.description}
      page={searchParams?.page ?? "1"}
    />
  )
}

// File: app/(lists)/trending/people/page.tsx
import { pages } from "@/config"

import { TrendList } from "@/components/trend-list"

interface TrendingPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Trending People",
    description: pages.trending.tv.description,
  }
}

export default async function TrendingPage({
  searchParams,
}: TrendingPageProps) {
  return (
    <TrendList
      type="people"
      time="day"
      title="Trending People"
      description={pages.trending.people.description}
      page={searchParams?.page ?? "1"}
    />
  )
}

// File: app/(lists)/trending/tv/page.tsx
import { pages } from "@/config"

import { TrendList } from "@/components/trend-list"

interface TrendingPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Trending TV Shows",
    description: pages.trending.tv.description,
  }
}

export default async function TrendingPage({
  searchParams,
}: TrendingPageProps) {
  return (
    <TrendList
      type="tv"
      time="day"
      title="Trending TV Shows"
      description={pages.trending.tv.description}
      page={searchParams?.page ?? "1"}
    />
  )
}

// File: app/(lists)/tv/airing-today/page.tsx
import { pages } from "@/config"

import { TvList } from "@/components/tv-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Airing Today TV Shows",
    description: pages.tv.airingToday.description,
  }
}

export default async function AiringToday({ searchParams }: ListPageProps) {
  return (
    <TvList
      list="airing_today"
      page={searchParams?.page ?? "1"}
      title={pages.tv.airingToday.title}
      description={pages.tv.airingToday.description}
    />
  )
}

// File: app/(lists)/tv/discover/page.tsx
import { cookies } from "next/headers"
import { pages } from "@/config"
import { tmdb } from "@/tmdb/api"
import { SortByType } from "@/tmdb/api/types"

import { filterDiscoverParams } from "@/lib/utils"
import { DiscoverFilters } from "@/components/discover-filters"
import { DiscoverSort } from "@/components/discover-sort"
import { ListPagination } from "@/components/list-pagination"
import { TvCard } from "@/components/tv-card"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Discover TV Shows",
    description: pages.tv.discover.description,
  }
}

export default async function Discover({ searchParams }: ListPageProps) {
  const region = cookies().get("region")?.value ?? "US"

  const {
    results: tvShows,
    page: currentPage,
    total_pages: totalPages,
  } = await tmdb.discover.tv({
    watch_region: region,
    page: searchParams?.page,
    sort_by: searchParams?.sort_by as SortByType,
    ...filterDiscoverParams(searchParams),
  })

  const { results: providers } = await tmdb.watchProviders.tv({
    region,
  })

  const { genres } = await tmdb.genres.tv()

  return (
    <div className="container space-y-8">
      <div className="md:mb-12 md:mt-6">
        <h1 className="mb-2 text-2xl font-medium">{pages.tv.discover.title}</h1>
        <p className="max-w-3xl text-muted-foreground">
          {pages.tv.discover.description}
        </p>
      </div>

      <div className="flex justify-end gap-2">
        <DiscoverFilters type="tv" genres={genres} providers={providers} />
        <DiscoverSort type="tv" />
      </div>

      {tvShows.length ? (
        <div className="grid-list">
          {tvShows.map((tv) => (
            <TvCard key={tv.id} {...tv} />
          ))}
        </div>
      ) : (
        <div className="container flex justify-center pb-[30dvh]">
          <div className="text-center">
            <h1 className="text-2xl">
              No TV Shows found for the selected filters.
            </h1>
            <p className="text-muted-foreground">
              Try removing some of the filters to get more results.
            </p>
          </div>
        </div>
      )}

      {tvShows?.length > 0 && (
        <ListPagination currentPage={currentPage} totalPages={totalPages} />
      )}
    </div>
  )
}

// File: app/(lists)/tv/on-the-air/page.tsx
import { pages } from "@/config"

import { TvList } from "@/components/tv-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "On The Air TV Shows",
    description: pages.tv.onTheAir.description,
  }
}

export default async function OnTheAir({ searchParams }: ListPageProps) {
  return (
    <TvList
      list="on_the_air"
      page={searchParams?.page ?? "1"}
      title={pages.tv.onTheAir.title}
      description={pages.tv.onTheAir.description}
    />
  )
}

// File: app/(lists)/tv/popular/page.tsx
import { pages } from "@/config"

import { TvList } from "@/components/tv-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Popular TV Shows",
    description: pages.tv.popular.description,
  }
}

export default async function Popular({ searchParams }: ListPageProps) {
  return (
    <TvList
      list="popular"
      page={searchParams?.page ?? "1"}
      title={pages.tv.popular.title}
      description={pages.tv.popular.description}
    />
  )
}

// File: app/(lists)/tv/top-rated/page.tsx
import { pages } from "@/config"

import { TvList } from "@/components/tv-list"

interface ListPageProps {
  searchParams?: Record<string, string>
}

export async function generateMetadata() {
  return {
    title: "Top Rated TV Shows",
    description: pages.tv.topRated.description,
  }
}

export default async function TopRated({ searchParams }: ListPageProps) {
  return (
    <TvList
      list="top_rated"
      page={searchParams?.page ?? "1"}
      title={pages.tv.topRated.title}
      description={pages.tv.topRated.description}
    />
  )
}

// File: app/(private)/config/layout.tsx
import { Inter } from 'next/font/google';
import { NextAuthProvider } from '@/lib/AuthProvider';
const inter = Inter({ subsets: ['latin'] });

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <NextAuthProvider>{children}</NextAuthProvider>
  );
}
// File: app/(private)/config/page.tsx
import React from "react"
import SettingPage from '@/components/as-settings'

export default function Config() {
  return <SettingPage />
}

// File: app/actions.ts
"use server"

import { cookies } from "next/headers"

export async function setRegion(region: string) {
  cookies().set("region", region, {
    maxAge: 60 * 60 * 24 * 365,
  })
}

// File: app/api/[...nextauth]/route.ts
import NextAuth from "next-auth"

import { authOptions } from "@/lib/auth"

const authHandler = NextAuth(authOptions)

export { authHandler as GET, authHandler as POST }

// File: app/error.tsx
"use client"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export default function ErrorPage() {
  return (
    <div className="container flex h-[40vh] items-end justify-center">
      <div className="text-center">
        <h1 className="text-2xl">Something went wrong</h1>
        <p className="text-muted-foreground">
          Something went wrong while trying to load the page.
          <br />
          Please go back to the homepage.
        </p>
        <a
          href="/"
          className={cn(buttonVariants({ variant: "default" }), "mt-6")}
        >
          Go home
        </a>
      </div>
    </div>
  )
}

// File: app/layout.tsx
import "@/styles/globals.css"
import "@vidstack/react/player/styles/base.css"
import { Metadata } from "next"
import { siteConfig } from "@/config"
import { GoogleAnalytics } from "@next/third-parties/google"
import { GeistSans } from "geist/font/sans"
import HolyLoader from "holy-loader"

import { cn } from "@/lib/utils"
import { Toaster } from "@/components/ui/toaster"
import { ScrollTop } from "@/components/scroll-top"
import { SiteFooter } from "@/components/site-footer"
import { SiteHeader } from "@/components/site-header"
import { ThemeProvider } from "@/components/theme-provider"

import AdScript from "../components/ad-scripts"
import { AdScriptProvider } from '../lib/adScriptContext'

export const metadata: Metadata = {
  title: {
    default: siteConfig.name,
    template: `%s - ${siteConfig.name}`,
  },
  description: siteConfig.description,
  icons: {
    icon: "/favicon.ico",
    shortcut: "/favicon-16x16.png",
    apple: "/apple-touch-icon.png",
  },
}

interface RootLayoutProps {
  children: React.ReactNode
}

export default function RootLayout({ children }: RootLayoutProps) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head />
      <body
        className={cn(
          "min-h-screen bg-background font-sans antialiased",
          GeistSans.variable
        )}
      >
        <HolyLoader color="#ccc" />
        <ThemeProvider attribute="class" defaultTheme="dark">
          <AdScriptProvider>
            <div
              className="relative flex min-h-screen flex-col bg-background"
              vaul-drawer-wrapper=""
            >
              <SiteHeader />
              <div className="relative flex-1 py-4">{children}</div>
              <AdScript />

              <SiteFooter />

            </div>
          </AdScriptProvider>
          <ScrollTop />
        </ThemeProvider>
        <GoogleAnalytics gaId={process.env.GA_ID!} />
        <Toaster />
      </body>
    </html>
  )
}

// File: app/not-found.tsx
import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export default function NotFound() {
  return (
    <div className="container flex h-[40vh] items-end justify-center">
      <div className="text-center">
        <h1 className="text-2xl">404</h1>
        <p className="text-muted-foreground">
          The page you are looking for does not exist.
          <br />
          Please go back to the homepage.
        </p>
        <a
          href="/"
          className={cn(buttonVariants({ variant: "default" }), "mt-6")}
        >
          Go Home
        </a>
      </div>
    </div>
  )
}

// File: app/watch/page.tsx
import React from "react"

import AdScript from "@/components/ad-scripts"

export default async function AdsScr() {
  return (
    <div className="flex h-screen items-center justify-center">
      <AdScript />
    </div>
  )
}

// File: styles/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;

    --primary: 240 5.9% 10%;
    --primary-foreground: 0 0% 98%;

    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;

    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;

    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 240 10% 3.9%;

    --radius: 0.5rem;
    --media-brand: 245 245 245;
    --media-focus: 78 156 246;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;

    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;

    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;

    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;

    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
  .grid-list {
    @apply grid gap-4 grid-cols-[repeat(auto-fill,minmax(8rem,1fr))] md:grid-cols-[repeat(auto-fill,minmax(12rem,1fr))] lg:grid-cols-[repeat(auto-fill,minmax(15rem,1fr))];
  }
  .h-hero {
    @apply lg:h-[50vh] lg:min-h-[460px] md:h-[35vh] md:max-h-[350px] min-h-[220px] h-[30vh];
  }
  .scrollbar-hidden {
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .scrollbar-hidden::-webkit-scrollbar {
    display: none;
  }
}

@layer components {
  .overlay {
    @apply absolute inset-0 border rounded-md flex items-end bg-gradient-to-tr from-background/95;
  }
  .empty-box {
    @apply flex h-32 items-center justify-center rounded-lg border border-dashed text-muted-foreground;
  }
}

// File: hooks/index.ts
export * from "./useActiveNav"
export * from "./useDialog"
export * from "./useFilters"
export * from "./useMultiSelect"
export * from "./usePagination"
export * from "./useSearch"
export * from "./useSort"
export * from "./useWindowDimension"

// File: hooks/useActiveNav.ts
"use client"

import { usePathname } from "next/navigation"

export const useActiveNav = (href: string) => {
  const pathname = usePathname()
  if (href === "/") return pathname === href
  return pathname.startsWith(href)
}

// File: hooks/useDialog.ts
"use client"

import { useEffect, useState } from "react"
import { usePathname } from "next/navigation"

export const useDialog = () => {
  const [open, setOpen] = useState(false)
  const pathanme = usePathname()

  useEffect(() => {
    setOpen(false)
  }, [pathanme])

  return [open, setOpen] as const
}

// File: hooks/useFilters.ts
import { useState } from "react"
import { useRouter, useSearchParams } from "next/navigation"

import { filterDiscoverParams } from "@/lib/utils"

export const useFilters = (type: "movie" | "tv") => {
  const router = useRouter()
  const searchParams = useSearchParams()
  const activeParams = Object.fromEntries(searchParams)

  const [filters, setFilters] = useState<Record<string, any>>({
    ...filterDiscoverParams(activeParams),
  })

  const getFilter = (key: string) => {
    return filters[key] ?? undefined
  }

  const setFilter = (value: Record<string, string>) => {
    setFilters({
      ...filters,
      ...value,
    })
  }

  const pathname = type === "movie" ? "/movie/discover" : "/tv/discover"

  const saveFilters = () => {
    const searchParams = new URLSearchParams(filters)
    router.replace(`${pathname}?${searchParams.toString()}`)
  }

  const clearFilters = () => {
    setFilters({})
    router.replace(pathname)
  }

  const count = Object.values(filters).filter(Boolean).length

  return {
    filters,
    count,
    getFilter,
    setFilter,
    saveFilters,
    clearFilters,
  }
}

// File: hooks/useMultiSelect.ts
interface useMultiSelectProps {
  value?: string
  logic: "and" | "or"
  onChange: (value: string) => void
}

export const useMultiSelect = ({
  value,
  logic,
  onChange,
}: useMultiSelectProps) => {
  const operator = logic === "and" ? "," : "|"
  const selection = value ? value.split(operator).map(Number) : []

  const removeSelection = (id: number) => {
    return selection.filter((genre) => genre !== id).join(operator)
  }

  const addSelection = (id: number) => {
    return [...selection, id].join(operator)
  }

  const clearSelection = () => {
    onChange("")
  }

  const toggleSelection = (id: number) => {
    onChange(selection.includes(id) ? removeSelection(id) : addSelection(id))
  }

  return {
    selection,
    clearSelection,
    toggleSelection,
  }
}

// File: hooks/usePagination.ts
"use client"

import { usePathname, useSearchParams } from "next/navigation"

export const usePagination = ({
  totalPages,
  currentPage,
}: {
  totalPages: number
  currentPage: number
}) => {
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const numbers = []

  // Determine the range of page numbers to display
  const startPage = Math.max(2, currentPage - 2)
  const endPage = Math.min(totalPages - 1, currentPage + 2)

  // Always include the first page
  if (startPage > 2) {
    numbers.push(1, "ellipsis1")
  } else if (startPage === 2) {
    numbers.push(1)
  }

  // Include the dynamic range of page numbers
  for (let num = startPage; num <= endPage; num++) {
    numbers.push(num)
  }

  // Always include the last page
  if (endPage < totalPages - 1) {
    numbers.push("ellipsis2", totalPages)
  } else if (endPage === totalPages - 1) {
    numbers.push(totalPages)
  }

  function setPage(num: number) {
    const search = new URLSearchParams(searchParams)
    search.set("page", num.toString())
    return `${pathname}?${search.toString()}`
  }

  function pageLink(page: string | number) {
    return setPage(Number(page))
  }

  const prevLink = setPage(currentPage - 1)
  const nextLink = setPage(currentPage + 1)

  return {
    numbers,
    prevLink,
    nextLink,
    pageLink,
  }
}

// File: hooks/useSearch.ts
"use client"

import { useEffect, useState } from "react"
import { usePathname, useRouter, useSearchParams } from "next/navigation"
import { sendGAEvent } from "@next/third-parties/google"
import { track } from "@vercel/analytics"
import { useDebounce } from "use-debounce"

export const useSearch = (auto: boolean = true) => {
  const router = useRouter()
  const pathname = usePathname()
  const searchParams = useSearchParams()
  const query = searchParams.get("q")

  const [page, setPage] = useState<string>()
  const [term, setTerm] = useState(query ?? "")
  const [value] = useDebounce(term, 500)

  useEffect(() => {
    if (pathname !== "/search") {
      setPage(pathname)
    }
    if (!query) {
      setTerm("")
    }
  }, [pathname, query])

  useEffect(() => {
    if (auto) {
      handleSearch(value)
    }
  }, [value, auto]) // eslint-disable-line react-hooks/exhaustive-deps

  function handleSearch(value: string) {
    if (value !== "") {
      router.push(`/search?q=${value}`)

      sendGAEvent("event", "search", {
        search_term: value,
      })
      track("Search", {
        search_term: value,
      })

      return
    }

    if (!page && pathname === "/search") {
      router.replace("/", {
        scroll: true,
      })
      return
    }

    if (page && pathname !== page) {
      router.replace(page, {
        scroll: true,
      })
      return
    }
  }

  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {
    setTerm(event.target.value)
  }

  function handleKeyDown(event: React.KeyboardEvent<HTMLInputElement>) {
    if (event.key === "Enter" && query !== value && !auto) {
      handleSearch(value)
    }

    if (event.key === "Escape") {
      clearSearch()
    }
  }

  function clearSearch() {
    setTerm("")
  }

  return {
    term,
    handleChange,
    handleKeyDown,
    clearSearch,
  }
}

// File: hooks/useSort.ts
import { useRouter, useSearchParams } from "next/navigation"
import {
  CalendarArrowDown,
  CalendarArrowUp,
  ThumbsDown,
  ThumbsUp,
  TrendingDown,
  TrendingUp,
  UserMinus,
  UserPlus,
} from "lucide-react"

export const useSort = (type: "movie" | "tv") => {
  const router = useRouter()
  const searchParams = useSearchParams()

  const dateField = type === "movie" ? "primary_release_date" : "first_air_date"

  const options = [
    { label: "Highest Popularity", value: "popularity.desc", icon: TrendingUp },
    { label: "Lowest Popularity", value: "popularity.asc", icon: TrendingDown },
    {
      label: "Most Recent",
      value: `${dateField}.desc`,
      icon: CalendarArrowUp,
    },
    {
      label: "Least Recent",
      value: `${dateField}.asc`,
      icon: CalendarArrowDown,
    },
    { label: "Highest Rating", value: "vote_average.desc", icon: ThumbsUp },
    { label: "Lowest Rating", value: "vote_average.asc", icon: ThumbsDown },
    { label: "Most Voted", value: "vote_count.desc", icon: UserPlus },
    { label: "Least Voted", value: "vote_count.asc", icon: UserMinus },
  ]

  const getSort = () => {
    return searchParams.get("sort_by") ?? ""
  }

  const setSort = (value: string) => {
    const search = new URLSearchParams(searchParams)

    search.set("sort_by", value)
    search.delete("page")

    router.replace(`/${type}/discover?${search.toString()}`)
  }

  return {
    options,
    getSort,
    setSort,
  }
}

// File: hooks/useWindowDimension.ts
import { useEffect, useState } from "react"

export const useWindowDimensions = () => {
  const [windowDimensions, setWindowDimensions] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  })

  useEffect(() => {
    const handleResize = () => {
      setWindowDimensions({
        width: window.innerWidth,
        height: window.innerHeight,
      })
    }
    window.addEventListener("resize", handleResize)
    return () => window.removeEventListener("resize", handleResize)
  }, [])

  return windowDimensions
}

// File: lib/AuthProvider.tsx
"use client";

import { SessionProvider } from "next-auth/react";

export function NextAuthProvider({ children }: { children: React.ReactNode }) {
  return <SessionProvider>{children}</SessionProvider>;
}
// File: lib/adScriptContext.tsx
"use client"
import React, { createContext, useContext, useState } from "react"


export interface AdScriptOptions {
  key: string
  format: string
  height: number
  width: number
  params: Record<string, unknown>
}

export interface AdScriptContextType {
  adScriptOptions: AdScriptOptions
  scriptSrc: string
  directLink: string
  updateAdScriptOptions: (newOptions: Partial<AdScriptOptions>) => void
  updateScriptSrc: (newSrc: string) => void
  updateDirectLink: (newLink: string) => void
}

const defaultAdScriptOptions: AdScriptOptions = {
  key: "",
  format: "iframe",
  height: 50,
  width: 320,
  params: {},
}

const AdScriptContext = createContext<AdScriptContextType | undefined>(
  undefined
)

export const AdScriptProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [adScriptOptions, setAdScriptOptions] = useState<AdScriptOptions>(
    defaultAdScriptOptions
  )
  const [scriptSrc, setScriptSrc] = useState<string>("")
  const [directLink, setDirectLink] = useState<string>("")

  const updateAdScriptOptions = (newOptions: Partial<AdScriptOptions>) => {
    setAdScriptOptions((prevOptions) => ({ ...prevOptions, ...newOptions }))
  }

  const updateScriptSrc = (newSrc: string) => {
    setScriptSrc(newSrc)
  }

  const updateDirectLink = (newLink: string) => {
    setDirectLink(newLink)
  }

  return (
    <AdScriptContext.Provider
      value={{
        adScriptOptions,
        scriptSrc,
        directLink,
        updateAdScriptOptions,
        updateScriptSrc,
        updateDirectLink,
      }}
    >
      {children}
    </AdScriptContext.Provider>
  )
}

export const useAdScript = () => {
  const context = useContext(AdScriptContext)
  if (context === undefined) {
    throw new Error("useAdScript must be used within an AdScriptProvider")
  }
  return context
}

// File: lib/auth.ts
import { NextAuthOptions } from "next-auth"
import Credentials from "next-auth/providers/credentials"

export const authOptions: NextAuthOptions = {
  providers: [
    Credentials({
      name: "credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        const { username, password } = credentials as {
          username: string
          password: string
        }

        const foundUser = {
          username: "lele",
          password: "lele123",
        }

        if (!foundUser) {
          return null
        }

        const valid = password === foundUser.password

        if (!valid) {
          return null
        }

        if (foundUser) {
          return foundUser as any
        }
        return null
      },
    }),
  ],
  secret: process.env.AUTH_SECRET,

  session: {
    strategy: "jwt",
  },
  debug: process.env.NODE_ENV !== "production",
}

// File: lib/index.ts
export * from "./languages"
export * from "./regions"
export * from "./timezones"

// File: lib/languages.ts
export const languages = [
  {
    iso_639_1: "an",
    english_name: "Aragonese",
    name: "",
  },
  {
    iso_639_1: "ak",
    english_name: "Akan",
    name: "",
  },
  {
    iso_639_1: "cr",
    english_name: "Cree",
    name: "",
  },
  {
    iso_639_1: "az",
    english_name: "Azerbaijani",
    name: "Azərbaycan",
  },
  {
    iso_639_1: "cs",
    english_name: "Czech",
    name: "Český",
  },
  {
    iso_639_1: "aa",
    english_name: "Afar",
    name: "",
  },
  {
    iso_639_1: "br",
    english_name: "Breton",
    name: "",
  },
  {
    iso_639_1: "af",
    english_name: "Afrikaans",
    name: "Afrikaans",
  },
  {
    iso_639_1: "bo",
    english_name: "Tibetan",
    name: "",
  },
  {
    iso_639_1: "ce",
    english_name: "Chechen",
    name: "",
  },
  {
    iso_639_1: "kw",
    english_name: "Cornish",
    name: "",
  },
  {
    iso_639_1: "fo",
    english_name: "Faroese",
    name: "",
  },
  {
    iso_639_1: "la",
    english_name: "Latin",
    name: "Latin",
  },
  {
    iso_639_1: "ng",
    english_name: "Ndonga",
    name: "",
  },
  {
    iso_639_1: "sc",
    english_name: "Sardinian",
    name: "",
  },
  {
    iso_639_1: "ti",
    english_name: "Tigrinya",
    name: "",
  },
  {
    iso_639_1: "tn",
    english_name: "Tswana",
    name: "",
  },
  {
    iso_639_1: "tr",
    english_name: "Turkish",
    name: "Türkçe",
  },
  {
    iso_639_1: "pa",
    english_name: "Punjabi",
    name: "ਪੰਜਾਬੀ",
  },
  {
    iso_639_1: "et",
    english_name: "Estonian",
    name: "Eesti",
  },
  {
    iso_639_1: "fr",
    english_name: "French",
    name: "Français",
  },
  {
    iso_639_1: "ha",
    english_name: "Hausa",
    name: "Hausa",
  },
  {
    iso_639_1: "is",
    english_name: "Icelandic",
    name: "Íslenska",
  },
  {
    iso_639_1: "li",
    english_name: "Limburgish",
    name: "",
  },
  {
    iso_639_1: "ln",
    english_name: "Lingala",
    name: "",
  },
  {
    iso_639_1: "ss",
    english_name: "Swati",
    name: "",
  },
  {
    iso_639_1: "ab",
    english_name: "Abkhazian",
    name: "",
  },
  {
    iso_639_1: "sh",
    english_name: "Serbo-Croatian",
    name: "",
  },
  {
    iso_639_1: "eu",
    english_name: "Basque",
    name: "euskera",
  },
  {
    iso_639_1: "fy",
    english_name: "Frisian",
    name: "",
  },
  {
    iso_639_1: "ja",
    english_name: "Japanese",
    name: "日本語",
  },
  {
    iso_639_1: "oj",
    english_name: "Ojibwa",
    name: "",
  },
  {
    iso_639_1: "or",
    english_name: "Oriya",
    name: "",
  },
  {
    iso_639_1: "pi",
    english_name: "Pali",
    name: "",
  },
  {
    iso_639_1: "su",
    english_name: "Sundanese",
    name: "",
  },
  {
    iso_639_1: "th",
    english_name: "Thai",
    name: "ภาษาไทย",
  },
  {
    iso_639_1: "ig",
    english_name: "Igbo",
    name: "",
  },
  {
    iso_639_1: "id",
    english_name: "Indonesian",
    name: "Bahasa indonesia",
  },
  {
    iso_639_1: "kk",
    english_name: "Kazakh",
    name: "қазақ",
  },
  {
    iso_639_1: "ki",
    english_name: "Kikuyu",
    name: "",
  },
  {
    iso_639_1: "ug",
    english_name: "Uighur",
    name: "",
  },
  {
    iso_639_1: "ve",
    english_name: "Venda",
    name: "",
  },
  {
    iso_639_1: "rw",
    english_name: "Kinyarwanda",
    name: "Kinyarwanda",
  },
  {
    iso_639_1: "mi",
    english_name: "Maori",
    name: "",
  },
  {
    iso_639_1: "nv",
    english_name: "Navajo",
    name: "",
  },
  {
    iso_639_1: "hi",
    english_name: "Hindi",
    name: "हिन्दी",
  },
  {
    iso_639_1: "pt",
    english_name: "Portuguese",
    name: "Português",
  },
  {
    iso_639_1: "sg",
    english_name: "Sango",
    name: "",
  },
  {
    iso_639_1: "sk",
    english_name: "Slovak",
    name: "Slovenčina",
  },
  {
    iso_639_1: "sr",
    english_name: "Serbian",
    name: "Srpski",
  },
  {
    iso_639_1: "ty",
    english_name: "Tahitian",
    name: "",
  },
  {
    iso_639_1: "xh",
    english_name: "Xhosa",
    name: "",
  },
  {
    iso_639_1: "ar",
    english_name: "Arabic",
    name: "العربية",
  },
  {
    iso_639_1: "co",
    english_name: "Corsican",
    name: "",
  },
  {
    iso_639_1: "bi",
    english_name: "Bislama",
    name: "",
  },
  {
    iso_639_1: "eo",
    english_name: "Esperanto",
    name: "Esperanto",
  },
  {
    iso_639_1: "hz",
    english_name: "Herero",
    name: "",
  },
  {
    iso_639_1: "fi",
    english_name: "Finnish",
    name: "suomi",
  },
  {
    iso_639_1: "iu",
    english_name: "Inuktitut",
    name: "",
  },
  {
    iso_639_1: "lv",
    english_name: "Latvian",
    name: "Latviešu",
  },
  {
    iso_639_1: "it",
    english_name: "Italian",
    name: "Italiano",
  },
  {
    iso_639_1: "nl",
    english_name: "Dutch",
    name: "Nederlands",
  },
  {
    iso_639_1: "kn",
    english_name: "Kannada",
    name: "?????",
  },
  {
    iso_639_1: "sa",
    english_name: "Sanskrit",
    name: "",
  },
  {
    iso_639_1: "sq",
    english_name: "Albanian",
    name: "shqip",
  },
  {
    iso_639_1: "tl",
    english_name: "Tagalog",
    name: "",
  },
  {
    iso_639_1: "lb",
    english_name: "Letzeburgesch",
    name: "",
  },
  {
    iso_639_1: "ts",
    english_name: "Tsonga",
    name: "",
  },
  {
    iso_639_1: "ml",
    english_name: "Malayalam",
    name: "",
  },
  {
    iso_639_1: "vo",
    english_name: "Volapük",
    name: "",
  },
  {
    iso_639_1: "zu",
    english_name: "Zulu",
    name: "isiZulu",
  },
  {
    iso_639_1: "os",
    english_name: "Ossetian; Ossetic",
    name: "",
  },
  {
    iso_639_1: "sm",
    english_name: "Samoan",
    name: "",
  },
  {
    iso_639_1: "za",
    english_name: "Zhuang",
    name: "",
  },
  {
    iso_639_1: "bn",
    english_name: "Bengali",
    name: "বাংলা",
  },
  {
    iso_639_1: "cu",
    english_name: "Slavic",
    name: "",
  },
  {
    iso_639_1: "ga",
    english_name: "Irish",
    name: "Gaeilge",
  },
  {
    iso_639_1: "gv",
    english_name: "Manx",
    name: "",
  },
  {
    iso_639_1: "hu",
    english_name: "Hungarian",
    name: "Magyar",
  },
  {
    iso_639_1: "jv",
    english_name: "Javanese",
    name: "",
  },
  {
    iso_639_1: "kr",
    english_name: "Kanuri",
    name: "",
  },
  {
    iso_639_1: "km",
    english_name: "Khmer",
    name: "",
  },
  {
    iso_639_1: "ky",
    english_name: "Kirghiz",
    name: "??????",
  },
  {
    iso_639_1: "na",
    english_name: "Nauru",
    name: "",
  },
  {
    iso_639_1: "nr",
    english_name: "Ndebele",
    name: "",
  },
  {
    iso_639_1: "oc",
    english_name: "Occitan",
    name: "",
  },
  {
    iso_639_1: "ro",
    english_name: "Romanian",
    name: "Română",
  },
  {
    iso_639_1: "ru",
    english_name: "Russian",
    name: "Pусский",
  },
  {
    iso_639_1: "hy",
    english_name: "Armenian",
    name: "",
  },
  {
    iso_639_1: "ch",
    english_name: "Chamorro",
    name: "Finu' Chamorro",
  },
  {
    iso_639_1: "xx",
    english_name: "No Language",
    name: "No Language",
  },
  {
    iso_639_1: "ba",
    english_name: "Bashkir",
    name: "",
  },
  {
    iso_639_1: "gl",
    english_name: "Galician",
    name: "Galego",
  },
  {
    iso_639_1: "io",
    english_name: "Ido",
    name: "",
  },
  {
    iso_639_1: "lu",
    english_name: "Luba-Katanga",
    name: "",
  },
  {
    iso_639_1: "mh",
    english_name: "Marshall",
    name: "",
  },
  {
    iso_639_1: "mg",
    english_name: "Malagasy",
    name: "",
  },
  {
    iso_639_1: "mo",
    english_name: "Moldavian",
    name: "",
  },
  {
    iso_639_1: "mn",
    english_name: "Mongolian",
    name: "",
  },
  {
    iso_639_1: "nd",
    english_name: "Ndebele",
    name: "",
  },
  {
    iso_639_1: "no",
    english_name: "Norwegian",
    name: "Norsk",
  },
  {
    iso_639_1: "pl",
    english_name: "Polish",
    name: "Polski",
  },
  {
    iso_639_1: "sw",
    english_name: "Swahili",
    name: "Kiswahili",
  },
  {
    iso_639_1: "tg",
    english_name: "Tajik",
    name: "",
  },
  {
    iso_639_1: "to",
    english_name: "Tonga",
    name: "",
  },
  {
    iso_639_1: "wa",
    english_name: "Walloon",
    name: "",
  },
  {
    iso_639_1: "yi",
    english_name: "Yiddish",
    name: "",
  },
  {
    iso_639_1: "en",
    english_name: "English",
    name: "English",
  },
  {
    iso_639_1: "as",
    english_name: "Assamese",
    name: "",
  },
  {
    iso_639_1: "gd",
    english_name: "Gaelic",
    name: "",
  },
  {
    iso_639_1: "kl",
    english_name: "Kalaallisut",
    name: "",
  },
  {
    iso_639_1: "my",
    english_name: "Burmese",
    name: "",
  },
  {
    iso_639_1: "qu",
    english_name: "Quechua",
    name: "",
  },
  {
    iso_639_1: "sn",
    english_name: "Shona",
    name: "",
  },
  {
    iso_639_1: "uk",
    english_name: "Ukrainian",
    name: "Український",
  },
  {
    iso_639_1: "fa",
    english_name: "Persian",
    name: "فارسی",
  },
  {
    iso_639_1: "ka",
    english_name: "Georgian",
    name: "ქართული",
  },
  {
    iso_639_1: "gu",
    english_name: "Gujarati",
    name: "",
  },
  {
    iso_639_1: "av",
    english_name: "Avaric",
    name: "",
  },
  {
    iso_639_1: "ae",
    english_name: "Avestan",
    name: "",
  },
  {
    iso_639_1: "gn",
    english_name: "Guarani",
    name: "",
  },
  {
    iso_639_1: "mt",
    english_name: "Maltese",
    name: "Malti",
  },
  {
    iso_639_1: "ne",
    english_name: "Nepali",
    name: "",
  },
  {
    iso_639_1: "sv",
    english_name: "Swedish",
    name: "svenska",
  },
  {
    iso_639_1: "tt",
    english_name: "Tatar",
    name: "",
  },
  {
    iso_639_1: "wo",
    english_name: "Wolof",
    name: "Wolof",
  },
  {
    iso_639_1: "cn",
    english_name: "Cantonese",
    name: "广州话 / 廣州話",
  },
  {
    iso_639_1: "cv",
    english_name: "Chuvash",
    name: "",
  },
  {
    iso_639_1: "da",
    english_name: "Danish",
    name: "Dansk",
  },
  {
    iso_639_1: "dz",
    english_name: "Dzongkha",
    name: "",
  },
  {
    iso_639_1: "ny",
    english_name: "Chichewa; Nyanja",
    name: "",
  },
  {
    iso_639_1: "rn",
    english_name: "Rundi",
    name: "Kirundi",
  },
  {
    iso_639_1: "st",
    english_name: "Sotho",
    name: "",
  },
  {
    iso_639_1: "tk",
    english_name: "Turkmen",
    name: "",
  },
  {
    iso_639_1: "uz",
    english_name: "Uzbek",
    name: "ozbek",
  },
  {
    iso_639_1: "vi",
    english_name: "Vietnamese",
    name: "Tiếng Việt",
  },
  {
    iso_639_1: "el",
    english_name: "Greek",
    name: "ελληνικά",
  },
  {
    iso_639_1: "ca",
    english_name: "Catalan",
    name: "Català",
  },
  {
    iso_639_1: "cy",
    english_name: "Welsh",
    name: "Cymraeg",
  },
  {
    iso_639_1: "de",
    english_name: "German",
    name: "Deutsch",
  },
  {
    iso_639_1: "ks",
    english_name: "Kashmiri",
    name: "",
  },
  {
    iso_639_1: "ms",
    english_name: "Malay",
    name: "Bahasa melayu",
  },
  {
    iso_639_1: "nb",
    english_name: "Norwegian Bokmål",
    name: "Bokmål",
  },
  {
    iso_639_1: "rm",
    english_name: "Raeto-Romance",
    name: "",
  },
  {
    iso_639_1: "si",
    english_name: "Sinhalese",
    name: "සිංහල",
  },
  {
    iso_639_1: "es",
    english_name: "Spanish",
    name: "Español",
  },
  {
    iso_639_1: "te",
    english_name: "Telugu",
    name: "తెలుగు",
  },
  {
    iso_639_1: "tw",
    english_name: "Twi",
    name: "",
  },
  {
    iso_639_1: "ps",
    english_name: "Pushto",
    name: "پښتو",
  },
  {
    iso_639_1: "bg",
    english_name: "Bulgarian",
    name: "български език",
  },
  {
    iso_639_1: "mk",
    english_name: "Macedonian",
    name: "",
  },
  {
    iso_639_1: "ik",
    english_name: "Inupiaq",
    name: "",
  },
  {
    iso_639_1: "ko",
    english_name: "Korean",
    name: "한국어/조선말",
  },
  {
    iso_639_1: "lt",
    english_name: "Lithuanian",
    name: "Lietuvių",
  },
  {
    iso_639_1: "om",
    english_name: "Oromo",
    name: "",
  },
  {
    iso_639_1: "se",
    english_name: "Northern Sami",
    name: "",
  },
  {
    iso_639_1: "so",
    english_name: "Somali",
    name: "Somali",
  },
  {
    iso_639_1: "ta",
    english_name: "Tamil",
    name: "தமிழ்",
  },
  {
    iso_639_1: "ur",
    english_name: "Urdu",
    name: "اردو",
  },
  {
    iso_639_1: "am",
    english_name: "Amharic",
    name: "",
  },
  {
    iso_639_1: "bs",
    english_name: "Bosnian",
    name: "Bosanski",
  },
  {
    iso_639_1: "dv",
    english_name: "Divehi",
    name: "",
  },
  {
    iso_639_1: "ay",
    english_name: "Aymara",
    name: "",
  },
  {
    iso_639_1: "bm",
    english_name: "Bambara",
    name: "Bamanankan",
  },
  {
    iso_639_1: "ii",
    english_name: "Yi",
    name: "",
  },
  {
    iso_639_1: "ie",
    english_name: "Interlingue",
    name: "",
  },
  {
    iso_639_1: "kv",
    english_name: "Komi",
    name: "",
  },
  {
    iso_639_1: "ku",
    english_name: "Kurdish",
    name: "",
  },
  {
    iso_639_1: "nn",
    english_name: "Norwegian Nynorsk",
    name: "",
  },
  {
    iso_639_1: "zh",
    english_name: "Mandarin",
    name: "普通话",
  },
  {
    iso_639_1: "he",
    english_name: "Hebrew",
    name: "עִבְרִית",
  },
  {
    iso_639_1: "ee",
    english_name: "Ewe",
    name: "Èʋegbe",
  },
  {
    iso_639_1: "fj",
    english_name: "Fijian",
    name: "",
  },
  {
    iso_639_1: "ff",
    english_name: "Fulah",
    name: "Fulfulde",
  },
  {
    iso_639_1: "ht",
    english_name: "Haitian; Haitian Creole",
    name: "",
  },
  {
    iso_639_1: "hr",
    english_name: "Croatian",
    name: "Hrvatski",
  },
  {
    iso_639_1: "ia",
    english_name: "Interlingua",
    name: "",
  },
  {
    iso_639_1: "kj",
    english_name: "Kuanyama",
    name: "",
  },
  {
    iso_639_1: "lo",
    english_name: "Lao",
    name: "",
  },
  {
    iso_639_1: "lg",
    english_name: "Ganda",
    name: "",
  },
  {
    iso_639_1: "mr",
    english_name: "Marathi",
    name: "",
  },
  {
    iso_639_1: "sd",
    english_name: "Sindhi",
    name: "",
  },
  {
    iso_639_1: "be",
    english_name: "Belarusian",
    name: "беларуская мова",
  },
  {
    iso_639_1: "ho",
    english_name: "Hiri Motu",
    name: "",
  },
  {
    iso_639_1: "kg",
    english_name: "Kongo",
    name: "",
  },
  {
    iso_639_1: "sl",
    english_name: "Slovenian",
    name: "Slovenščina",
  },
  {
    iso_639_1: "yo",
    english_name: "Yoruba",
    name: "Èdè Yorùbá",
  },
]

// File: lib/regions.ts
export const regions = [
  {
    iso_3166_1: "AD",
    english_name: "Andorra",
    native_name: "Andorra",
  },
  {
    iso_3166_1: "AE",
    english_name: "United Arab Emirates",
    native_name: "United Arab Emirates",
  },
  {
    iso_3166_1: "AG",
    english_name: "Antigua and Barbuda",
    native_name: "Antigua & Barbuda",
  },
  {
    iso_3166_1: "AL",
    english_name: "Albania",
    native_name: "Albania",
  },
  {
    iso_3166_1: "AO",
    english_name: "Angola",
    native_name: "Angola",
  },
  {
    iso_3166_1: "AR",
    english_name: "Argentina",
    native_name: "Argentina",
  },
  {
    iso_3166_1: "AT",
    english_name: "Austria",
    native_name: "Austria",
  },
  {
    iso_3166_1: "AU",
    english_name: "Australia",
    native_name: "Australia",
  },
  {
    iso_3166_1: "AZ",
    english_name: "Azerbaijan",
    native_name: "Azerbaijan",
  },
  {
    iso_3166_1: "BA",
    english_name: "Bosnia and Herzegovina",
    native_name: "Bosnia & Herzegovina",
  },
  {
    iso_3166_1: "BB",
    english_name: "Barbados",
    native_name: "Barbados",
  },
  {
    iso_3166_1: "BE",
    english_name: "Belgium",
    native_name: "Belgium",
  },
  {
    iso_3166_1: "BF",
    english_name: "Burkina Faso",
    native_name: "Burkina Faso",
  },
  {
    iso_3166_1: "BG",
    english_name: "Bulgaria",
    native_name: "Bulgaria",
  },
  {
    iso_3166_1: "BH",
    english_name: "Bahrain",
    native_name: "Bahrain",
  },
  {
    iso_3166_1: "BM",
    english_name: "Bermuda",
    native_name: "Bermuda",
  },
  {
    iso_3166_1: "BO",
    english_name: "Bolivia",
    native_name: "Bolivia",
  },
  {
    iso_3166_1: "BR",
    english_name: "Brazil",
    native_name: "Brazil",
  },
  {
    iso_3166_1: "BS",
    english_name: "Bahamas",
    native_name: "Bahamas",
  },
  {
    iso_3166_1: "BY",
    english_name: "Belarus",
    native_name: "Belarus",
  },
  {
    iso_3166_1: "BZ",
    english_name: "Belize",
    native_name: "Belize",
  },
  {
    iso_3166_1: "CA",
    english_name: "Canada",
    native_name: "Canada",
  },
  {
    iso_3166_1: "CD",
    english_name: "Congo",
    native_name: "Democratic Republic of the Congo (Kinshasa)",
  },
  {
    iso_3166_1: "CH",
    english_name: "Switzerland",
    native_name: "Switzerland",
  },
  {
    iso_3166_1: "CI",
    english_name: "Cote D'Ivoire",
    native_name: "Côte d’Ivoire",
  },
  {
    iso_3166_1: "CL",
    english_name: "Chile",
    native_name: "Chile",
  },
  {
    iso_3166_1: "CM",
    english_name: "Cameroon",
    native_name: "Cameroon",
  },
  {
    iso_3166_1: "CO",
    english_name: "Colombia",
    native_name: "Colombia",
  },
  {
    iso_3166_1: "CR",
    english_name: "Costa Rica",
    native_name: "Costa Rica",
  },
  {
    iso_3166_1: "CU",
    english_name: "Cuba",
    native_name: "Cuba",
  },
  {
    iso_3166_1: "CV",
    english_name: "Cape Verde",
    native_name: "Cape Verde",
  },
  {
    iso_3166_1: "CY",
    english_name: "Cyprus",
    native_name: "Cyprus",
  },
  {
    iso_3166_1: "CZ",
    english_name: "Czech Republic",
    native_name: "Czech Republic",
  },
  {
    iso_3166_1: "DE",
    english_name: "Germany",
    native_name: "Germany",
  },
  {
    iso_3166_1: "DK",
    english_name: "Denmark",
    native_name: "Denmark",
  },
  {
    iso_3166_1: "DO",
    english_name: "Dominican Republic",
    native_name: "Dominican Republic",
  },
  {
    iso_3166_1: "DZ",
    english_name: "Algeria",
    native_name: "Algeria",
  },
  {
    iso_3166_1: "EC",
    english_name: "Ecuador",
    native_name: "Ecuador",
  },
  {
    iso_3166_1: "EE",
    english_name: "Estonia",
    native_name: "Estonia",
  },
  {
    iso_3166_1: "EG",
    english_name: "Egypt",
    native_name: "Egypt",
  },
  {
    iso_3166_1: "ES",
    english_name: "Spain",
    native_name: "Spain",
  },
  {
    iso_3166_1: "FI",
    english_name: "Finland",
    native_name: "Finland",
  },
  {
    iso_3166_1: "FJ",
    english_name: "Fiji",
    native_name: "Fiji",
  },
  {
    iso_3166_1: "FR",
    english_name: "France",
    native_name: "France",
  },
  {
    iso_3166_1: "GB",
    english_name: "United Kingdom",
    native_name: "United Kingdom",
  },
  {
    iso_3166_1: "GF",
    english_name: "French Guiana",
    native_name: "French Guiana",
  },
  {
    iso_3166_1: "GH",
    english_name: "Ghana",
    native_name: "Ghana",
  },
  {
    iso_3166_1: "GI",
    english_name: "Gibraltar",
    native_name: "Gibraltar",
  },
  {
    iso_3166_1: "GP",
    english_name: "Guadaloupe",
    native_name: "Guadeloupe",
  },
  {
    iso_3166_1: "GQ",
    english_name: "Equatorial Guinea",
    native_name: "Equatorial Guinea",
  },
  {
    iso_3166_1: "GR",
    english_name: "Greece",
    native_name: "Greece",
  },
  {
    iso_3166_1: "GT",
    english_name: "Guatemala",
    native_name: "Guatemala",
  },
  {
    iso_3166_1: "GY",
    english_name: "Guyana",
    native_name: "Guyana",
  },
  {
    iso_3166_1: "HK",
    english_name: "Hong Kong",
    native_name: "Hong Kong SAR China",
  },
  {
    iso_3166_1: "HN",
    english_name: "Honduras",
    native_name: "Honduras",
  },
  {
    iso_3166_1: "HR",
    english_name: "Croatia",
    native_name: "Croatia",
  },
  {
    iso_3166_1: "HU",
    english_name: "Hungary",
    native_name: "Hungary",
  },
  {
    iso_3166_1: "ID",
    english_name: "Indonesia",
    native_name: "Indonesia",
  },
  {
    iso_3166_1: "IE",
    english_name: "Ireland",
    native_name: "Ireland",
  },
  {
    iso_3166_1: "IL",
    english_name: "Israel",
    native_name: "Israel",
  },
  {
    iso_3166_1: "IN",
    english_name: "India",
    native_name: "India",
  },
  {
    iso_3166_1: "IQ",
    english_name: "Iraq",
    native_name: "Iraq",
  },
  {
    iso_3166_1: "IS",
    english_name: "Iceland",
    native_name: "Iceland",
  },
  {
    iso_3166_1: "IT",
    english_name: "Italy",
    native_name: "Italy",
  },
  {
    iso_3166_1: "JM",
    english_name: "Jamaica",
    native_name: "Jamaica",
  },
  {
    iso_3166_1: "JO",
    english_name: "Jordan",
    native_name: "Jordan",
  },
  {
    iso_3166_1: "JP",
    english_name: "Japan",
    native_name: "Japan",
  },
  {
    iso_3166_1: "KE",
    english_name: "Kenya",
    native_name: "Kenya",
  },
  {
    iso_3166_1: "KR",
    english_name: "South Korea",
    native_name: "South Korea",
  },
  {
    iso_3166_1: "KW",
    english_name: "Kuwait",
    native_name: "Kuwait",
  },
  {
    iso_3166_1: "LB",
    english_name: "Lebanon",
    native_name: "Lebanon",
  },
  {
    iso_3166_1: "LC",
    english_name: "St. Lucia",
    native_name: "St. Lucia",
  },
  {
    iso_3166_1: "LI",
    english_name: "Liechtenstein",
    native_name: "Liechtenstein",
  },
  {
    iso_3166_1: "LT",
    english_name: "Lithuania",
    native_name: "Lithuania",
  },
  {
    iso_3166_1: "LU",
    english_name: "Luxembourg",
    native_name: "Luxembourg",
  },
  {
    iso_3166_1: "LV",
    english_name: "Latvia",
    native_name: "Latvia",
  },
  {
    iso_3166_1: "LY",
    english_name: "Libyan Arab Jamahiriya",
    native_name: "Libya",
  },
  {
    iso_3166_1: "MA",
    english_name: "Morocco",
    native_name: "Morocco",
  },
  {
    iso_3166_1: "MC",
    english_name: "Monaco",
    native_name: "Monaco",
  },
  {
    iso_3166_1: "MD",
    english_name: "Moldova",
    native_name: "Moldova",
  },
  {
    iso_3166_1: "ME",
    english_name: "Montenegro",
    native_name: "Montenegro",
  },
  {
    iso_3166_1: "MG",
    english_name: "Madagascar",
    native_name: "Madagascar",
  },
  {
    iso_3166_1: "MK",
    english_name: "Macedonia",
    native_name: "Macedonia",
  },
  {
    iso_3166_1: "ML",
    english_name: "Mali",
    native_name: "Mali",
  },
  {
    iso_3166_1: "MT",
    english_name: "Malta",
    native_name: "Malta",
  },
  {
    iso_3166_1: "MU",
    english_name: "Mauritius",
    native_name: "Mauritius",
  },
  {
    iso_3166_1: "MW",
    english_name: "Malawi",
    native_name: "Malawi",
  },
  {
    iso_3166_1: "MX",
    english_name: "Mexico",
    native_name: "Mexico",
  },
  {
    iso_3166_1: "MY",
    english_name: "Malaysia",
    native_name: "Malaysia",
  },
  {
    iso_3166_1: "MZ",
    english_name: "Mozambique",
    native_name: "Mozambique",
  },
  {
    iso_3166_1: "NE",
    english_name: "Niger",
    native_name: "Niger",
  },
  {
    iso_3166_1: "NG",
    english_name: "Nigeria",
    native_name: "Nigeria",
  },
  {
    iso_3166_1: "NI",
    english_name: "Nicaragua",
    native_name: "Nicaragua",
  },
  {
    iso_3166_1: "NL",
    english_name: "Netherlands",
    native_name: "Netherlands",
  },
  {
    iso_3166_1: "NO",
    english_name: "Norway",
    native_name: "Norway",
  },
  {
    iso_3166_1: "NZ",
    english_name: "New Zealand",
    native_name: "New Zealand",
  },
  {
    iso_3166_1: "OM",
    english_name: "Oman",
    native_name: "Oman",
  },
  {
    iso_3166_1: "PA",
    english_name: "Panama",
    native_name: "Panama",
  },
  {
    iso_3166_1: "PE",
    english_name: "Peru",
    native_name: "Peru",
  },
  {
    iso_3166_1: "PF",
    english_name: "French Polynesia",
    native_name: "French Polynesia",
  },
  {
    iso_3166_1: "PG",
    english_name: "Papua New Guinea",
    native_name: "Papua New Guinea",
  },
  {
    iso_3166_1: "PH",
    english_name: "Philippines",
    native_name: "Philippines",
  },
  {
    iso_3166_1: "PK",
    english_name: "Pakistan",
    native_name: "Pakistan",
  },
  {
    iso_3166_1: "PL",
    english_name: "Poland",
    native_name: "Poland",
  },
  {
    iso_3166_1: "PS",
    english_name: "Palestinian Territory",
    native_name: "Palestinian Territories",
  },
  {
    iso_3166_1: "PT",
    english_name: "Portugal",
    native_name: "Portugal",
  },
  {
    iso_3166_1: "PY",
    english_name: "Paraguay",
    native_name: "Paraguay",
  },
  {
    iso_3166_1: "QA",
    english_name: "Qatar",
    native_name: "Qatar",
  },
  {
    iso_3166_1: "RO",
    english_name: "Romania",
    native_name: "Romania",
  },
  {
    iso_3166_1: "RS",
    english_name: "Serbia",
    native_name: "Serbia",
  },
  {
    iso_3166_1: "RU",
    english_name: "Russia",
    native_name: "Russia",
  },
  {
    iso_3166_1: "SA",
    english_name: "Saudi Arabia",
    native_name: "Saudi Arabia",
  },
  {
    iso_3166_1: "SC",
    english_name: "Seychelles",
    native_name: "Seychelles",
  },
  {
    iso_3166_1: "SE",
    english_name: "Sweden",
    native_name: "Sweden",
  },
  {
    iso_3166_1: "SG",
    english_name: "Singapore",
    native_name: "Singapore",
  },
  {
    iso_3166_1: "SI",
    english_name: "Slovenia",
    native_name: "Slovenia",
  },
  {
    iso_3166_1: "SK",
    english_name: "Slovakia",
    native_name: "Slovakia",
  },
  {
    iso_3166_1: "SM",
    english_name: "San Marino",
    native_name: "San Marino",
  },
  {
    iso_3166_1: "SN",
    english_name: "Senegal",
    native_name: "Senegal",
  },
  {
    iso_3166_1: "SV",
    english_name: "El Salvador",
    native_name: "El Salvador",
  },
  {
    iso_3166_1: "TC",
    english_name: "Turks and Caicos Islands",
    native_name: "Turks & Caicos Islands",
  },
  {
    iso_3166_1: "TD",
    english_name: "Chad",
    native_name: "Chad",
  },
  {
    iso_3166_1: "TH",
    english_name: "Thailand",
    native_name: "Thailand",
  },
  {
    iso_3166_1: "TN",
    english_name: "Tunisia",
    native_name: "Tunisia",
  },
  {
    iso_3166_1: "TR",
    english_name: "Turkey",
    native_name: "Turkey",
  },
  {
    iso_3166_1: "TT",
    english_name: "Trinidad and Tobago",
    native_name: "Trinidad & Tobago",
  },
  {
    iso_3166_1: "TW",
    english_name: "Taiwan",
    native_name: "Taiwan",
  },
  {
    iso_3166_1: "TZ",
    english_name: "Tanzania",
    native_name: "Tanzania",
  },
  {
    iso_3166_1: "UA",
    english_name: "Ukraine",
    native_name: "Ukraine",
  },
  {
    iso_3166_1: "UG",
    english_name: "Uganda",
    native_name: "Uganda",
  },
  {
    iso_3166_1: "US",
    english_name: "United States of America",
    native_name: "United States",
  },
  {
    iso_3166_1: "UY",
    english_name: "Uruguay",
    native_name: "Uruguay",
  },
  {
    iso_3166_1: "VA",
    english_name: "Holy See",
    native_name: "Vatican City",
  },
  {
    iso_3166_1: "VE",
    english_name: "Venezuela",
    native_name: "Venezuela",
  },
  {
    iso_3166_1: "XK",
    english_name: "Kosovo",
    native_name: "Kosovo",
  },
  {
    iso_3166_1: "YE",
    english_name: "Yemen",
    native_name: "Yemen",
  },
  {
    iso_3166_1: "ZA",
    english_name: "South Africa",
    native_name: "South Africa",
  },
  {
    iso_3166_1: "ZM",
    english_name: "Zambia",
    native_name: "Zambia",
  },
  {
    iso_3166_1: "ZW",
    english_name: "Zimbabwe",
    native_name: "Zimbabwe",
  },
]

// File: lib/save-setting.ts
"use server"

import fs from "fs/promises"
import path from "path"
import { z } from "zod"

const formSchema = z.object({
  scriptSrc: z.string(),
  key: z.string().min(1),
  directLink: z.string().url().optional().or(z.literal("")),
  format: z.string().optional(),
  height: z.number().min(1).optional(),
  width: z.number().min(1).optional(),
  params: z
    .string()
    .refine(
      (value) => {
        if (!value) return true
        try {
          JSON.parse(value)
          return true
        } catch {
          return false
        }
      },
      { message: "Invalid JSON for params" }
    )
    .optional(),
})

export async function saveSettings(data: z.infer<typeof formSchema>) {
  const result = formSchema.safeParse(data)

  if (!result.success) {
    throw new Error("Invalid form data")
  }

  const settingsPath = path.join(process.cwd(), "ad-settings.json")
  console.log(settingsPath)
  try {
    await fs.writeFile(settingsPath, JSON.stringify(result.data, null, 2))
  } catch (error) {
    console.error("Error writing settings file:", error)
    throw new Error("Failed to save settings")
  }
}

// File: lib/timezones.ts
export const timezones = {
  "Europe/Andorra": {
    name: "Europe/Andorra",
    countries: ["AD"],
  },
  "Asia/Dubai": {
    name: "Asia/Dubai",
    countries: ["AE", "OM", "RE", "SC", "TF"],
  },
  "Asia/Kabul": {
    name: "Asia/Kabul",
    countries: ["AF"],
  },
  "Europe/Tirane": {
    name: "Europe/Tirane",
    countries: ["AL"],
  },
  "Asia/Yerevan": {
    name: "Asia/Yerevan",
    countries: ["AM"],
  },
  "Antarctica/Casey": {
    name: "Antarctica/Casey",
    countries: ["AQ"],
  },
  "Antarctica/Davis": {
    name: "Antarctica/Davis",
    countries: ["AQ"],
  },
  "Antarctica/Mawson": {
    name: "Antarctica/Mawson",
    countries: ["AQ"],
  },
  "Antarctica/Palmer": {
    name: "Antarctica/Palmer",
    countries: ["AQ"],
  },
  "Antarctica/Rothera": {
    name: "Antarctica/Rothera",
    countries: ["AQ"],
  },
  "Antarctica/Troll": {
    name: "Antarctica/Troll",
    countries: ["AQ"],
  },
  "America/Argentina/Buenos_Aires": {
    name: "America/Argentina/Buenos_Aires",
    countries: ["AR"],
  },
  "America/Argentina/Cordoba": {
    name: "America/Argentina/Cordoba",
    countries: ["AR"],
  },
  "America/Argentina/Salta": {
    name: "America/Argentina/Salta",
    countries: ["AR"],
  },
  "America/Argentina/Jujuy": {
    name: "America/Argentina/Jujuy",
    countries: ["AR"],
  },
  "America/Argentina/Tucuman": {
    name: "America/Argentina/Tucuman",
    countries: ["AR"],
  },
  "America/Argentina/Catamarca": {
    name: "America/Argentina/Catamarca",
    countries: ["AR"],
  },
  "America/Argentina/La_Rioja": {
    name: "America/Argentina/La_Rioja",
    countries: ["AR"],
  },
  "America/Argentina/San_Juan": {
    name: "America/Argentina/San_Juan",
    countries: ["AR"],
  },
  "America/Argentina/Mendoza": {
    name: "America/Argentina/Mendoza",
    countries: ["AR"],
  },
  "America/Argentina/San_Luis": {
    name: "America/Argentina/San_Luis",
    countries: ["AR"],
  },
  "America/Argentina/Rio_Gallegos": {
    name: "America/Argentina/Rio_Gallegos",
    countries: ["AR"],
  },
  "America/Argentina/Ushuaia": {
    name: "America/Argentina/Ushuaia",
    countries: ["AR"],
  },
  "Pacific/Pago_Pago": {
    name: "Pacific/Pago_Pago",
    countries: ["AS", "UM"],
  },
  "Europe/Vienna": {
    name: "Europe/Vienna",
    countries: ["AT"],
  },
  "Australia/Lord_Howe": {
    name: "Australia/Lord_Howe",
    countries: ["AU"],
  },
  "Antarctica/Macquarie": {
    name: "Antarctica/Macquarie",
    countries: ["AU"],
  },
  "Australia/Hobart": {
    name: "Australia/Hobart",
    countries: ["AU"],
  },
  "Australia/Melbourne": {
    name: "Australia/Melbourne",
    countries: ["AU"],
  },
  "Australia/Sydney": {
    name: "Australia/Sydney",
    countries: ["AU"],
  },
  "Australia/Broken_Hill": {
    name: "Australia/Broken_Hill",
    countries: ["AU"],
  },
  "Australia/Brisbane": {
    name: "Australia/Brisbane",
    countries: ["AU"],
  },
  "Australia/Lindeman": {
    name: "Australia/Lindeman",
    countries: ["AU"],
  },
  "Australia/Adelaide": {
    name: "Australia/Adelaide",
    countries: ["AU"],
  },
  "Australia/Darwin": {
    name: "Australia/Darwin",
    countries: ["AU"],
  },
  "Australia/Perth": {
    name: "Australia/Perth",
    countries: ["AU"],
  },
  "Australia/Eucla": {
    name: "Australia/Eucla",
    countries: ["AU"],
  },
  "Asia/Baku": {
    name: "Asia/Baku",
    countries: ["AZ"],
  },
  "America/Barbados": {
    name: "America/Barbados",
    countries: ["BB"],
  },
  "Asia/Dhaka": {
    name: "Asia/Dhaka",
    countries: ["BD"],
  },
  "Europe/Brussels": {
    name: "Europe/Brussels",
    countries: ["BE", "LU", "NL"],
  },
  "Europe/Sofia": {
    name: "Europe/Sofia",
    countries: ["BG"],
  },
  "Atlantic/Bermuda": {
    name: "Atlantic/Bermuda",
    countries: ["BM"],
  },
  "America/La_Paz": {
    name: "America/La_Paz",
    countries: ["BO"],
  },
  "America/Noronha": {
    name: "America/Noronha",
    countries: ["BR"],
  },
  "America/Belem": {
    name: "America/Belem",
    countries: ["BR"],
  },
  "America/Fortaleza": {
    name: "America/Fortaleza",
    countries: ["BR"],
  },
  "America/Recife": {
    name: "America/Recife",
    countries: ["BR"],
  },
  "America/Araguaina": {
    name: "America/Araguaina",
    countries: ["BR"],
  },
  "America/Maceio": {
    name: "America/Maceio",
    countries: ["BR"],
  },
  "America/Bahia": {
    name: "America/Bahia",
    countries: ["BR"],
  },
  "America/Sao_Paulo": {
    name: "America/Sao_Paulo",
    countries: ["BR"],
  },
  "America/Campo_Grande": {
    name: "America/Campo_Grande",
    countries: ["BR"],
  },
  "America/Cuiaba": {
    name: "America/Cuiaba",
    countries: ["BR"],
  },
  "America/Santarem": {
    name: "America/Santarem",
    countries: ["BR"],
  },
  "America/Porto_Velho": {
    name: "America/Porto_Velho",
    countries: ["BR"],
  },
  "America/Boa_Vista": {
    name: "America/Boa_Vista",
    countries: ["BR"],
  },
  "America/Manaus": {
    name: "America/Manaus",
    countries: ["BR"],
  },
  "America/Eirunepe": {
    name: "America/Eirunepe",
    countries: ["BR"],
  },
  "America/Rio_Branco": {
    name: "America/Rio_Branco",
    countries: ["BR"],
  },
  "Asia/Thimphu": {
    name: "Asia/Thimphu",
    countries: ["BT"],
  },
  "Europe/Minsk": {
    name: "Europe/Minsk",
    countries: ["BY"],
  },
  "America/Belize": {
    name: "America/Belize",
    countries: ["BZ"],
  },
  "America/St_Johns": {
    name: "America/St_Johns",
    countries: ["CA"],
  },
  "America/Halifax": {
    name: "America/Halifax",
    countries: ["CA"],
  },
  "America/Glace_Bay": {
    name: "America/Glace_Bay",
    countries: ["CA"],
  },
  "America/Moncton": {
    name: "America/Moncton",
    countries: ["CA"],
  },
  "America/Goose_Bay": {
    name: "America/Goose_Bay",
    countries: ["CA"],
  },
  "America/Toronto": {
    name: "America/Toronto",
    countries: ["CA", "BS"],
  },
  "America/Iqaluit": {
    name: "America/Iqaluit",
    countries: ["CA"],
  },
  "America/Winnipeg": {
    name: "America/Winnipeg",
    countries: ["CA"],
  },
  "America/Resolute": {
    name: "America/Resolute",
    countries: ["CA"],
  },
  "America/Rankin_Inlet": {
    name: "America/Rankin_Inlet",
    countries: ["CA"],
  },
  "America/Regina": {
    name: "America/Regina",
    countries: ["CA"],
  },
  "America/Swift_Current": {
    name: "America/Swift_Current",
    countries: ["CA"],
  },
  "America/Edmonton": {
    name: "America/Edmonton",
    countries: ["CA"],
  },
  "America/Cambridge_Bay": {
    name: "America/Cambridge_Bay",
    countries: ["CA"],
  },
  "America/Yellowknife": {
    name: "America/Yellowknife",
    countries: ["CA"],
  },
  "America/Inuvik": {
    name: "America/Inuvik",
    countries: ["CA"],
  },
  "America/Dawson_Creek": {
    name: "America/Dawson_Creek",
    countries: ["CA"],
  },
  "America/Fort_Nelson": {
    name: "America/Fort_Nelson",
    countries: ["CA"],
  },
  "America/Whitehorse": {
    name: "America/Whitehorse",
    countries: ["CA"],
  },
  "America/Dawson": {
    name: "America/Dawson",
    countries: ["CA"],
  },
  "America/Vancouver": {
    name: "America/Vancouver",
    countries: ["CA"],
  },
  "Europe/Zurich": {
    name: "Europe/Zurich",
    countries: ["CH", "DE", "LI"],
  },
  "Africa/Abidjan": {
    name: "Africa/Abidjan",
    countries: [
      "CI",
      "BF",
      "GH",
      "GM",
      "GN",
      "IS",
      "ML",
      "MR",
      "SH",
      "SL",
      "SN",
      "TG",
    ],
  },
  "Pacific/Rarotonga": {
    name: "Pacific/Rarotonga",
    countries: ["CK"],
  },
  "America/Santiago": {
    name: "America/Santiago",
    countries: ["CL"],
  },
  "America/Punta_Arenas": {
    name: "America/Punta_Arenas",
    countries: ["CL"],
  },
  "Pacific/Easter": {
    name: "Pacific/Easter",
    countries: ["CL"],
  },
  "Asia/Shanghai": {
    name: "Asia/Shanghai",
    countries: ["CN"],
  },
  "Asia/Urumqi": {
    name: "Asia/Urumqi",
    countries: ["CN", "AQ"],
  },
  "America/Bogota": {
    name: "America/Bogota",
    countries: ["CO"],
  },
  "America/Costa_Rica": {
    name: "America/Costa_Rica",
    countries: ["CR"],
  },
  "America/Havana": {
    name: "America/Havana",
    countries: ["CU"],
  },
  "Atlantic/Cape_Verde": {
    name: "Atlantic/Cape_Verde",
    countries: ["CV"],
  },
  "Asia/Nicosia": {
    name: "Asia/Nicosia",
    countries: ["CY"],
  },
  "Asia/Famagusta": {
    name: "Asia/Famagusta",
    countries: ["CY"],
  },
  "Europe/Prague": {
    name: "Europe/Prague",
    countries: ["CZ", "SK"],
  },
  "Europe/Berlin": {
    name: "Europe/Berlin",
    countries: ["DE", "DK", "NO", "SE", "SJ"],
  },
  "America/Santo_Domingo": {
    name: "America/Santo_Domingo",
    countries: ["DO"],
  },
  "Africa/Algiers": {
    name: "Africa/Algiers",
    countries: ["DZ"],
  },
  "America/Guayaquil": {
    name: "America/Guayaquil",
    countries: ["EC"],
  },
  "Pacific/Galapagos": {
    name: "Pacific/Galapagos",
    countries: ["EC"],
  },
  "Europe/Tallinn": {
    name: "Europe/Tallinn",
    countries: ["EE"],
  },
  "Africa/Cairo": {
    name: "Africa/Cairo",
    countries: ["EG"],
  },
  "Africa/El_Aaiun": {
    name: "Africa/El_Aaiun",
    countries: ["EH"],
  },
  "Europe/Madrid": {
    name: "Europe/Madrid",
    countries: ["ES"],
  },
  "Africa/Ceuta": {
    name: "Africa/Ceuta",
    countries: ["ES"],
  },
  "Atlantic/Canary": {
    name: "Atlantic/Canary",
    countries: ["ES"],
  },
  "Europe/Helsinki": {
    name: "Europe/Helsinki",
    countries: ["FI", "AX"],
  },
  "Pacific/Fiji": {
    name: "Pacific/Fiji",
    countries: ["FJ"],
  },
  "Atlantic/Stanley": {
    name: "Atlantic/Stanley",
    countries: ["FK"],
  },
  "Pacific/Kosrae": {
    name: "Pacific/Kosrae",
    countries: ["FM"],
  },
  "Atlantic/Faroe": {
    name: "Atlantic/Faroe",
    countries: ["FO"],
  },
  "Europe/Paris": {
    name: "Europe/Paris",
    countries: ["FR", "MC"],
  },
  "Europe/London": {
    name: "Europe/London",
    countries: ["GB", "GG", "IM", "JE"],
  },
  "Asia/Tbilisi": {
    name: "Asia/Tbilisi",
    countries: ["GE"],
  },
  "America/Cayenne": {
    name: "America/Cayenne",
    countries: ["GF"],
  },
  "Europe/Gibraltar": {
    name: "Europe/Gibraltar",
    countries: ["GI"],
  },
  "America/Nuuk": {
    name: "America/Nuuk",
    countries: ["GL"],
  },
  "America/Danmarkshavn": {
    name: "America/Danmarkshavn",
    countries: ["GL"],
  },
  "America/Scoresbysund": {
    name: "America/Scoresbysund",
    countries: ["GL"],
  },
  "America/Thule": {
    name: "America/Thule",
    countries: ["GL"],
  },
  "Europe/Athens": {
    name: "Europe/Athens",
    countries: ["GR"],
  },
  "Atlantic/South_Georgia": {
    name: "Atlantic/South_Georgia",
    countries: ["GS"],
  },
  "America/Guatemala": {
    name: "America/Guatemala",
    countries: ["GT"],
  },
  "Pacific/Guam": {
    name: "Pacific/Guam",
    countries: ["GU", "MP"],
  },
  "Africa/Bissau": {
    name: "Africa/Bissau",
    countries: ["GW"],
  },
  "America/Guyana": {
    name: "America/Guyana",
    countries: ["GY"],
  },
  "Asia/Hong_Kong": {
    name: "Asia/Hong_Kong",
    countries: ["HK"],
  },
  "America/Tegucigalpa": {
    name: "America/Tegucigalpa",
    countries: ["HN"],
  },
  "America/Port-au-Prince": {
    name: "America/Port-au-Prince",
    countries: ["HT"],
  },
  "Europe/Budapest": {
    name: "Europe/Budapest",
    countries: ["HU"],
  },
  "Asia/Jakarta": {
    name: "Asia/Jakarta",
    countries: ["ID"],
  },
  "Asia/Pontianak": {
    name: "Asia/Pontianak",
    countries: ["ID"],
  },
  "Asia/Makassar": {
    name: "Asia/Makassar",
    countries: ["ID"],
  },
  "Asia/Jayapura": {
    name: "Asia/Jayapura",
    countries: ["ID"],
  },
  "Europe/Dublin": {
    name: "Europe/Dublin",
    countries: ["IE"],
  },
  "Asia/Jerusalem": {
    name: "Asia/Jerusalem",
    countries: ["IL"],
  },
  "Asia/Kolkata": {
    name: "Asia/Kolkata",
    countries: ["IN"],
  },
  "Indian/Chagos": {
    name: "Indian/Chagos",
    countries: ["IO"],
  },
  "Asia/Baghdad": {
    name: "Asia/Baghdad",
    countries: ["IQ"],
  },
  "Asia/Tehran": {
    name: "Asia/Tehran",
    countries: ["IR"],
  },
  "Europe/Rome": {
    name: "Europe/Rome",
    countries: ["IT", "SM", "VA"],
  },
  "America/Jamaica": {
    name: "America/Jamaica",
    countries: ["JM"],
  },
  "Asia/Amman": {
    name: "Asia/Amman",
    countries: ["JO"],
  },
  "Asia/Tokyo": {
    name: "Asia/Tokyo",
    countries: ["JP"],
  },
  "Africa/Nairobi": {
    name: "Africa/Nairobi",
    countries: ["KE", "DJ", "ER", "ET", "KM", "MG", "SO", "TZ", "UG", "YT"],
  },
  "Asia/Bishkek": {
    name: "Asia/Bishkek",
    countries: ["KG"],
  },
  "Pacific/Tarawa": {
    name: "Pacific/Tarawa",
    countries: ["KI", "MH", "TV", "UM", "WF"],
  },
  "Pacific/Kanton": {
    name: "Pacific/Kanton",
    countries: ["KI"],
  },
  "Pacific/Kiritimati": {
    name: "Pacific/Kiritimati",
    countries: ["KI"],
  },
  "Asia/Pyongyang": {
    name: "Asia/Pyongyang",
    countries: ["KP"],
  },
  "Asia/Seoul": {
    name: "Asia/Seoul",
    countries: ["KR"],
  },
  "Asia/Almaty": {
    name: "Asia/Almaty",
    countries: ["KZ"],
  },
  "Asia/Qyzylorda": {
    name: "Asia/Qyzylorda",
    countries: ["KZ"],
  },
  "Asia/Qostanay": {
    name: "Asia/Qostanay",
    countries: ["KZ"],
  },
  "Asia/Aqtobe": {
    name: "Asia/Aqtobe",
    countries: ["KZ"],
  },
  "Asia/Aqtau": {
    name: "Asia/Aqtau",
    countries: ["KZ"],
  },
  "Asia/Atyrau": {
    name: "Asia/Atyrau",
    countries: ["KZ"],
  },
  "Asia/Oral": {
    name: "Asia/Oral",
    countries: ["KZ"],
  },
  "Asia/Beirut": {
    name: "Asia/Beirut",
    countries: ["LB"],
  },
  "Asia/Colombo": {
    name: "Asia/Colombo",
    countries: ["LK"],
  },
  "Africa/Monrovia": {
    name: "Africa/Monrovia",
    countries: ["LR"],
  },
  "Europe/Vilnius": {
    name: "Europe/Vilnius",
    countries: ["LT"],
  },
  "Europe/Riga": {
    name: "Europe/Riga",
    countries: ["LV"],
  },
  "Africa/Tripoli": {
    name: "Africa/Tripoli",
    countries: ["LY"],
  },
  "Africa/Casablanca": {
    name: "Africa/Casablanca",
    countries: ["MA"],
  },
  "Europe/Chisinau": {
    name: "Europe/Chisinau",
    countries: ["MD"],
  },
  "Pacific/Kwajalein": {
    name: "Pacific/Kwajalein",
    countries: ["MH"],
  },
  "Asia/Yangon": {
    name: "Asia/Yangon",
    countries: ["MM", "CC"],
  },
  "Asia/Ulaanbaatar": {
    name: "Asia/Ulaanbaatar",
    countries: ["MN"],
  },
  "Asia/Hovd": {
    name: "Asia/Hovd",
    countries: ["MN"],
  },
  "Asia/Choibalsan": {
    name: "Asia/Choibalsan",
    countries: ["MN"],
  },
  "Asia/Macau": {
    name: "Asia/Macau",
    countries: ["MO"],
  },
  "America/Martinique": {
    name: "America/Martinique",
    countries: ["MQ"],
  },
  "Europe/Malta": {
    name: "Europe/Malta",
    countries: ["MT"],
  },
  "Indian/Mauritius": {
    name: "Indian/Mauritius",
    countries: ["MU"],
  },
  "Indian/Maldives": {
    name: "Indian/Maldives",
    countries: ["MV", "TF"],
  },
  "America/Mexico_City": {
    name: "America/Mexico_City",
    countries: ["MX"],
  },
  "America/Cancun": {
    name: "America/Cancun",
    countries: ["MX"],
  },
  "America/Merida": {
    name: "America/Merida",
    countries: ["MX"],
  },
  "America/Monterrey": {
    name: "America/Monterrey",
    countries: ["MX"],
  },
  "America/Matamoros": {
    name: "America/Matamoros",
    countries: ["MX"],
  },
  "America/Chihuahua": {
    name: "America/Chihuahua",
    countries: ["MX"],
  },
  "America/Ciudad_Juarez": {
    name: "America/Ciudad_Juarez",
    countries: ["MX"],
  },
  "America/Ojinaga": {
    name: "America/Ojinaga",
    countries: ["MX"],
  },
  "America/Mazatlan": {
    name: "America/Mazatlan",
    countries: ["MX"],
  },
  "America/Bahia_Banderas": {
    name: "America/Bahia_Banderas",
    countries: ["MX"],
  },
  "America/Hermosillo": {
    name: "America/Hermosillo",
    countries: ["MX"],
  },
  "America/Tijuana": {
    name: "America/Tijuana",
    countries: ["MX"],
  },
  "Asia/Kuching": {
    name: "Asia/Kuching",
    countries: ["MY", "BN"],
  },
  "Africa/Maputo": {
    name: "Africa/Maputo",
    countries: ["MZ", "BI", "BW", "CD", "MW", "RW", "ZM", "ZW"],
  },
  "Africa/Windhoek": {
    name: "Africa/Windhoek",
    countries: ["NA"],
  },
  "Pacific/Noumea": {
    name: "Pacific/Noumea",
    countries: ["NC"],
  },
  "Pacific/Norfolk": {
    name: "Pacific/Norfolk",
    countries: ["NF"],
  },
  "Africa/Lagos": {
    name: "Africa/Lagos",
    countries: ["NG", "AO", "BJ", "CD", "CF", "CG", "CM", "GA", "GQ", "NE"],
  },
  "America/Managua": {
    name: "America/Managua",
    countries: ["NI"],
  },
  "Asia/Kathmandu": {
    name: "Asia/Kathmandu",
    countries: ["NP"],
  },
  "Pacific/Nauru": {
    name: "Pacific/Nauru",
    countries: ["NR"],
  },
  "Pacific/Niue": {
    name: "Pacific/Niue",
    countries: ["NU"],
  },
  "Pacific/Auckland": {
    name: "Pacific/Auckland",
    countries: ["NZ", "AQ"],
  },
  "Pacific/Chatham": {
    name: "Pacific/Chatham",
    countries: ["NZ"],
  },
  "America/Panama": {
    name: "America/Panama",
    countries: ["PA", "CA", "KY"],
  },
  "America/Lima": {
    name: "America/Lima",
    countries: ["PE"],
  },
  "Pacific/Tahiti": {
    name: "Pacific/Tahiti",
    countries: ["PF"],
  },
  "Pacific/Marquesas": {
    name: "Pacific/Marquesas",
    countries: ["PF"],
  },
  "Pacific/Gambier": {
    name: "Pacific/Gambier",
    countries: ["PF"],
  },
  "Pacific/Port_Moresby": {
    name: "Pacific/Port_Moresby",
    countries: ["PG", "AQ", "FM"],
  },
  "Pacific/Bougainville": {
    name: "Pacific/Bougainville",
    countries: ["PG"],
  },
  "Asia/Manila": {
    name: "Asia/Manila",
    countries: ["PH"],
  },
  "Asia/Karachi": {
    name: "Asia/Karachi",
    countries: ["PK"],
  },
  "Europe/Warsaw": {
    name: "Europe/Warsaw",
    countries: ["PL"],
  },
  "America/Miquelon": {
    name: "America/Miquelon",
    countries: ["PM"],
  },
  "Pacific/Pitcairn": {
    name: "Pacific/Pitcairn",
    countries: ["PN"],
  },
  "America/Puerto_Rico": {
    name: "America/Puerto_Rico",
    countries: [
      "PR",
      "AG",
      "CA",
      "AI",
      "AW",
      "BL",
      "BQ",
      "CW",
      "DM",
      "GD",
      "GP",
      "KN",
      "LC",
      "MF",
      "MS",
      "SX",
      "TT",
      "VC",
      "VG",
      "VI",
    ],
  },
  "Asia/Gaza": {
    name: "Asia/Gaza",
    countries: ["PS"],
  },
  "Asia/Hebron": {
    name: "Asia/Hebron",
    countries: ["PS"],
  },
  "Europe/Lisbon": {
    name: "Europe/Lisbon",
    countries: ["PT"],
  },
  "Atlantic/Madeira": {
    name: "Atlantic/Madeira",
    countries: ["PT"],
  },
  "Atlantic/Azores": {
    name: "Atlantic/Azores",
    countries: ["PT"],
  },
  "Pacific/Palau": {
    name: "Pacific/Palau",
    countries: ["PW"],
  },
  "America/Asuncion": {
    name: "America/Asuncion",
    countries: ["PY"],
  },
  "Asia/Qatar": {
    name: "Asia/Qatar",
    countries: ["QA", "BH"],
  },
  "Europe/Bucharest": {
    name: "Europe/Bucharest",
    countries: ["RO"],
  },
  "Europe/Belgrade": {
    name: "Europe/Belgrade",
    countries: ["RS", "BA", "HR", "ME", "MK", "SI"],
  },
  "Europe/Kaliningrad": {
    name: "Europe/Kaliningrad",
    countries: ["RU"],
  },
  "Europe/Moscow": {
    name: "Europe/Moscow",
    countries: ["RU"],
  },
  "Europe/Simferopol": {
    name: "Europe/Simferopol",
    countries: ["RU", "UA"],
  },
  "Europe/Kirov": {
    name: "Europe/Kirov",
    countries: ["RU"],
  },
  "Europe/Volgograd": {
    name: "Europe/Volgograd",
    countries: ["RU"],
  },
  "Europe/Astrakhan": {
    name: "Europe/Astrakhan",
    countries: ["RU"],
  },
  "Europe/Saratov": {
    name: "Europe/Saratov",
    countries: ["RU"],
  },
  "Europe/Ulyanovsk": {
    name: "Europe/Ulyanovsk",
    countries: ["RU"],
  },
  "Europe/Samara": {
    name: "Europe/Samara",
    countries: ["RU"],
  },
  "Asia/Yekaterinburg": {
    name: "Asia/Yekaterinburg",
    countries: ["RU"],
  },
  "Asia/Omsk": {
    name: "Asia/Omsk",
    countries: ["RU"],
  },
  "Asia/Novosibirsk": {
    name: "Asia/Novosibirsk",
    countries: ["RU"],
  },
  "Asia/Barnaul": {
    name: "Asia/Barnaul",
    countries: ["RU"],
  },
  "Asia/Tomsk": {
    name: "Asia/Tomsk",
    countries: ["RU"],
  },
  "Asia/Novokuznetsk": {
    name: "Asia/Novokuznetsk",
    countries: ["RU"],
  },
  "Asia/Krasnoyarsk": {
    name: "Asia/Krasnoyarsk",
    countries: ["RU"],
  },
  "Asia/Irkutsk": {
    name: "Asia/Irkutsk",
    countries: ["RU"],
  },
  "Asia/Chita": {
    name: "Asia/Chita",
    countries: ["RU"],
  },
  "Asia/Yakutsk": {
    name: "Asia/Yakutsk",
    countries: ["RU"],
  },
  "Asia/Khandyga": {
    name: "Asia/Khandyga",
    countries: ["RU"],
  },
  "Asia/Vladivostok": {
    name: "Asia/Vladivostok",
    countries: ["RU"],
  },
  "Asia/Ust-Nera": {
    name: "Asia/Ust-Nera",
    countries: ["RU"],
  },
  "Asia/Magadan": {
    name: "Asia/Magadan",
    countries: ["RU"],
  },
  "Asia/Sakhalin": {
    name: "Asia/Sakhalin",
    countries: ["RU"],
  },
  "Asia/Srednekolymsk": {
    name: "Asia/Srednekolymsk",
    countries: ["RU"],
  },
  "Asia/Kamchatka": {
    name: "Asia/Kamchatka",
    countries: ["RU"],
  },
  "Asia/Anadyr": {
    name: "Asia/Anadyr",
    countries: ["RU"],
  },
  "Asia/Riyadh": {
    name: "Asia/Riyadh",
    countries: ["SA", "AQ", "KW", "YE"],
  },
  "Pacific/Guadalcanal": {
    name: "Pacific/Guadalcanal",
    countries: ["SB", "FM"],
  },
  "Africa/Khartoum": {
    name: "Africa/Khartoum",
    countries: ["SD"],
  },
  "Asia/Singapore": {
    name: "Asia/Singapore",
    countries: ["SG", "MY"],
  },
  "America/Paramaribo": {
    name: "America/Paramaribo",
    countries: ["SR"],
  },
  "Africa/Juba": {
    name: "Africa/Juba",
    countries: ["SS"],
  },
  "Africa/Sao_Tome": {
    name: "Africa/Sao_Tome",
    countries: ["ST"],
  },
  "America/El_Salvador": {
    name: "America/El_Salvador",
    countries: ["SV"],
  },
  "Asia/Damascus": {
    name: "Asia/Damascus",
    countries: ["SY"],
  },
  "America/Grand_Turk": {
    name: "America/Grand_Turk",
    countries: ["TC"],
  },
  "Africa/Ndjamena": {
    name: "Africa/Ndjamena",
    countries: ["TD"],
  },
  "Asia/Bangkok": {
    name: "Asia/Bangkok",
    countries: ["TH", "CX", "KH", "LA", "VN"],
  },
  "Asia/Dushanbe": {
    name: "Asia/Dushanbe",
    countries: ["TJ"],
  },
  "Pacific/Fakaofo": {
    name: "Pacific/Fakaofo",
    countries: ["TK"],
  },
  "Asia/Dili": {
    name: "Asia/Dili",
    countries: ["TL"],
  },
  "Asia/Ashgabat": {
    name: "Asia/Ashgabat",
    countries: ["TM"],
  },
  "Africa/Tunis": {
    name: "Africa/Tunis",
    countries: ["TN"],
  },
  "Pacific/Tongatapu": {
    name: "Pacific/Tongatapu",
    countries: ["TO"],
  },
  "Europe/Istanbul": {
    name: "Europe/Istanbul",
    countries: ["TR"],
  },
  "Asia/Taipei": {
    name: "Asia/Taipei",
    countries: ["TW"],
  },
  "Europe/Kyiv": {
    name: "Europe/Kyiv",
    countries: ["UA"],
  },
  "America/New_York": {
    name: "America/New_York",
    countries: ["US"],
  },
  "America/Detroit": {
    name: "America/Detroit",
    countries: ["US"],
  },
  "America/Kentucky/Louisville": {
    name: "America/Kentucky/Louisville",
    countries: ["US"],
  },
  "America/Kentucky/Monticello": {
    name: "America/Kentucky/Monticello",
    countries: ["US"],
  },
  "America/Indiana/Indianapolis": {
    name: "America/Indiana/Indianapolis",
    countries: ["US"],
  },
  "America/Indiana/Vincennes": {
    name: "America/Indiana/Vincennes",
    countries: ["US"],
  },
  "America/Indiana/Winamac": {
    name: "America/Indiana/Winamac",
    countries: ["US"],
  },
  "America/Indiana/Marengo": {
    name: "America/Indiana/Marengo",
    countries: ["US"],
  },
  "America/Indiana/Petersburg": {
    name: "America/Indiana/Petersburg",
    countries: ["US"],
  },
  "America/Indiana/Vevay": {
    name: "America/Indiana/Vevay",
    countries: ["US"],
  },
  "America/Chicago": {
    name: "America/Chicago",
    countries: ["US"],
  },
  "America/Indiana/Tell_City": {
    name: "America/Indiana/Tell_City",
    countries: ["US"],
  },
  "America/Indiana/Knox": {
    name: "America/Indiana/Knox",
    countries: ["US"],
  },
  "America/Menominee": {
    name: "America/Menominee",
    countries: ["US"],
  },
  "America/North_Dakota/Center": {
    name: "America/North_Dakota/Center",
    countries: ["US"],
  },
  "America/North_Dakota/New_Salem": {
    name: "America/North_Dakota/New_Salem",
    countries: ["US"],
  },
  "America/North_Dakota/Beulah": {
    name: "America/North_Dakota/Beulah",
    countries: ["US"],
  },
  "America/Denver": {
    name: "America/Denver",
    countries: ["US"],
  },
  "America/Boise": {
    name: "America/Boise",
    countries: ["US"],
  },
  "America/Phoenix": {
    name: "America/Phoenix",
    countries: ["US", "CA"],
  },
  "America/Los_Angeles": {
    name: "America/Los_Angeles",
    countries: ["US"],
  },
  "America/Anchorage": {
    name: "America/Anchorage",
    countries: ["US"],
  },
  "America/Juneau": {
    name: "America/Juneau",
    countries: ["US"],
  },
  "America/Sitka": {
    name: "America/Sitka",
    countries: ["US"],
  },
  "America/Metlakatla": {
    name: "America/Metlakatla",
    countries: ["US"],
  },
  "America/Yakutat": {
    name: "America/Yakutat",
    countries: ["US"],
  },
  "America/Nome": {
    name: "America/Nome",
    countries: ["US"],
  },
  "America/Adak": {
    name: "America/Adak",
    countries: ["US"],
  },
  "Pacific/Honolulu": {
    name: "Pacific/Honolulu",
    countries: ["US", "UM"],
  },
  "America/Montevideo": {
    name: "America/Montevideo",
    countries: ["UY"],
  },
  "Asia/Samarkand": {
    name: "Asia/Samarkand",
    countries: ["UZ"],
  },
  "Asia/Tashkent": {
    name: "Asia/Tashkent",
    countries: ["UZ"],
  },
  "America/Caracas": {
    name: "America/Caracas",
    countries: ["VE"],
  },
  "Asia/Ho_Chi_Minh": {
    name: "Asia/Ho_Chi_Minh",
    countries: ["VN"],
  },
  "Pacific/Efate": {
    name: "Pacific/Efate",
    countries: ["VU"],
  },
  "Pacific/Apia": {
    name: "Pacific/Apia",
    countries: ["WS"],
  },
  "Africa/Johannesburg": {
    name: "Africa/Johannesburg",
    countries: ["ZA", "LS", "SZ"],
  },
  "America/Antigua": {
    name: "America/Antigua",
    countries: ["AG"],
  },
  "America/Anguilla": {
    name: "America/Anguilla",
    countries: ["AI"],
  },
  "Africa/Luanda": {
    name: "Africa/Luanda",
    countries: ["AO"],
  },
  "Antarctica/McMurdo": {
    name: "Antarctica/McMurdo",
    countries: ["AQ"],
  },
  "Antarctica/DumontDUrville": {
    name: "Antarctica/DumontDUrville",
    countries: ["AQ"],
  },
  "Antarctica/Syowa": {
    name: "Antarctica/Syowa",
    countries: ["AQ"],
  },
  "Antarctica/Vostok": {
    name: "Antarctica/Vostok",
    countries: ["AQ"],
  },
  "America/Aruba": {
    name: "America/Aruba",
    countries: ["AW"],
  },
  "Europe/Mariehamn": {
    name: "Europe/Mariehamn",
    countries: ["AX"],
  },
  "Europe/Sarajevo": {
    name: "Europe/Sarajevo",
    countries: ["BA"],
  },
  "Africa/Ouagadougou": {
    name: "Africa/Ouagadougou",
    countries: ["BF"],
  },
  "Asia/Bahrain": {
    name: "Asia/Bahrain",
    countries: ["BH"],
  },
  "Africa/Bujumbura": {
    name: "Africa/Bujumbura",
    countries: ["BI"],
  },
  "Africa/Porto-Novo": {
    name: "Africa/Porto-Novo",
    countries: ["BJ"],
  },
  "America/St_Barthelemy": {
    name: "America/St_Barthelemy",
    countries: ["BL"],
  },
  "Asia/Brunei": {
    name: "Asia/Brunei",
    countries: ["BN"],
  },
  "America/Kralendijk": {
    name: "America/Kralendijk",
    countries: ["BQ"],
  },
  "America/Nassau": {
    name: "America/Nassau",
    countries: ["BS"],
  },
  "Africa/Gaborone": {
    name: "Africa/Gaborone",
    countries: ["BW"],
  },
  "America/Blanc-Sablon": {
    name: "America/Blanc-Sablon",
    countries: ["CA"],
  },
  "America/Atikokan": {
    name: "America/Atikokan",
    countries: ["CA"],
  },
  "America/Creston": {
    name: "America/Creston",
    countries: ["CA"],
  },
  "Indian/Cocos": {
    name: "Indian/Cocos",
    countries: ["CC"],
  },
  "Africa/Kinshasa": {
    name: "Africa/Kinshasa",
    countries: ["CD"],
  },
  "Africa/Lubumbashi": {
    name: "Africa/Lubumbashi",
    countries: ["CD"],
  },
  "Africa/Bangui": {
    name: "Africa/Bangui",
    countries: ["CF"],
  },
  "Africa/Brazzaville": {
    name: "Africa/Brazzaville",
    countries: ["CG"],
  },
  "Africa/Douala": {
    name: "Africa/Douala",
    countries: ["CM"],
  },
  "America/Curacao": {
    name: "America/Curacao",
    countries: ["CW"],
  },
  "Indian/Christmas": {
    name: "Indian/Christmas",
    countries: ["CX"],
  },
  "Europe/Busingen": {
    name: "Europe/Busingen",
    countries: ["DE"],
  },
  "Africa/Djibouti": {
    name: "Africa/Djibouti",
    countries: ["DJ"],
  },
  "Europe/Copenhagen": {
    name: "Europe/Copenhagen",
    countries: ["DK"],
  },
  "America/Dominica": {
    name: "America/Dominica",
    countries: ["DM"],
  },
  "Africa/Asmara": {
    name: "Africa/Asmara",
    countries: ["ER"],
  },
  "Africa/Addis_Ababa": {
    name: "Africa/Addis_Ababa",
    countries: ["ET"],
  },
  "Pacific/Chuuk": {
    name: "Pacific/Chuuk",
    countries: ["FM"],
  },
  "Pacific/Pohnpei": {
    name: "Pacific/Pohnpei",
    countries: ["FM"],
  },
  "Africa/Libreville": {
    name: "Africa/Libreville",
    countries: ["GA"],
  },
  "America/Grenada": {
    name: "America/Grenada",
    countries: ["GD"],
  },
  "Europe/Guernsey": {
    name: "Europe/Guernsey",
    countries: ["GG"],
  },
  "Africa/Accra": {
    name: "Africa/Accra",
    countries: ["GH"],
  },
  "Africa/Banjul": {
    name: "Africa/Banjul",
    countries: ["GM"],
  },
  "Africa/Conakry": {
    name: "Africa/Conakry",
    countries: ["GN"],
  },
  "America/Guadeloupe": {
    name: "America/Guadeloupe",
    countries: ["GP"],
  },
  "Africa/Malabo": {
    name: "Africa/Malabo",
    countries: ["GQ"],
  },
  "Europe/Zagreb": {
    name: "Europe/Zagreb",
    countries: ["HR"],
  },
  "Europe/Isle_of_Man": {
    name: "Europe/Isle_of_Man",
    countries: ["IM"],
  },
  "Atlantic/Reykjavik": {
    name: "Atlantic/Reykjavik",
    countries: ["IS"],
  },
  "Europe/Jersey": {
    name: "Europe/Jersey",
    countries: ["JE"],
  },
  "Asia/Phnom_Penh": {
    name: "Asia/Phnom_Penh",
    countries: ["KH"],
  },
  "Indian/Comoro": {
    name: "Indian/Comoro",
    countries: ["KM"],
  },
  "America/St_Kitts": {
    name: "America/St_Kitts",
    countries: ["KN"],
  },
  "Asia/Kuwait": {
    name: "Asia/Kuwait",
    countries: ["KW"],
  },
  "America/Cayman": {
    name: "America/Cayman",
    countries: ["KY"],
  },
  "Asia/Vientiane": {
    name: "Asia/Vientiane",
    countries: ["LA"],
  },
  "America/St_Lucia": {
    name: "America/St_Lucia",
    countries: ["LC"],
  },
  "Europe/Vaduz": {
    name: "Europe/Vaduz",
    countries: ["LI"],
  },
  "Africa/Maseru": {
    name: "Africa/Maseru",
    countries: ["LS"],
  },
  "Europe/Luxembourg": {
    name: "Europe/Luxembourg",
    countries: ["LU"],
  },
  "Europe/Monaco": {
    name: "Europe/Monaco",
    countries: ["MC"],
  },
  "Europe/Podgorica": {
    name: "Europe/Podgorica",
    countries: ["ME"],
  },
  "America/Marigot": {
    name: "America/Marigot",
    countries: ["MF"],
  },
  "Indian/Antananarivo": {
    name: "Indian/Antananarivo",
    countries: ["MG"],
  },
  "Pacific/Majuro": {
    name: "Pacific/Majuro",
    countries: ["MH"],
  },
  "Europe/Skopje": {
    name: "Europe/Skopje",
    countries: ["MK"],
  },
  "Africa/Bamako": {
    name: "Africa/Bamako",
    countries: ["ML"],
  },
  "Pacific/Saipan": {
    name: "Pacific/Saipan",
    countries: ["MP"],
  },
  "Africa/Nouakchott": {
    name: "Africa/Nouakchott",
    countries: ["MR"],
  },
  "America/Montserrat": {
    name: "America/Montserrat",
    countries: ["MS"],
  },
  "Africa/Blantyre": {
    name: "Africa/Blantyre",
    countries: ["MW"],
  },
  "Asia/Kuala_Lumpur": {
    name: "Asia/Kuala_Lumpur",
    countries: ["MY"],
  },
  "Africa/Niamey": {
    name: "Africa/Niamey",
    countries: ["NE"],
  },
  "Europe/Amsterdam": {
    name: "Europe/Amsterdam",
    countries: ["NL"],
  },
  "Europe/Oslo": {
    name: "Europe/Oslo",
    countries: ["NO"],
  },
  "Asia/Muscat": {
    name: "Asia/Muscat",
    countries: ["OM"],
  },
  "Indian/Reunion": {
    name: "Indian/Reunion",
    countries: ["RE"],
  },
  "Africa/Kigali": {
    name: "Africa/Kigali",
    countries: ["RW"],
  },
  "Indian/Mahe": {
    name: "Indian/Mahe",
    countries: ["SC"],
  },
  "Europe/Stockholm": {
    name: "Europe/Stockholm",
    countries: ["SE"],
  },
  "Atlantic/St_Helena": {
    name: "Atlantic/St_Helena",
    countries: ["SH"],
  },
  "Europe/Ljubljana": {
    name: "Europe/Ljubljana",
    countries: ["SI"],
  },
  "Arctic/Longyearbyen": {
    name: "Arctic/Longyearbyen",
    countries: ["SJ"],
  },
  "Europe/Bratislava": {
    name: "Europe/Bratislava",
    countries: ["SK"],
  },
  "Africa/Freetown": {
    name: "Africa/Freetown",
    countries: ["SL"],
  },
  "Europe/San_Marino": {
    name: "Europe/San_Marino",
    countries: ["SM"],
  },
  "Africa/Dakar": {
    name: "Africa/Dakar",
    countries: ["SN"],
  },
  "Africa/Mogadishu": {
    name: "Africa/Mogadishu",
    countries: ["SO"],
  },
  "America/Lower_Princes": {
    name: "America/Lower_Princes",
    countries: ["SX"],
  },
  "Africa/Mbabane": {
    name: "Africa/Mbabane",
    countries: ["SZ"],
  },
  "Indian/Kerguelen": {
    name: "Indian/Kerguelen",
    countries: ["TF"],
  },
  "Africa/Lome": {
    name: "Africa/Lome",
    countries: ["TG"],
  },
  "America/Port_of_Spain": {
    name: "America/Port_of_Spain",
    countries: ["TT"],
  },
  "Pacific/Funafuti": {
    name: "Pacific/Funafuti",
    countries: ["TV"],
  },
  "Africa/Dar_es_Salaam": {
    name: "Africa/Dar_es_Salaam",
    countries: ["TZ"],
  },
  "Africa/Kampala": {
    name: "Africa/Kampala",
    countries: ["UG"],
  },
  "Pacific/Midway": {
    name: "Pacific/Midway",
    countries: ["UM"],
  },
  "Pacific/Wake": {
    name: "Pacific/Wake",
    countries: ["UM"],
  },
  "Europe/Vatican": {
    name: "Europe/Vatican",
    countries: ["VA"],
  },
  "America/St_Vincent": {
    name: "America/St_Vincent",
    countries: ["VC"],
  },
  "America/Tortola": {
    name: "America/Tortola",
    countries: ["VG"],
  },
  "America/St_Thomas": {
    name: "America/St_Thomas",
    countries: ["VI"],
  },
  "Pacific/Wallis": {
    name: "Pacific/Wallis",
    countries: ["WF"],
  },
  "Asia/Aden": {
    name: "Asia/Aden",
    countries: ["YE"],
  },
  "Indian/Mayotte": {
    name: "Indian/Mayotte",
    countries: ["YT"],
  },
  "Africa/Lusaka": {
    name: "Africa/Lusaka",
    countries: ["ZM"],
  },
  "Africa/Harare": {
    name: "Africa/Harare",
    countries: ["ZW"],
  },
}

// File: lib/utils.ts
import { availableParams } from "@/config"
import { Movie, RawCombinedCredit, TvShow } from "@/tmdb/models"
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export function getRandomItems<T>(array: T[], count: number = 1): T[] {
  const maxStartIndex = array.length - count
  const startIndex = Math.floor(Math.random() * (maxStartIndex + 1))
  return array.slice(startIndex, startIndex + count)
}

export function getUniqueItems(list: any[]) {
  const unique = new Map(list.map((item) => [item.id, item]))
  return Array.from(unique.values())
}

export function getDepartments(list: RawCombinedCredit[]) {
  const departments = new Set(list.map((item) => item.department))
  return Array.from(departments)
}

export function getPersonHighlights(
  {
    cast,
    crew,
    department,
  }: {
    cast: RawCombinedCredit[]
    crew: RawCombinedCredit[]
    department: string
  },
  count = 8
) {
  const isActing = department === "Acting"

  const isRemarkable = (item: RawCombinedCredit) => {
    if (item.vote_count <= 0) return false
    if (item.media_type === "tv") return item.episode_count > 8
    return item.order < 10
  }

  const list = isActing
    ? sortByVoteScore(cast.filter(isRemarkable))
    : sortByVoteScore(crew)

  const highlights = getUniqueItems(list).slice(0, count)

  const hero = getRandomItems(
    highlights.filter((item) => item.backdrop_path)
  )[0]

  return {
    highlights,
    hero,
  }
}

function sortByVoteScore(items: Movie[] | TvShow[] | RawCombinedCredit[]) {
  return items.sort((a, b) => {
    const aScore = a.vote_average * (a.vote_count / 1000)
    const bScore = b.vote_average * (b.vote_count / 1000)
    return bScore - aScore
  })
}

export function filterByDepartment(
  list: RawCombinedCredit[],
  department: string
) {
  return list.filter((item) => item.department === department)
}

export function sortByReleaseDate(
  list: Movie[],
  order: "asc" | "desc" = "asc"
) {
  return list.sort((a, b) => {
    const dateA = new Date(a.release_date).getTime()
    const dateB = new Date(b.release_date).getTime()
    return order === "asc" ? dateA - dateB : dateB - dateA
  })
}

export function pluralize(count: number, singular: string, plural: string) {
  return count === 1 ? singular : plural
}

export function joiner(arr: any[], key: string) {
  return arr.length ? arr.map((item) => item[key]).join(", ") : "—"
}

export function formatValue(value: any, formatter?: any) {
  return value ? (formatter ? formatter(value) : value) : "—"
}

export function pad(value: number) {
  return String(value).padStart(2, "0")
}

export function getUserTimezone() {
  return Intl.DateTimeFormat().resolvedOptions().timeZone
}

export function getCountryName(code: string) {
  return new Intl.DisplayNames("en", { type: "region" }).of(code)
}

export function filterDiscoverParams(
  params?: Record<string, string>
): Record<string, string> {
  return Object.fromEntries(
    Object.entries(params ?? {}).filter(([key]) =>
      availableParams.includes(key)
    )
  )
}

// File: tmdb/api/api.ts
import apiConfig from "./config"

type FetcherOptions = {
  endpoint: string
  params?: Record<string, string | undefined>
}

type Fetcher = <T>(options: FetcherOptions, init?: RequestInit) => Promise<T>

/**
 * Sanitizes the given parameters by removing entries with undefined values.
 * This ensures that only valid parameters are included in the API request.
 *
 * @param {Record<string, string | undefined>} params - The parameters to be sanitized.
 * @returns {Record<string, string>} A new parameters object with undefined values removed.
 */
const sanitizeParams = (params?: Record<string, string | undefined>) => {
  return Object.fromEntries(
    Object.entries(params ?? {}).filter(([, value]) => value !== undefined)
  )
}

/**
 * Creates a URL search params string from the given parameters.
 * Merges default parameters from the API configuration with the provided parameters.
 * Undefined parameters are filtered out.
 *
 * @param {Record<string, string | undefined>} params - The parameters to include in the search string.
 * @returns {string} The URL search params string.
 */
const createSearchParams = (params: Record<string, string | undefined>) => {
  const sanitizedParams = sanitizeParams(params)
  const mergedParams: Record<string, string> = {
    ...apiConfig.defaultParams,
    ...sanitizedParams,
  } as Record<string, string>

  return new URLSearchParams(mergedParams).toString()
}

/**
 * Creates a Headers instance for the fetch request.
 * Merges default headers from the API configuration with any headers provided in the init object.
 *
 * @param {RequestInit} [init] - Optional initial settings for the fetch request, including headers.
 * @returns {Headers} The Headers instance for the fetch request.
 */
const createHeaders = (init?: RequestInit): Headers => {
  const headers = init?.headers ?? {}
  const mergedHeaders = { ...apiConfig.defaultHeaders, ...headers }
  return new Headers(mergedHeaders)
}

/**
 * Fetches data from the specified endpoint using the provided parameters and initialization options.
 * Sanitizes parameters to remove any undefined values, constructs the full URL with parameters,
 * and performs the fetch request with custom headers.
 * Throws an error if the response is not ok.
 *
 * @template T The expected type of the response JSON.
 * @param {{ endpoint: string, params?: Record<string, string | undefined> }} options - The endpoint and optional parameters for the fetch request.
 * @param {RequestInit} [init] - Optional initial settings for the fetch request.
 * @returns {Promise<T>} A promise resolving to the response JSON in the expected type.
 */
const fetcher: Fetcher = async ({ endpoint, params }, init) => {
  const sanitizedParams = sanitizeParams(params)
  const _params = createSearchParams(sanitizedParams)
  const _headers = createHeaders(init)

  const _init = {
    ...init,
    next: { revalidate: 600, ...init?.next },
    headers: _headers,
  }

  const url = `${apiConfig.baseUrl}/${endpoint}?${_params}`
  const response = await fetch(url, _init)

  // if (!response.ok) {
  //   throw new Error(
  //     `API request failed with status ${response.status}: ${response.statusText}`
  //   )
  // }

  return await response.json()
}

export const api = {
  fetcher,
}

// File: tmdb/api/collection/index.ts
import { DetailedCollection } from "@/tmdb/models"

import { api } from "../api"
import { CollectionRequestParams } from "./types"

/**
 * Fetches detailed information about a specific collection from the TMDB API.
 *
 * @param {CollectionRequestParams} params - The parameters for the collection request, including the collection ID.
 * @returns {Promise<DetailedCollection>} A promise that resolves to the detailed information about the collection.
 * @see https://developers.themoviedb.org/3/collections/collection-details
 */
const details = ({ id }: CollectionRequestParams) =>
  api.fetcher<DetailedCollection>({
    endpoint: `collection/${id}`,
  })

export const collection = {
  details,
}

// File: tmdb/api/collection/types.ts
export type CollectionRequestParams = {
  id: string | number
}

// File: tmdb/api/config.ts
/**
 * Configuration for the TMDB API.
 *
 * Defines the base URL for all API requests, default headers including content type and authorization,
 * and default parameters such as the language setting.
 */

/**
 * The base URL for the TMDB API.
 * @type {string}
 */
const baseUrl: string = "https://api.themoviedb.org/3"

/**
 * Default headers for API requests.
 * Includes the Content-Type and Authorization constructed using the TMDB_KEY environment variable.
 * @type {Record<string, string>}
 */
const defaultHeaders: Record<string, string> = {
  "Content-Type": "application/json",
  Authorization: `Bearer ${process.env.TMDB_KEY}`,
}

/**
 * Default parameters for API requests.
 * Currently, only includes the default language setting.
 * @type {Record<string, string>}
 */
const defaultParams: Record<string, string> = {
  language: "en-US",
}

/**
 * The aggregated API configuration object.
 * Combines the baseUrl, defaultHeaders, and defaultParams into a single object for export.
 * @type {{ baseUrl: string, defaultHeaders: Record<string, string>, defaultParams: Record<string, string> }}
 */
const apiConfig: {
  baseUrl: string
  defaultHeaders: Record<string, string>
  defaultParams: Record<string, string>
} = {
  baseUrl,
  defaultHeaders,
  defaultParams,
}

export default apiConfig

// File: tmdb/api/discover/index.ts
import { api } from "@/tmdb/api/api"
import {
  DiscoverMovieRequestParams,
  DiscoverTvRequestParams,
  ListResponse,
} from "@/tmdb/api/types"
import { Movie, TvShow } from "@/tmdb/models"

/**
 * Fetches a list of movies based on the provided request parameters.
 *
 * @param args - The request parameters for discovering movies.
 * @returns A Promise that resolves to a ListResponse containing the discovered movies.
 */
const movie = (args: DiscoverMovieRequestParams) =>
  api.fetcher<ListResponse<Movie>>({
    endpoint: "discover/movie",
    params: args as Record<string, string>,
  })

/**
 * Fetches a list of tv shows based on the provided request parameters.
 *
 * @param args - The request parameters for discovering movies.
 * @returns A Promise that resolves to a ListResponse containing the discovered movies.
 */
const tv = (args: DiscoverTvRequestParams) =>
  api.fetcher<ListResponse<TvShow>>({
    endpoint: "discover/tv",
    params: args as Record<string, string>,
  })

export const discover = {
  movie,
  tv,
}

// File: tmdb/api/discover/types.ts
export type SortByType =
  | "popularity.asc"
  | "popularity.desc"
  | "vote_average.asc"
  | "vote_average.desc"
  | "vote_count.asc"
  | "vote_count.desc"

export type SortByTypeMovie =
  | SortByType
  | "primary_release_date.asc"
  | "primary_release_date.desc"
  | "release_date.asc"
  | "release_date.desc"
  | "revenue.asc"
  | "revenue.desc"
  | "original_title.asc"
  | "original_title.desc"

export type SortByTypeTv =
  | SortByType
  | "first_air_date.asc"
  | "first_air_date.desc"
  | "vote_average.asc"
  | "vote_average.desc"
  | "vote_count.asc"
  | "vote_count.desc"
  | "original_name.asc"
  | "original_name.desc"

export type DiscoverRequestParams = {
  page?: string
  sort_by?: SortByTypeMovie
  certification?: string
  "certification.gte"?: string
  "certification.lte"?: string
  certification_country?: string
  include_adult?: boolean
  include_video?: boolean
  "vote_average.gte"?: string
  "vote_average.lte"?: string
  "vote_count.gte"?: string
  "vote_count.lte"?: string
  "with_runtime.gte"?: string
  "with_runtime.lte"?: string
  with_cast?: string
  with_crew?: string
  with_companies?: string
  with_genres?: string
  with_keywords?: string
  with_people?: string
  with_networks?: string
  with_original_language?: string
  with_release_type?: string
  with_watch_providers?: string
  with_watch_monetization_types?: string
  watch_region?: string
  without_genres?: string
  without_keywords?: string
  year?: string
}

export type DiscoverMovieRequestParams = DiscoverRequestParams & {
  primary_release_year?: string
  "primary_release_date.gte"?: string
  "primary_release_date.lte"?: string
  "release_date.gte"?: string
  "release_date.lte"?: string
}

export type DiscoverTvRequestParams = DiscoverRequestParams & {
  first_air_date_year?: string
  "first_air_date.gte"?: string
  "first_air_date.lte"?: string
}

// File: tmdb/api/genres/index.ts
import { api } from "@/tmdb/api/api"
import { GenreResponse } from "@/tmdb/api/types"

/**
 * Fetches the list of movie genres from the TMDB API.
 * @returns A promise that resolves to the genre response.
 */
const movie = () =>
  api.fetcher<GenreResponse>({
    endpoint: "genre/movie/list",
  })

/**
 * Fetches the list of tv show genres from the TMDB API.
 * @returns A promise that resolves to the genre response.
 */
const tv = () =>
  api.fetcher<GenreResponse>({
    endpoint: "genre/tv/list",
  })

export const genres = {
  movie,
  tv,
}

// File: tmdb/api/genres/types.ts
import { Genre } from "@/tmdb/models/commons"

export type GenreResponse = {
  genres: Genre[]
}

// File: tmdb/api/index.ts
import { collection } from "./collection"
import { discover } from "./discover"
import { genres } from "./genres"
import { movie } from "./movie"
import { person } from "./person"
import { search } from "./search"
import { trending } from "./trending"
import { tv } from "./tv"
import { tvSeasons } from "./tv-seasons"
import { watchProviders } from "./watch-providers"

export const tmdb = {
  collection,
  discover,
  genres,
  movie,
  person,
  search,
  trending,
  tv,
  tvSeasons,
  watchProviders,
}

// File: tmdb/api/movie/index.ts
import {
  Credits,
  GetImagesResponse,
  GetVideosResponse,
  Movie,
  MovieDetails,
  Review,
  WatchProviders,
} from "@/tmdb/models"

import { api } from "../api"
import { ListResponse } from "../types"
import {
  MovieCreditsRequestParams,
  MovieDetailsRequestParams,
  MovieImagesRequestParams,
  MovieListRequestParams,
  MovieProvidersRequestParams,
  MovieRecommendationsRequestParams,
  MovieReviewsRequestParams,
  MovieSimilarRequestParams,
  MovieVideosRequestParams,
} from "./types"

/**
 * Fetches a list of movies based on the specified criteria.
 *
 * @param {MovieListRequestParams} params - The parameters for the movie list request, including list type, page, and region.
 * @returns {Promise<ListResponse<Movie>>} A promise that resolves to the list of movies.
 * @see https://developer.themoviedb.org/reference/movie-now-playing-list
 * @see https://developer.themoviedb.org/reference/movie-popular-list
 * @see https://developer.themoviedb.org/reference/movie-top-rated-list
 * @see https://developer.themoviedb.org/reference/movie-upcoming-list
 */
const list = ({ list, page, region }: MovieListRequestParams) =>
  api.fetcher<ListResponse<Movie>>({
    endpoint: `movie/${list}`,
    params: {
      page,
      region,
    },
  })

/**
 * Fetches detailed information about a specific movie.
 *
 * @param {MovieDetailsRequestParams} params - The parameters for the movie details request, including the movie ID and any additional data to append.
 * @returns {Promise<MovieDetails>} A promise that resolves to the detailed information about the movie.
 * @see https://developer.themoviedb.org/reference/movie-details
 */
const detail = <T>({ id, append }: MovieDetailsRequestParams) =>
  api.fetcher<MovieDetails & T>({
    endpoint: `movie/${id}`,
    params: {
      append_to_response: append,
    },
  })

/**
 * Fetches the credits (cast and crew) for a specific movie.
 *
 * @param {MovieCreditsRequestParams} params - The parameters for the movie credits request, including the movie ID.
 * @returns {Promise<Credits>} A promise that resolves to the credits for the movie.
 * @see https://developer.themoviedb.org/reference/movie-credits
 */
const credits = ({ id }: MovieCreditsRequestParams) =>
  api.fetcher<Credits>({
    endpoint: `movie/${id}/credits`,
  })

/**
 * Fetches recommendations for a specific movie.
 *
 * @param {MovieRecommendationsRequestParams} params - The parameters for the movie recommendations request, including the movie ID and page number.
 * @returns {Promise<ListResponse<Movie>>} A promise that resolves to a list of recommended movies.
 * @see https://developer.themoviedb.org/reference/movie-recommendations
 */
const recommendations = ({ id, page }: MovieRecommendationsRequestParams) =>
  api.fetcher<ListResponse<Movie>>({
    endpoint: `movie/${id}/recommendations`,
    params: {
      page,
    },
  })

/**
 * Fetches movies similar to a specific movie.
 *
 * @param {MovieSimilarRequestParams} params - The parameters for the movie similar request, including the movie ID and page number.
 * @returns {Promise<ListResponse<Movie>>} A promise that resolves to a list of similar movies.
 * @see https://developer.themoviedb.org/reference/movie-similar
 */
const similar = ({ id, page }: MovieSimilarRequestParams) =>
  api.fetcher<ListResponse<Movie>>({
    endpoint: `movie/${id}/similar`,
    params: {
      page,
    },
  })

/**
 * Fetches images for a specific movie.
 *
 * @param {MovieImagesRequestParams} params - The parameters for the movie images request, including the movie ID and languages for the images.
 * @returns {Promise<GetImagesResponse>} A promise that resolves to the images of the movie.
 * @see https://developer.themoviedb.org/reference/movie-images
 */
const images = ({ id, langs }: MovieImagesRequestParams) =>
  api.fetcher<GetImagesResponse>({
    endpoint: `movie/${id}/images`,
    params: {
      include_image_language: langs,
    },
  })

/**
 * Fetches videos for a specific movie.
 *
 * @param {MovieVideosRequestParams} params - The parameters for the movie videos request, including the movie ID.
 * @returns {Promise<GetVideosResponse>} A promise that resolves to the videos of the movie.
 * @see https://developer.themoviedb.org/reference/movie-videos
 */
const videos = ({ id }: MovieVideosRequestParams) =>
  api.fetcher<GetVideosResponse>({
    endpoint: `movie/${id}/videos`,
  })

/**
 * Fetches reviews for a specific movie.
 *
 * @param {MovieReviewsRequestParams} params - The parameters for the movie reviews request, including the movie ID and page number.
 * @returns {Promise<ListResponse<Review>>} A promise that resolves to a list of reviews for the movie.
 * @see https://developer.themoviedb.org/reference/movie-reviews
 */
const reviews = ({ id, page }: MovieReviewsRequestParams) =>
  api.fetcher<ListResponse<Review>>({
    endpoint: `movie/${id}/reviews`,
    params: {
      page,
    },
  })

/**
 * Fetches providers for a specific movie.
 *
 * @param {MovieProvidersRequestParams} params - The parameters for the movie reviews request, including the movie ID and page number.
 * @returns {Promise<WatchProviders>} A promise that resolves to a list of reviews for the movie.
 * @see https://developer.themoviedb.org/reference/movie-watch-providers
 */
const providers = ({ id, region }: MovieProvidersRequestParams) =>
  api.fetcher<WatchProviders>({
    endpoint: `movie/${id}/watch/providers`,
    params: {
      watch_region: region,
    },
  })

export const movie = {
  list,
  detail,
  credits,
  recommendations,
  similar,
  images,
  videos,
  reviews,
  providers,
}

export * from "./types"

// File: tmdb/api/movie/types.ts
export type MovieListType = "popular" | "top_rated" | "now_playing" | "upcoming"

export type MovieListRequestParams = {
  list: MovieListType
  page?: string
  region?: string
}

export type MovieDetailsRequestParams = {
  id: string | number
  append?: string
}

export type MovieCreditsRequestParams = {
  id: string | number
}

export type MovieRecommendationsRequestParams = {
  id: string | number
  page?: string
}

export type MovieSimilarRequestParams = {
  id: string | number
  page?: string
}

export type MovieImagesRequestParams = {
  id: string | number
  langs?: string
}

export type MovieVideosRequestParams = {
  id: string | number
}

export type MovieReviewsRequestParams = {
  id: string | number
  page?: string
}

export type MovieProvidersRequestParams = {
  id: string | number
  region?: string
}

// File: tmdb/api/person/index.ts
import { ListResponse } from "@/tmdb/api/types"
import { CombinedCreditsResponse, Person, PersonDetails } from "@/tmdb/models"

import { api } from "../api"
import { PersonDetailsRequestParams, PersonListRequestParams } from "./types"

/**
 * Fetches a list of movies based on the specified criteria.
 *
 * @param {PersonListRequestParams} params - The parameters for the movie list request, including list type, page, and region.
 * @returns {Promise<ListResponse<Person>>} A promise that resolves to the list of movies.
 * @see https://developer.themoviedb.org/reference/person-popular-list
 */
const list = async ({ list, page }: PersonListRequestParams) =>
  api.fetcher<ListResponse<Person>>({
    endpoint: `person/${list}`,
    params: {
      page,
    },
  })

/**
 * Fetches details for a person by ID.
 * @param id - Person ID.
 * @param append - Additional information to append to the response.
 * @returns A promise resolving to the person details.
 * @see https://developers.themoviedb.org/3/reference/person-details
 */
const detail = async <T>({ id, append }: PersonDetailsRequestParams) =>
  api.fetcher<PersonDetails & T>({
    endpoint: `person/${id}`,
    params: {
      append_to_response: append,
    },
  })

/**
 * Fetches combined credits for a person by ID.
 * @param id - Person ID.
 * @returns A promise resolving to the combined credits for the person.
 * @see https://developers.themoviedb.org/3/reference/person-combined-credits
 */
const combinedCredits = async ({ id }: PersonDetailsRequestParams) =>
  api.fetcher<CombinedCreditsResponse>({
    endpoint: `person/${id}/combined_credits`,
  })

export const person = {
  detail,
  list,
  combinedCredits,
}

// File: tmdb/api/person/types.ts
import { CombinedCreditsResponse } from "@/tmdb/models"

export type PersonListType = "popular"

export type PersonDetailsRequestParams = {
  id: string | number
  append?: string
}

export type PersonListRequestParams = {
  list: PersonListType
  page?: string
}

export type WithCombinedCredits = {
  combined_credits: CombinedCreditsResponse
}

// File: tmdb/api/search/index.ts
import {
  MovieWithMediaType,
  PersonWithMediaType,
  TvShowWithMediaType,
} from "@/tmdb/models"

import { api } from "../api"
import { ListResponse } from "../types"
import { SearchRequestParams } from "./types"

/**
 * Fetches a list of movies, TV shows, and people based on the specified search query.
 *
 * @param {SearchRequestParams} params - The parameters for the search request, including the search query, adult content filter, and page number.
 * @returns {Promise<ListResponse<MovieWithMediaType | TvShowWithMediaType | PersonWithMediaType>>} A promise that resolves to the list of movies, TV shows, and people.
 * @see https://developers.themoviedb.org/3/search-multi
 */
const multi = async ({
  query,
  adult = false,
  page = "1",
}: SearchRequestParams) =>
  api.fetcher<
    ListResponse<MovieWithMediaType | TvShowWithMediaType | PersonWithMediaType>
  >({
    endpoint: "/search/multi",
    params: {
      query,
      page,
      include_adult: String(adult),
    },
  })

export const search = {
  multi,
}

// File: tmdb/api/search/types.ts
export type SearchRequestParams = {
  query: string
  page?: string
  adult?: boolean
}

// File: tmdb/api/trending/index.ts
import {
  MovieWithMediaType,
  PersonWithMediaType,
  TvShowWithMediaType,
} from "@/tmdb/models"

import { api } from "../api"
import { ListResponse } from "../types"
import { TrendingRequestParams } from "./types"

/**
 * Fetches a list of trending movies, TV shows, or people based on the specified criteria.
 *
 * @param {TrendingRequestParams} params - The parameters for the trending request, including the time window and page number.
 * @returns {Promise<ListResponse<MovieWithMediaType | TvShowWithMediaType | PersonWithMediaType>>} A promise that resolves to the list of trending movies, TV shows, or people.
 * @see https://developers.themoviedb.org/3/trending/trending-movies
 */
const movie = ({ time, page = "1" }: TrendingRequestParams) =>
  api.fetcher<ListResponse<MovieWithMediaType>>({
    endpoint: `trending/movie/${time}`,
    params: {
      page,
    },
  })

/**
 * Fetches a list of trending TV shows based on the specified criteria.
 *
 * @param {TrendingRequestParams} params - The parameters for the trending request, including the time window and page number.
 * @returns {Promise<ListResponse<TvShowWithMediaType>>} A promise that resolves to the list of trending TV shows.
 * @see https://developers.themoviedb.org/3/trending/trending-tv
 */
const tv = ({ time, page = "1" }: TrendingRequestParams) =>
  api.fetcher<ListResponse<TvShowWithMediaType>>({
    endpoint: `trending/tv/${time}`,
    params: {
      page,
    },
  })

/**
 * Fetches a list of trending people based on the specified criteria.
 *
 * @param {TrendingRequestParams} params - The parameters for the trending request, including the time window and page number.
 * @returns {Promise<ListResponse<PersonWithMediaType>>} A promise that resolves to the list of trending people.
 * @see https://developers.themoviedb.org/3/trending/trending-people
 */
const people = ({ time, page = "1" }: TrendingRequestParams) =>
  api.fetcher<ListResponse<PersonWithMediaType>>({
    endpoint: `trending/person/${time}`,
    params: {
      page,
    },
  })

export const trending = {
  movie,
  tv,
  people,
}

// File: tmdb/api/trending/types.ts
export type TrendingRequestParams = {
  time: "day" | "week"
  page?: string
}

// File: tmdb/api/tv/index.ts
import {
  Credits,
  GetImagesResponse,
  GetVideosResponse,
  Review,
  TvShow,
  TvShowDetails,
  WatchProviders,
} from "@/tmdb/models"

import { api } from "../api"
import { ListResponse } from "../types"
import {
  TvCreditsRequestParams,
  TvDetailsRequestParams,
  TvImagesRequestParams,
  TvListRequestParams,
  TvProvidersRequestParams,
  TvRecommendationsRequestParams,
  TvReviewsRequestParams,
  TvSimilarRequestParams,
  TvVideosRequestParams,
} from "./types"

/**
 * Fetches a list of TV shows based on the specified criteria.
 *
 * @param {TvListRequestParams} params - The parameters for the TV list request, including list type, page, and region.
 * @returns {Promise<ListResponse<TvShow>>} A promise that resolves to the list of TV shows.
 * @see https://developer.themoviedb.org/reference/tv-series-airing-today
 * @see https://developer.themoviedb.org/reference/tv-series-on-the-air
 * @see https://developer.themoviedb.org/reference/tv-series-popular
 * @see https://developer.themoviedb.org/reference/tv-series-top-rated
 */
const list = ({ list, page = "1", region, timezone }: TvListRequestParams) =>
  api.fetcher<ListResponse<TvShow>>({
    endpoint: `tv/${list}`,
    params: {
      page,
      region,
      timezone,
    },
  })

/**
 * Fetches detailed information about a specific TV series.
 *
 * @param {TvDetailsRequestParams} params - The parameters for the TV details request, including the TV series ID and any additional data to append.
 * @returns {Promise<TvShowDetails>} A promise that resolves to the detailed information about the TV series.
 * @see https://developer.themoviedb.org/reference/tv-series-details
 */
const detail = <T>({ id, append }: TvDetailsRequestParams) =>
  api.fetcher<TvShowDetails & T>({
    endpoint: `tv/${id}`,
    params: {
      append_to_response: append,
    },
  })

/**
 * Fetches the credits (cast and crew) for a specific TV series.
 *
 * @param {TvCreditsRequestParams} params - The parameters for the TV credits request, including the TV series ID.
 * @returns {Promise<Credits>} A promise that resolves to the credits for the TV series.
 * @see https://developer.themoviedb.org/reference/tv-series-credits
 */
const credits = ({ id }: TvCreditsRequestParams) =>
  api.fetcher<Credits>({
    endpoint: `tv/${id}/credits`,
  })

/**
 * Fetches recommendations for a specific TV series.
 *
 * @param {TvRecommendationsRequestParams} params - The parameters for the TV recommendations request, including the TV series ID and page number.
 * @returns {Promise<ListResponse<TvShow>>} A promise that resolves to a list of recommended TV shows.
 * @see https://developer.themoviedb.org/reference/tv-series-recommendations
 */
const recommendations = ({ id, page }: TvRecommendationsRequestParams) =>
  api.fetcher<ListResponse<TvShow>>({
    endpoint: `tv/${id}/recommendations`,
    params: {
      page,
    },
  })

/**
 * Fetches TV shows similar to a specific TV series.
 *
 * @param {TvSimilarRequestParams} params - The parameters for the TV similar request, including the TV series ID and page number.
 * @returns {Promise<ListResponse<TvShow>>} A promise that resolves to a list of similar TV shows.
 * @see https://developer.themoviedb.org/reference/tv-series-similar
 */
const similar = ({ id, page }: TvSimilarRequestParams) =>
  api.fetcher<ListResponse<TvShow>>({
    endpoint: `tv/${id}/similar`,
    params: {
      page,
    },
  })

/**
 * Fetches images for a specific TV series.
 *
 * @param {TvImagesRequestParams} params - The parameters for the TV images request, including the TV series ID and languages for the images.
 * @returns {Promise<GetImagesResponse>} A promise that resolves to the images of the TV series.
 * @see https://developer.themoviedb.org/reference/tv-series-images
 */
const images = ({ id, langs }: TvImagesRequestParams) =>
  api.fetcher<GetImagesResponse>({
    endpoint: `tv/${id}/images`,
    params: {
      include_image_language: langs,
    },
  })

/**
 * Fetches videos related to a specific TV series.
 *
 * @param {TvVideosRequestParams} params - The parameters for the TV videos request, including the TV series ID.
 * @returns {Promise<GetVideosResponse>} A promise that resolves to the videos of the TV series.
 * @see https://developer.themoviedb.org/reference/tv-series-videos
 */
const videos = ({ id }: TvVideosRequestParams) =>
  api.fetcher<GetVideosResponse>({
    endpoint: `tv/${id}/videos`,
  })

/**
 * Fetches reviews for a specific TV series.
 *
 * @param {TvReviewsRequestParams} params - The parameters for the TV reviews request, including the TV series ID and page number.
 * @returns {Promise<ListResponse<Review>>} A promise that resolves to the reviews of the TV series.
 * @see https://developer.themoviedb.org/reference/tv-series-reviews
 */
const reviews = ({ id, page }: TvReviewsRequestParams) =>
  api.fetcher<ListResponse<Review>>({
    endpoint: `tv/${id}/reviews`,
    params: {
      page,
    },
  })

/**
 * Fetches providers for a specific TV Series.
 *
 * @param {TvProvidersRequestParams} params - The parameters for the movie reviews request, including the movie ID and page number.
 * @returns {Promise<WatchProviders>} A promise that resolves to a list of reviews for the movie.
 * @see https://developer.themoviedb.org/reference/tv-series-watch-providers
 */
const providers = ({ id, region }: TvProvidersRequestParams) =>
  api.fetcher<WatchProviders>({
    endpoint: `tv/${id}/watch/providers`,
    params: {
      watch_region: region,
    },
  })

export const tv = {
  list,
  detail,
  credits,
  recommendations,
  similar,
  images,
  videos,
  reviews,
  providers,
}

export * from "./types"

// File: tmdb/api/tv/types.ts
export type TvListType = "popular" | "top_rated" | "on_the_air" | "airing_today"

export type TvListRequestParams = {
  list: TvListType
  page?: string
  region?: string
  timezone?: string
}

export type TvDetailsRequestParams = {
  id: string
  append?: string
}

export type TvCreditsRequestParams = {
  id: string | number
}

export type TvRecommendationsRequestParams = {
  id: string | number
  page?: string
}

export type TvSimilarRequestParams = {
  id: string | number
  page?: string
}

export type TvImagesRequestParams = {
  id: string | number
  langs?: string
}

export type TvVideosRequestParams = {
  id: string | number
}

export type TvReviewsRequestParams = {
  id: string | number
  page?: string
}

export type TvProvidersRequestParams = {
  id: string | number
  region?: string
}

// File: tmdb/api/tv-seasons/index.ts
import { Credits, SeasonDetails } from "@/tmdb/models"

import { api } from "../api"
import { TvSeasonsDetailsRequestParams } from "./types"

/**
 * Fetches detailed information about a specific TV season.
 *
 * @param {TvSeasonsDetailsRequestParams} params - The parameters for the TV season details request, including the TV series ID and the season number.
 * @returns {Promise<SeasonDetails>} A promise that resolves to the detailed information about the TV season.
 * @see https://developer.themoviedb.org/reference/tv-season-details
 */
const details = <T>({ id, season, append }: TvSeasonsDetailsRequestParams) =>
  api.fetcher<SeasonDetails & T>({
    endpoint: `tv/${id}/season/${season}`,
    params: {
      append_to_response: append,
    },
  })

const credits = ({ id, season }: TvSeasonsDetailsRequestParams) =>
  api.fetcher<Credits>({
    endpoint: `tv/${id}/season/${season}/credits`,
  })

const aggregateCredits = ({ id, season }: TvSeasonsDetailsRequestParams) =>
  api.fetcher<Credits>({
    endpoint: `tv/${id}/season/${season}/aggregate_credits`,
  })

export const tvSeasons = {
  details,
  credits,
  aggregateCredits,
}

// File: tmdb/api/tv-seasons/types.ts
export type TvSeasonsDetailsRequestParams = {
  id: number | string
  season: number
  append?: string
}

// File: tmdb/api/types.ts
import { Cast, Crew, Image, Video } from "@/tmdb/models"

export * from "./movie/types"
export * from "./trending/types"
export * from "./tv/types"
export * from "./person/types"
export * from "./collection/types"
export * from "./search/types"
export * from "./discover/types"
export * from "./genres/types"
export * from "./watch-providers/types"

export type ListResponse<T> = {
  page: number
  results: T[]
  total_pages: number
  total_results: number
}

export type WithImages = {
  images: {
    posters: Image[]
    backdrops: Image[]
    logos: Image[]
    profiles: Image[]
  }
}

export type WithVideos = {
  videos: {
    results: Video[]
  }
}

export type WithCredits = {
  credits: {
    cast: Cast[]
    crew: Crew[]
  }
}

// File: tmdb/api/watch-providers/index.ts
import { api } from "@/tmdb/api/api"
import { ListResponse, WatchProvidersRequestParams } from "@/tmdb/api/types"
import { GetAvailableRegionsResponse, WatchProvider } from "@/tmdb/models"

/**
 * Fetches the available regions for watch providers.
 *
 * @returns {Promise<GetAvailableRegionsResponse>} A promise that resolves to a list of reviews for the movie.
 * @see https://developer.themoviedb.org/reference/watch-providers-available-regions
 */
const regions = () =>
  api.fetcher<GetAvailableRegionsResponse>({
    endpoint: `watch/providers/regions`,
  })

/**
 * Fetches the list of Movie watch providers based on the specified region.
 *
 * @param {WatchProvidersRequestParams} params - The request parameters.
 * @returns {Promise<ListResponse<WatchProvider>>} - The list of Movie watch providers.
 */
const movie = ({ region }: WatchProvidersRequestParams) =>
  api.fetcher<ListResponse<WatchProvider>>({
    endpoint: `watch/providers/movie`,
    params: {
      watch_region: region,
    },
  })

/**
 * Fetches the list of TV watch providers based on the specified region.
 *
 * @param {WatchProvidersRequestParams} params - The request parameters.
 * @returns {Promise<ListResponse<WatchProvider>>} - The list of TV watch providers.
 */
const tv = ({ region }: WatchProvidersRequestParams) =>
  api.fetcher<ListResponse<WatchProvider>>({
    endpoint: `watch/providers/tv`,
    params: {
      watch_region: region,
    },
  })

export const watchProviders = {
  regions,
  movie,
  tv,
}

// File: tmdb/api/watch-providers/types.ts
export type WatchProvidersRequestParams = {
  region?: string
}

// File: tmdb/models/collections.ts
import { Movie } from "./movie"

export type Collection = {
  id: number
  backdrop_path: string
  name: string
  poster_path: string
  adult: boolean
  original_language: string
  original_name: string
  overview: string
}

export type DetailedCollection = Collection & {
  parts: Movie[]
}

// File: tmdb/models/combined-credits.ts
import { MovieWithMediaType, TvShowWithMediaType } from "."
import { MediaType } from "./commons"

export type RawMovieCredit = MovieWithMediaType &
  CombinedCredit & {
    character: string
    release_date: string
    order: number
    department: string
    job: string
    credit_id: string
  }

export type RawTvShowCredit = TvShowWithMediaType &
  CombinedCredit & {
    character: string
    order: number
    episode_count: number
    first_air_date: string
    job: string
    department: string
    credit_id: string
  }

export type RawCombinedCredit = RawMovieCredit | RawTvShowCredit

export type CombinedCreditsResponse = {
  cast: Array<RawCombinedCredit>
  crew: Array<RawCombinedCredit>
}

export type CombinedCredit = {
  id: number
  adult: boolean
  title: string
  date: string
  media_type: MediaType
  role: string
  vote_average: number
  vote_count: number
  backdrop_path?: string
  department?: string
}

export type CombinedCredits = {
  cast: Array<CombinedCredit>
  crew: Array<CombinedCredit>
}

// File: tmdb/models/commons.ts
export type MediaType = "tv" | "movie" | "person"
export type WithMediaType<T, K extends MediaType> = T & {
  media_type: K
}

export type ProductionCountry = {
  iso_3166_1: string
  name: string
}

export type ProductionCompany = {
  id: number
  logo_path: string
  name: string
  origin_country: string
}

export type SpokenLanguage = {
  english_name: string
  iso_639_1: string
  name: string
}

export type Genre = {
  id: number
  name: string
}

// File: tmdb/models/credits.ts
export type Cast = {
  adult: boolean
  gender: number
  id: number
  known_for_department: string
  name: string
  original_name: string
  popularity: number
  profile_path: string
  cast_id: number
  character: string
  credit_id: string
  order: number
}

export type Crew = {
  adult: boolean
  gender: number
  id: number
  known_for_department: string
  name: string
  original_name: string
  popularity: number
  profile_path: string
  credit_id: string
  department: string
  job: string
}

export type Credits = {
  id: number
  cast: Cast[]
  crew: Crew[]
}

// File: tmdb/models/genres.ts
type Genre = {
  id: number
  name: string
}

export type GetGenresResponse = {
  genres: Genre[]
}

// File: tmdb/models/images.ts
export type Image = {
  aspect_ratio: number
  file_path: string
  height: number
  iso_639_1: string
  vote_average: number
  vote_count: number
  width: number
}

export type GetImagesResponse = {
  id: number
  backdrops: Image[]
  logos: Image[]
  posters: Image[]
  profiles: Image[]
}

// File: tmdb/models/index.ts
export * from "./collections"
export * from "./combined-credits"
export * from "./credits"
export * from "./genres"
export * from "./images"
export * from "./keywords"
export * from "./language"
export * from "./movie"
export * from "./person"
export * from "./reviews"
export * from "./season"
export * from "./tv"
export * from "./videos"
export * from "./watch-providers"

// File: tmdb/models/keywords.ts
export type Keyword = {
  name: string
  id: number
}

export type GetKeywordsResponse = {
  id: number
  results?: Array<Keyword>
  keywords?: Array<Keyword>
}

// File: tmdb/models/language.ts
export type Language =
  | "en-US"
  | "es-ES"
  | "fr-FR"
  | "de-DE"
  | "it-IT"
  | "pt-BR"
  | "ja-JP"

export type GetLanguagesResponse = Array<{
  english_name: string
  iso_639_1: string
  name: string
}>

// File: tmdb/models/movie.ts
import {
  Genre,
  ProductionCompany,
  ProductionCountry,
  SpokenLanguage,
  WithMediaType,
} from "./commons"

export type BelongsToCollection = {
  id: number
  name: string
  poster_path: string
  backdrop_path: string
}

export type MovieDetails = {
  adult: boolean
  backdrop_path: string
  belongs_to_collection?: BelongsToCollection
  budget: number
  genres: Genre[]
  homepage: string
  id: number
  imdb_id: string
  original_language: string
  original_title: string
  overview: string
  popularity: number
  poster_path?: string
  production_companies: ProductionCompany[]
  production_countries: ProductionCountry[]
  release_date: string
  revenue: number
  runtime: number
  spoken_languages: SpokenLanguage[]
  status: string
  tagline: string
  title: string
  video: boolean
  vote_average: number
  vote_count: number
}

export type Movie = {
  id: number
  poster_path: string
  adult: boolean
  overview: string
  release_date: string
  genre_ids: number[]
  original_title: string
  original_language: string
  title: string
  backdrop_path?: string
  popularity: number
  vote_count: number
  video: boolean
  vote_average: number
}

export type MovieWithMediaType = WithMediaType<Movie, "movie">

// File: tmdb/models/person.ts
import { WithMediaType } from "./commons"
import { MovieWithMediaType } from "./movie"
import { TvShowWithMediaType } from "./tv"

export type Person = {
  id: number
  name: string
  known_for: Array<MovieWithMediaType | TvShowWithMediaType>
  profile_path: string
  adult: boolean
  known_for_department: string
  gender: number
  popularity: number
}
export type PersonWithMediaType = WithMediaType<Person, "person">

export type PersonDetails = {
  adult: boolean
  also_known_as: string[]
  birthday: string
  biography: string
  deathday?: string
  gender: number
  homepage?: string
  id: number
  imdb_id: string
  known_for_department: string
  name: string
  place_of_birth: string
  popularity: number
  profile_path: string
}

// File: tmdb/models/reviews.ts
export type Review = {
  id: string
  author: string
  author_details: AuthorDetails
  content: string
  created_at: string
  updated_at: string
  url: string
}

export type AuthorDetails = {
  name: string
  username: string
  avatar_path: string
  rating: number
}

// File: tmdb/models/season.ts
import { Crew } from "./credits"

export type GuestStar = {
  credit_id: string
  order: number
  character: string
  adult: boolean
  gender: number | null
  id: number
  known_for_department: string
  name: string
  original_name: string
  popularity: number
  profile_path: string | null
}

export type Episode = {
  air_date: string
  episode_number: number
  crew: Crew[]
  guest_stars: GuestStar[]
  id: number
  name: string
  overview: string
  production_code: string
  season_number: number
  still_path: string
  vote_average: number
  vote_count: number
  runtime: number
  show_id: number
}

export type SeasonDetails = {
  air_date: string
  episodes: Episode[]
  name: string
  overview: string
  id: number
  poster_path?: string
  season_number: number
}

// File: tmdb/models/tv.ts
import {
  Genre,
  ProductionCompany,
  ProductionCountry,
  SpokenLanguage,
  WithMediaType,
} from "./commons"

export type TvShow = {
  poster_path: string
  popularity: number
  id: number
  backdrop_path?: string
  vote_average: number
  overview: string
  first_air_date: string
  origin_country: string[]
  genre_ids: number[]
  original_language: string
  vote_count: number
  name: string
  original_name: string
}

export type TvShowWithMediaType = WithMediaType<TvShow, "tv">

export type CreatedBy = {
  id: number
  credit_id: string
  name: string
  gender: number
  profile_path: string
}
export type NextEpisodeToAir = {
  id: number
  name: string
  overview: string
  vote_average: number
  vote_count: number
  air_date: string
  episode_number: number
  production_code: string
  runtime: number
  season_number: number
  show_id: number
  still_path: string
}

export type LastEpisodeToAir = {
  air_date: string
  episode_number: number
  id: number
  name: string
  overview: string
  production_code: string
  season_number: number
  still_path: string
  vote_average: number
  vote_count: number
}

export type Network = {
  name: string
  id: number
  logo_path: string
  origin_country: string
}

export type Season = {
  air_date: string
  episode_count: number
  id: number
  name: string
  overview: string
  poster_path: string
  season_number: number
  vote_average: number
}

export type TvShowDetails = {
  backdrop_path: string
  created_by: CreatedBy[]
  episode_run_time: number[]
  first_air_date: string
  genres: Genre[]
  homepage: string
  id: number
  in_production: boolean
  languages: string[]
  last_air_date: string
  last_episode_to_air: LastEpisodeToAir
  name: string
  next_episode_to_air?: NextEpisodeToAir
  networks: Network[]
  number_of_episodes: number
  number_of_seasons: number
  origin_country: string[]
  original_language: string
  original_name: string
  overview: string
  popularity: number
  poster_path: string
  production_companies: ProductionCompany[]
  production_countries: ProductionCountry[]
  seasons: Season[]
  spoken_languages: SpokenLanguage[]
  status: string
  tagline: string
  type: string
  vote_average: number
  vote_count: number
}

// File: tmdb/models/videos.ts
export type Video = {
  id: string
  iso_639_1: string
  iso_3166_1: string
  key: string
  name: string
  site: string
  size: number
  type: string
}

export type GetVideosResponse = {
  id: number
  results: Video[]
}

// File: tmdb/models/watch-providers.ts
export type Flatrate = {
  display_priority: number
  logo_path: string
  provider_id: number
  provider_name: string
}

export type Rent = {
  display_priority: number
  logo_path: string
  provider_id: number
  provider_name: string
}

export type Buy = {
  display_priority: number
  logo_path: string
  provider_id: number
  provider_name: string
}

type WatchLocaleItem = {
  link: string
  flatrate: Flatrate[]
  rent: Rent[]
  buy: Buy[]
}

type CountryCode =
  | "AR"
  | "AT"
  | "AU"
  | "BE"
  | "BR"
  | "CA"
  | "CH"
  | "CL"
  | "CO"
  | "CZ"
  | "DE"
  | "DK"
  | "EC"
  | "EE"
  | "ES"
  | "FI"
  | "FR"
  | "GB"
  | "GR"
  | "HU"
  | "ID"
  | "IE"
  | "IN"
  | "IT"
  | "JP"
  | "KR"
  | "LT"
  | "LV"
  | "MX"
  | "MY"
  | "NL"
  | "NO"
  | "NZ"
  | "PE"
  | "PH"
  | "PL"
  | "PT"
  | "RO"
  | "RU"
  | "SE"
  | "SG"
  | "TH"
  | "TR"
  | "US"
  | "VE"
  | "ZA"

export type WatchLocale = {
  [key in CountryCode]: WatchLocaleItem
}

export type WatchProviders = {
  id: number
  results: WatchLocale
}

export type GetWatchProvidersResponse = {
  results: WatchProvider[]
}

export type GetAvailableRegionsResponse = {
  results: Array<{
    english_name: string
    iso_3166_1: string
    native_name: string
  }>
}

export type WatchProvider = {
  display_priorities: Record<string, number>
  display_priority: number
  logo_path: string
  provider_name: string
  provider_id: number
}

// File: tmdb/utils/format.ts
/**
 * Formats a given string into HTML paragraphs. Each line in the input string becomes a separate paragraph.
 * @param string The input string to format.
 * @returns A string of HTML paragraphs.
 */
const content = (string: string) => {
  return string
    .split("\n")
    .filter((section) => section !== "")
    .map((section) => `<p>${section}</p>`)
    .join("")
}

/**
 * Formats a duration from minutes into a human-readable string.
 * @param minutes The duration in minutes.
 * @returns A string representing the duration in hours and minutes.
 */
const runtime = (minutes: number) => {
  const hours = Math.floor(minutes / 60)
  const mins = minutes % 60

  return `${hours ? hours + "h" : ""} ${mins}min`
}

/**
 * Formats a date string into a human-readable long date format.
 * @param date The date string to format.
 * @returns A string representing the formatted date.
 */
const date = (date: string) => {
  return new Date(date).toLocaleDateString("en-US", {
    dateStyle: "long",
  })
}

/**
 * Extracts the year from a date string.
 * @param date The date string to extract the year from.
 * @returns The year as a number.
 */
const year = (date: string) => new Date(date).getFullYear()

/**
 * Formats a number into a currency string.
 * @param x The number to format.
 * @returns A string representing the formatted currency.
 */
const currency = (x: number) => {
  const formatter = new Intl.NumberFormat("en-US", {
    style: "currency",
    currency: "USD",
    minimumFractionDigits: 0,
  })
  return formatter.format(x)
}

export const format = {
  content,
  runtime,
  date,
  year,
  currency,
}

// File: tmdb/utils/image.ts
export type ImageSize = (typeof imageSizes)[keyof typeof imageSizes]
export type PosterSize = keyof typeof imageSizes.poster
export type BackdropSize = keyof typeof imageSizes.backdrop
export type ProfileSize = keyof typeof imageSizes.profile
export type LogoSize = keyof typeof imageSizes.logo

/**
 * Object containing different sizes for TMDB images.
 */
const imageSizes = {
  backdrop: {
    w300: "w300",
    w780: "w780",
    w1280: "w1280",
    original: "original",
  },
  logo: {
    w45: "w45",
    w92: "w92",
    w154: "w154",
    w185: "w185",
    w300: "w300",
    w500: "w500",
    original: "original",
  },
  poster: {
    w92: "w92",
    w154: "w154",
    w185: "w185",
    w342: "w342",
    w500: "w500",
    w780: "w780",
    original: "original",
  },
  profile: {
    w45: "w45",
    w185: "w185",
    h632: "h632",
    original: "original",
  },
  still: {
    w92: "w92",
    w185: "w185",
    w300: "w300",
    original: "original",
  },
  original: "original",
}

/**
 * Generates a URL for an image.
 * @param path The path of the image.
 * @param type The size of the image as defined in `imageSizes`.
 * @returns The URL of the image or a placeholder image URL if the path is invalid.
 */
const url = (path: string, type: ImageSize = "original") => {
  if (!path) {
    console.error("Invalid image path provided.")
    return "/placeholder.png"
  }
  return `https://image.tmdb.org/t/p/${type}/${path}`
}

/**
 * Generates a URL for a poster image.
 * @param path The path of the poster image.
 * @param size The size of the poster image as defined in `imageSizes.poster`.
 * @returns The URL of the poster image.
 */
const poster = (path: string, size: PosterSize = "original") => {
  return url(path, imageSizes.poster[size])
}

/**
 * Generates a URL for a backdrop image.
 * @param path The path of the backdrop image.
 * @param size The size of the backdrop image as defined in `imageSizes.backdrop`.
 * @returns The URL of the backdrop image.
 */
const backdrop = (path: string, size: BackdropSize = "original") => {
  return url(path, imageSizes.backdrop[size])
}

/**
 * Generates a URL for a profile image.
 * @param path The path of the profile image.
 * @param size The size of the profile image as defined in `imageSizes.profile`.
 * @returns The URL of the profile image.
 */
const profile = (path: string, size: ProfileSize = "original") => {
  return url(path, imageSizes.profile[size])
}

/**
 * Generates the URL for a logo image.
 * @param path - The path of the image.
 * @param size - The size of the logo image. Defaults to "original".
 * @returns The URL of the logo image.
 */
const logo = (path: string, size: LogoSize = "original") => {
  return url(path, imageSizes.logo[size])
}

/**
 * Object containing functions to generate URLs for different types of TMDB images.
 */
export const tmdbImage = {
  url,
  poster,
  backdrop,
  profile,
  logo,
}

// File: tmdb/utils/index.ts
export * from "./image"
export * from "./yt"
export * from "./format"

// File: tmdb/utils/yt.ts
/**
 * Generates a URL for embedding a YouTube video.
 * @param key The unique identifier for the YouTube video.
 * @param autoplay Optional parameter to enable autoplay of the video. Defaults to false.
 * @returns The URL for embedding the YouTube video with specified parameters.
 */
const video = (key: string, autoplay: boolean = false) =>
  `https://www.youtube.com/embed/${key}?rel=0&showinfo=0&autoplay=${
    autoplay ? 1 : 0
  }`

/**
 * Generates a URL for a YouTube video thumbnail.
 * @param key The unique identifier for the YouTube video.
 * @returns The URL for the video's thumbnail image.
 */
const thumbnail = (key: string) =>
  `https://img.youtube.com/vi/${key}/hqdefault.jpg`

export const yt = {
  video,
  thumbnail,
}

